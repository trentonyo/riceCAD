import{TEXTUREDIMENSION_2D as t,SAMPLETYPE_FLOAT as e}from"./constants.js";class s{constructor(t,e){this.name=t,this.visibility=e}}class r{constructor(s,r,i=t,o=e){this.scopeId=void 0,this.name=s,this.visibility=r,this.textureDimension=i,this.sampleType=o}}class i{constructor(t,e,s){this.device=t,this.bufferFormats=e,this.bufferFormatsMap=new Map,e.forEach(((t,e)=>this.bufferFormatsMap.set(t.name,e))),this.textureFormats=s;const r=t.scope;this.textureFormatsMap=new Map,s.forEach(((t,e)=>{this.textureFormatsMap.set(t.name,e),t.scopeId=r.resolve(t.name)})),this.impl=t.createBindGroupFormatImpl(this)}destroy(){this.impl.destroy()}getTexture(t){const e=this.textureFormatsMap.get(t);return void 0!==e?this.textureFormats[e]:null}getShaderDeclarationTextures(t){let e="",s=this.bufferFormats.length;return this.textureFormats.forEach((r=>{e+=`layout(set = ${t}, binding = ${s++}) uniform texture2D ${r.name};\nlayout(set = ${t}, binding = ${s++}) uniform sampler ${r.name}_sampler;\n`})),e}loseContext(){}}export{s as BindBufferFormat,i as BindGroupFormat,r as BindTextureFormat};
