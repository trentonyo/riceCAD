import"../tracing.js";import{Mat4 as r}from"../math/mat4.js";import{Vec3 as t}from"../math/vec3.js";import{BoundingBox as n}from"./bounding-box.js";import{BoundingSphere as o}from"./bounding-sphere.js";import{Ray as s}from"./ray.js";const e=new s,i=new t,a=new o,m=new r;class f{constructor(o=new r,s=new t(.5,.5,.5)){this.halfExtents=s,this._modelTransform=o.clone().invert(),this._worldTransform=o.clone(),this._aabb=new n(new t,this.halfExtents)}set worldTransform(r){this._worldTransform.copy(r),this._modelTransform.copy(r).invert()}get worldTransform(){return this._worldTransform}intersectsRay(r,t){if(this._modelTransform.transformPoint(r.origin,e.origin),this._modelTransform.transformVector(r.direction,e.direction),t){const r=this._aabb._intersectsRay(e,t);return m.copy(this._modelTransform).invert().transformPoint(t,t),r}return this._aabb._fastIntersectsRay(e)}containsPoint(r){return this._modelTransform.transformPoint(r,i),this._aabb.containsPoint(i)}intersectsBoundingSphere(r){return this._modelTransform.transformPoint(r.center,a.center),a.radius=r.radius,!!this._aabb.intersectsBoundingSphere(a)}}export{f as OrientedBox};
