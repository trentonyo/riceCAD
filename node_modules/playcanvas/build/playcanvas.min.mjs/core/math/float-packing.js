import{math as t}from"./math.js";const a=new Float32Array(1),o=new Int32Array(a.buffer);class n{static float2Half(t){a[0]=t;const n=o[0];let s=n>>16&32768,r=n>>12&2047;const c=n>>23&255;return c<103?s:c>142?(s|=31744,s|=(255===c?0:1)&&8388607&n,s):c<113?(r|=2048,s|=(r>>114-c)+(r>>113-c&1),s):(s|=c-112<<10|r>>1,s+=1&r,s)}static float2Bytes(t,a,o,n){const s=255*t%1;if(a[o+0]=Math.round(255*(t%1-.00392156862745098*s)),n>1){const r=65025*t%1;if(a[o+1]=Math.round(255*(s-.00392156862745098*r)),n>2){const s=16581375*t%1;a[o+2]=Math.round(255*(r-.00392156862745098*s)),n>3&&(a[o+3]=Math.round(255*s))}}}static float2BytesRange(a,o,s,r,c,e){a=t.clamp((a-r)/(c-r),0,1),n.float2Bytes(a,o,s,e)}static float2MantissaExponent(t,a,o,s){const r=Math.floor(Math.log2(Math.abs(t)))+1;t/=Math.pow(2,r),n.float2BytesRange(t,a,o,-1,1,s-1),a[o+s-1]=Math.round(r+127)}}export{n as FloatPacking};
