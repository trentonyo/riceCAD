import{path as e}from"../../core/path.js";import"../../core/tracing.js";import{Http as t,http as r}from"../../platform/net/http.js";import{GlbModelParser as a}from"../parsers/glb-model.js";import{JsonModelParser as s}from"../parsers/json-model.js";import{getDefaultMaterial as i}from"../../scene/materials/default-material.js";class o{constructor(t){this.handlerType="model",this._device=t.graphicsDevice,this._parsers=[],this._defaultMaterial=i(this._device),this.maxRetries=0,this.addParser(new s(this._device,this._defaultMaterial),(function(t,r){return".json"===e.getExtension(t)})),this.addParser(new a(this._device,this._defaultMaterial),(function(t,r){return".glb"===e.getExtension(t)}))}load(a,s){"string"==typeof a&&(a={load:a,original:a});const i={retry:this.maxRetries>0,maxRetries:this.maxRetries};(a.load.startsWith("blob:")||a.load.startsWith("data:"))&&(".glb"===e.getExtension(a.original).toLowerCase()?i.responseType=t.ResponseType.ARRAY_BUFFER:i.responseType=t.ResponseType.JSON),r.get(a.load,i,(function(e,t){s&&(e?s(`Error loading model: ${a.original} [${e}]`):s(null,t))}))}open(e,t){for(let r=0;r<this._parsers.length;r++){const a=this._parsers[r];if(a.decider(e,t))return a.parser.parse(t)}return null}patch(e,t){if(!e.resource)return;const r=e.data,a=this;e.resource.meshInstances.forEach((function(s,i){if(r.mapping){const o=function e(r){r.resource?s.material=r.resource:(r.once("load",e),t.load(r)),r.once("remove",(function(e){s.material===e.resource&&(s.material=a._defaultMaterial)}))};if(!r.mapping[i])return void(s.material=a._defaultMaterial);const n=r.mapping[i].material,l=r.mapping[i].path;let p;if(void 0!==n)n?(p=t.get(n),p?o(p):t.once("add:"+n,o)):s.material=a._defaultMaterial;else if(l){const a=e.getAbsoluteUrl(r.mapping[i].path);p=t.getByUrl(a),p?o(p):t.once("add:url:"+a,o)}}}))}addParser(e,t){this._parsers.push({parser:e,decider:t})}}export{o as ModelHandler};
