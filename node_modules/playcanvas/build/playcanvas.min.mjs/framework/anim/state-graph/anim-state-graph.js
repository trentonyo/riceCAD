class t{constructor(t){if(this._layers=[],this._parameters={},Array.isArray(t.layers))this._layers=t.layers;else for(const s in t.layers){const e=t.layers[s],r={name:e.name,blendType:e.blendType,weight:e.weight,states:[],transitions:[]};for(let s=0;s<e.states.length;s++)r.states.push(t.states[e.states[s]]);for(let s=0;s<e.transitions.length;s++){const a=t.transitions[e.transitions[s]];if(a.conditions&&!Array.isArray(a.conditions)){const t=Object.keys(a.conditions),s=[];for(let e=0;e<t.length;e++){const r=a.conditions[t[e]];r.parameterName&&s.push(r)}a.conditions=s}Number.isInteger(a.from)&&(a.from=t.states[a.from].name),Number.isInteger(a.to)&&(a.to=t.states[a.to].name),r.transitions.push(a)}this._layers.push(r)}for(const s in t.parameters){const e=t.parameters[s];this._parameters[e.name]={type:e.type,value:e.value}}}get parameters(){return Object.assign({},this._parameters)}get layers(){return this._layers}}export{t as AnimStateGraph};
