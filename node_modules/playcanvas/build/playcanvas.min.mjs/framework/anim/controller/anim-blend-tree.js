import{AnimNode as e}from"./anim-node.js";class t extends e{constructor(t,r,i,h,n,s,a,l,c){super(t,r,i,h),this._parameters=n,this._parameterValues=new Array(n.length),this._children=[],this._findParameter=c,this._syncAnimations=!1!==a,this._pointCache={};for(let r=0;r<s.length;r++){const h=s[r];h.children?this._children.push(l(h.type,this,null,i,1,h.parameter?[h.parameter]:h.parameters,h.children,l,c)):this._children.push(new e(t,this,h.name,h.point,h.speed))}}get weight(){return this.calculateWeights(),this._parent?this._parent.weight*this._weight:this._weight}get syncAnimations(){return this._syncAnimations}getChild(e){for(let t=0;t<this._children.length;t++)if(this._children[t].name===e)return this._children[t];return null}updateParameterValues(){let e=!0;for(let t=0;t<this._parameterValues.length;t++){const r=this._findParameter(this._parameters[t]).value;this._parameterValues[t]!==r&&(this._parameterValues[t]=r,e=!1)}return e}getNodeWeightedDuration(e){return this._children[e].animTrack.duration/this._children[e].speedMultiplier*this._children[e].weight}getNodeCount(){let e=0;for(let r=0;r<this._children.length;r++){this._children[r].constructor===t?e+=this._children[r].getNodeCount():e++}return e}}export{t as AnimBlendTree};
