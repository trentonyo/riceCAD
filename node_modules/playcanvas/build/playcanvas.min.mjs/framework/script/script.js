import"../../core/tracing.js";import{EventHandler as t}from"../../core/event-handler.js";import{script as e}from"../script.js";import{AppBase as r}from"../app-base.js";import{ScriptAttributes as s}from"./script-attributes.js";import{ScriptType as o}from"./script-type.js";import{ScriptTypes as n}from"./script-types.js";const i=new Set(["system","entity","create","destroy","swap","move","scripts","_scripts","_scriptsIndex","_scriptsData","enabled","_oldState","onEnable","onDisable","onPostStateChange","_onSetEnabled","_checkState","_onBeforeRemove","_onInitializeAttributes","_onInitialize","_onPostInitialize","_onUpdate","_onPostUpdate","_callbacks","has","get","on","off","fire","once","hasEvent"]);function a(r,n){if(e.legacy)return null;if(i.has(r))throw new Error(`script name: '${r}' is reserved, please change script name`);const a=function(e){t.prototype.initEventHandler.call(this),o.prototype.initScriptType.call(this,e)};return(a.prototype=Object.create(o.prototype)).constructor=a,a.extend=o.extend,a.attributes=new s(a),p(a,r,n),a}const c={};function p(t,e,s){if(t.legacy)return;if("function"!=typeof t)throw new Error(`script class: '${t}' must be a constructor function (i.e. class).`);if(!(t.prototype instanceof o))throw new Error(`script class: '${o.__getScriptName(t)}' does not extend pc.ScriptType.`);if(e=e||t.__name||o.__getScriptName(t),i.has(e))throw new Error(`script name: '${e}' is reserved, please change script name`);t.__name=e;(s?s.scripts:r.getApplication().scripts).add(t),n.push(t,t.legacy)}s.reservedNames.forEach(((t,e,r)=>{c[t]=1})),a.reservedAttributes=c;export{a as createScript,p as registerScript};
