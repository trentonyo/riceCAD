import{platform as t}from"../../core/platform.js";import{EventHandler as e}from"../../core/event-handler.js";import{Mat4 as i}from"../../core/math/mat4.js";import{Texture as h}from"../../platform/graphics/texture.js";import{PIXELFORMAT_L8_A8 as s,ADDRESS_CLAMP_TO_EDGE as r,FILTER_LINEAR as a}from"../../platform/graphics/constants.js";import{XRDEPTHSENSINGUSAGE_CPU as u,XRDEPTHSENSINGUSAGE_GPU as n}from"./constants.js";class _ extends e{constructor(t){super(),this._manager=void 0,this._available=!1,this._depthInfoCpu=null,this._depthInfoGpu=null,this._usage=null,this._dataFormat=null,this._matrixDirty=!1,this._matrix=new i,this._emptyBuffer=new Uint8Array(32),this._depthBuffer=null,this._texture=void 0,this._manager=t,this._texture=new h(this._manager.app.graphicsDevice,{format:s,mipmaps:!1,addressU:r,addressV:r,minFilter:a,magFilter:a,name:"XRDepthSensing"}),this.supported&&(this._manager.on("start",this._onSessionStart,this),this._manager.on("end",this._onSessionEnd,this))}destroy(){this._texture.destroy(),this._texture=null}_onSessionStart(){const t=this._manager.session;try{this._usage=t.depthUsage,this._dataFormat=t.depthDataFormat}catch(t){this._usage=null,this._dataFormat=null,this._available=!1,this.fire("error",t)}}_onSessionEnd(){this._depthInfoCpu=null,this._depthInfoGpu=null,this._usage=null,this._dataFormat=null,this._available&&(this._available=!1,this.fire("unavailable")),this._depthBuffer=null,this._texture._width=4,this._texture._height=4,this._texture._levels[0]=this._emptyBuffer,this._texture.upload()}_updateTexture(){const t=this._depthInfoCpu||this._depthInfoGpu;if(t){let e=!1;if(t.width===this._texture.width&&t.height===this._texture.height||(this._texture._width=t.width,this._texture._height=t.height,this._matrixDirty=!0,e=!0),this._depthInfoCpu){const t=this._depthInfoCpu.data;this._depthBuffer=new Uint8Array(t),this._texture._levels[0]=this._depthBuffer,this._texture.upload()}else this._depthInfoGpu&&(this._texture._levels[0]=this._depthInfoGpu.texture,this._texture.upload());e&&this.fire("resize",t.width,t.height)}else this._depthBuffer&&(this._depthBuffer=null,this._texture._width=4,this._texture._height=4,this._texture._levels[0]=this._emptyBuffer,this._texture.upload())}update(t,e){if(!this._usage)return;let i=null,h=null;if(this._usage===u&&e?i=t.getDepthInformation(e):this._usage===n&&e&&(h=t.getDepthInformation(e)),(this._depthInfoCpu&&!i||!this._depthInfoCpu&&i||this.depthInfoGpu&&!h||!this._depthInfoGpu&&h)&&(this._matrixDirty=!0),this._depthInfoCpu=i,this._depthInfoGpu=h,this._updateTexture(),this._matrixDirty){this._matrixDirty=!1;const t=this._depthInfoCpu||this._depthInfoGpu;t?this._matrix.data.set(t.normDepthBufferFromNormView.matrix):this._matrix.setIdentity()}!this._depthInfoCpu&&!this._depthInfoGpu||this._available?this._depthInfoCpu||this._depthInfoGpu||!this._available||(this._available=!1,this.fire("unavailable")):(this._available=!0,this.fire("available"))}getDepth(t,e){return this._depthInfoCpu?this._depthInfoCpu.getDepthInMeters(t,e):null}get supported(){return t.browser&&!!window.XRDepthInformation}get available(){return this._available}get usage(){return this._usage}get dataFormat(){return this._dataFormat}get width(){const t=this._depthInfoCpu||this._depthInfoGpu;return t&&t.width||0}get height(){const t=this._depthInfoCpu||this._depthInfoGpu;return t&&t.height||0}get texture(){return this._texture}get uvMatrix(){return this._matrix}get rawValueToMeters(){const t=this._depthInfoCpu||this._depthInfoGpu;return t&&t.rawValueToMeters||0}}export{_ as XrDepthSensing};
