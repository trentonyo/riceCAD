import{EventHandler as t}from"../../core/event-handler.js";import{Mat4 as i}from"../../core/math/mat4.js";import{Quat as r}from"../../core/math/quat.js";import{Vec3 as e}from"../../core/math/vec3.js";import{Ray as s}from"../../core/shape/ray.js";import{XrHand as o}from"./xr-hand.js";const n=new r;let a=0;class h extends t{constructor(t,i){super(),this._id=void 0,this._manager=void 0,this._xrInputSource=void 0,this._ray=new s,this._rayLocal=new s,this._grip=!1,this._hand=null,this._localTransform=null,this._worldTransform=null,this._position=new e,this._rotation=new r,this._localPosition=null,this._localRotation=null,this._dirtyLocal=!0,this._dirtyRay=!1,this._selecting=!1,this._squeezing=!1,this._elementInput=!0,this._elementEntity=null,this._hitTestSources=[],this._id=++a,this._manager=t,this._xrInputSource=i,i.hand&&(this._hand=new o(this))}get id(){return this._id}get inputSource(){return this._xrInputSource}get targetRayMode(){return this._xrInputSource.targetRayMode}get handedness(){return this._xrInputSource.handedness}get profiles(){return this._xrInputSource.profiles}get grip(){return this._grip}get hand(){return this._hand}get gamepad(){return this._xrInputSource.gamepad||null}get selecting(){return this._selecting}get squeezing(){return this._squeezing}set elementInput(t){this._elementInput!==t&&(this._elementInput=t,this._elementInput||(this._elementEntity=null))}get elementInput(){return this._elementInput}get elementEntity(){return this._elementEntity}get hitTestSources(){return this._hitTestSources}update(t){if(this._hand)this._hand.update(t);else{if(this._xrInputSource.gripSpace){const s=t.getPose(this._xrInputSource.gripSpace,this._manager._referenceSpace);s&&(this._grip||(this._grip=!0,this._localTransform=new i,this._worldTransform=new i,this._localPosition=new e,this._localRotation=new r),this._dirtyLocal=!0,this._localPosition.copy(s.transform.position),this._localRotation.copy(s.transform.orientation))}const s=t.getPose(this._xrInputSource.targetRaySpace,this._manager._referenceSpace);s&&(this._dirtyRay=!0,this._rayLocal.origin.copy(s.transform.position),this._rayLocal.direction.set(0,0,-1),n.copy(s.transform.orientation),n.transformVector(this._rayLocal.direction,this._rayLocal.direction))}}_updateTransforms(){this._dirtyLocal&&(this._dirtyLocal=!1,this._localTransform.setTRS(this._localPosition,this._localRotation,e.ONE));const t=this._manager.camera.parent;t?this._worldTransform.mul2(t.getWorldTransform(),this._localTransform):this._worldTransform.copy(this._localTransform)}_updateRayTransforms(){const t=this._dirtyRay;this._dirtyRay=!1;if(this._manager.camera.parent){const t=this._manager.camera.parent.getWorldTransform();t.getTranslation(this._position),this._rotation.setFromMat4(t),this._rotation.transformVector(this._rayLocal.origin,this._ray.origin),this._ray.origin.add(this._position),this._rotation.transformVector(this._rayLocal.direction,this._ray.direction)}else t&&(this._ray.origin.copy(this._rayLocal.origin),this._ray.direction.copy(this._rayLocal.direction))}getPosition(){return this._position?(this._updateTransforms(),this._worldTransform.getTranslation(this._position),this._position):null}getLocalPosition(){return this._localPosition}getRotation(){return this._rotation?(this._updateTransforms(),this._rotation.setFromMat4(this._worldTransform),this._rotation):null}getLocalRotation(){return this._localRotation}getOrigin(){return this._updateRayTransforms(),this._ray.origin}getDirection(){return this._updateRayTransforms(),this._ray.direction}hitTestStart(t={}){t.profile=this._xrInputSource.profiles[0];const i=t.callback;t.callback=(t,r)=>{r&&this.onHitTestSourceAdd(r),i&&i(t,r)},this._manager.hitTest.start(t)}onHitTestSourceAdd(t){this._hitTestSources.push(t),this.fire("hittest:add",t),t.on("result",(function(i,r,e){e===this&&this.fire("hittest:result",t,i,r)}),this),t.once("remove",(function(){this.onHitTestSourceRemove(t),this.fire("hittest:remove",t)}),this)}onHitTestSourceRemove(t){const i=this._hitTestSources.indexOf(t);-1!==i&&this._hitTestSources.splice(i,1)}}export{h as XrInputSource};
