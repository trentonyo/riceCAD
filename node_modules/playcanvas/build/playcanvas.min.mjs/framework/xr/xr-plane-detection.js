import{platform as e}from"../../core/platform.js";import{EventHandler as s}from"../../core/event-handler.js";import{XrPlane as t}from"./xr-plane.js";class a extends s{constructor(s){super(),this._manager=void 0,this._supported=e.browser&&!!window.XRPlane,this._available=!1,this._planesIndex=new Map,this._planes=null,this._manager=s,this._supported&&this._manager.on("end",this._onSessionEnd,this)}_onSessionEnd(){if(this._planes)for(let e=0;e<this._planes.length;e++)this._planes[e].destroy();this._planesIndex.clear(),this._planes=null,this._available&&(this._available=!1,this.fire("unavailable"))}update(e){let s;if(this._available)s=e.detectedPlanes;else try{s=e.detectedPlanes,this._planes=[],this._available=!0,this.fire("available")}catch(e){return}for(const[e,t]of this._planesIndex)s.has(e)||(this._planesIndex.delete(e),this._planes.splice(this._planes.indexOf(t),1),t.destroy(),this.fire("remove",t));for(const a of s){let s=this._planesIndex.get(a);s?s.update(e):(s=new t(this,a),this._planesIndex.set(a,s),this._planes.push(s),s.update(e),this.fire("add",s))}}get supported(){return this._supported}get available(){return this._available}get planes(){return this._planes}}export{a as XrPlaneDetection};
