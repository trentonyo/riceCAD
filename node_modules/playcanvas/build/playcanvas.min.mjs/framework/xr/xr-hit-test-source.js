import{EventHandler as t}from"../../core/event-handler.js";import{Quat as e}from"../../core/math/quat.js";import{Vec3 as s}from"../../core/math/vec3.js";const i=[],r=[];class o extends t{constructor(t,e,s){super(),this.manager=void 0,this._xrHitTestSource=void 0,this._transient=void 0,this.manager=t,this._xrHitTestSource=e,this._transient=s}remove(){if(!this._xrHitTestSource)return;const t=this.manager.hitTest.sources,e=t.indexOf(this);-1!==e&&t.splice(e,1),this.onStop()}onStop(){this._xrHitTestSource.cancel(),this._xrHitTestSource=null,this.fire("remove"),this.manager.hitTest.fire("remove",this)}update(t){if(this._transient){const e=t.getHitTestResultsForTransientInput(this._xrHitTestSource);for(let t=0;t<e.length;t++){const s=e[t];let i;s.inputSource&&(i=this.manager.input._getByInputSource(s.inputSource)),this.updateHitResults(s.results,i)}}else this.updateHitResults(t.getHitTestResults(this._xrHitTestSource))}updateHitResults(t,o){for(let n=0;n<t.length;n++){const h=t[n].getPose(this.manager._referenceSpace);let u=i.pop();u||(u=new s),u.copy(h.transform.position);let a=r.pop();a||(a=new e),a.copy(h.transform.orientation),this.fire("result",u,a,o),this.manager.hitTest.fire("result",this,u,a,o),i.push(u),r.push(a)}}}export{o as XrHitTestSource};
