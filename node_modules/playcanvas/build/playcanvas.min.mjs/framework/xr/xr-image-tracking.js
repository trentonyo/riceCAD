import{platform as e}from"../../core/platform.js";import{EventHandler as t}from"../../core/event-handler.js";import{XrTrackedImage as i}from"./xr-tracked-image.js";class s extends t{constructor(t){super(),this._manager=void 0,this._supported=e.browser&&!!window.XRImageTrackingResult,this._available=!1,this._images=[],this._manager=t,this._supported&&(this._manager.on("start",this._onSessionStart,this),this._manager.on("end",this._onSessionEnd,this))}add(e,t){if(!this._supported||this._manager.active)return null;const s=new i(e,t);return this._images.push(s),s}remove(e){if(this._manager.active)return;const t=this._images.indexOf(e);-1!==t&&(e.destroy(),this._images.splice(t,1))}_onSessionStart(){this._manager.session.getTrackedImageScores().then((e=>{this._available=!0;for(let t=0;t<e.length;t++)this._images[t]._trackable="trackable"===e[t]})).catch((e=>{this._available=!1,this.fire("error",e)}))}_onSessionEnd(){this._available=!1;for(let e=0;e<this._images.length;e++){const t=this._images[e];t._pose=null,t._measuredWidth=0,t._tracking&&(t._tracking=!1,t.fire("untracked"))}}prepareImages(e){this._images.length?Promise.all(this._images.map((function(e){return e.prepare()}))).then((function(t){e(null,t)})).catch((function(t){e(t,null)})):e(null,null)}update(e){if(!this._available)return;const t=e.getImageTrackingResults(),i={};for(let s=0;s<t.length;s++){i[t[s].index]=t[s];const a=this._images[t[s].index];a._emulated="emulated"===t[s].trackingState,a._measuredWidth=t[s].measuredWidthInMeters,a._pose=e.getPose(t[s].imageSpace,this._manager._referenceSpace)}for(let e=0;e<this._images.length;e++)this._images[e]._tracking&&!i[e]?(this._images[e]._tracking=!1,this._images[e].fire("untracked")):!this._images[e]._tracking&&i[e]&&(this._images[e]._tracking=!0,this._images[e].fire("tracked"))}get supported(){return this._supported}get available(){return this._available}get images(){return this._images}}export{s as XrImageTracking};
