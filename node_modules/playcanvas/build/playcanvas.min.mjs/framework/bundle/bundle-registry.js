class s{constructor(s){this._assets=s,this._bundleAssets={},this._assetsInBundles={},this._urlsInBundles={},this._fileRequests={},this._assets.on("add",this._onAssetAdded,this),this._assets.on("remove",this._onAssetRemoved,this)}_onAssetAdded(s){if("bundle"===s.type){this._bundleAssets[s.id]=s,this._registerBundleEventListeners(s.id);for(let e=0,t=s.data.assets.length;e<t;e++)this._indexAssetInBundle(s.data.assets[e],s)}else this._assetsInBundles[s.id]&&this._indexAssetFileUrls(s)}_registerBundleEventListeners(s){this._assets.on("load:"+s,this._onBundleLoaded,this),this._assets.on("error:"+s,this._onBundleError,this)}_unregisterBundleEventListeners(s){this._assets.off("load:"+s,this._onBundleLoaded,this),this._assets.off("error:"+s,this._onBundleError,this)}_indexAssetInBundle(s,e){if(this._assetsInBundles[s]){const t=this._assetsInBundles[s];-1===t.indexOf(e)&&t.push(e)}else this._assetsInBundles[s]=[e];const t=this._assets.get(s);t&&this._indexAssetFileUrls(t)}_indexAssetFileUrls(s){const e=this._getAssetFileUrls(s);if(e)for(let t=0,n=e.length;t<n;t++){const n=e[t];this._urlsInBundles[n]=this._assetsInBundles[s.id]}}_getAssetFileUrls(s){let e=s.getFileUrl();if(!e)return null;e=this._normalizeUrl(e);const t=[e];if("font"===s.type){const n=s.data.info.maps.length;for(let s=1;s<n;s++)t.push(e.replace(".png",s+".png"))}return t}_normalizeUrl(s){return s&&s.split("?")[0]}_onAssetRemoved(s){if("bundle"===s.type){delete this._bundleAssets[s.id],this._unregisterBundleEventListeners(s.id);for(const e in this._assetsInBundles){const t=this._assetsInBundles[e],n=t.indexOf(s);if(-1!==n&&(t.splice(n,1),!t.length)){delete this._assetsInBundles[e];for(const s in this._urlsInBundles)this._urlsInBundles[s]===t&&delete this._urlsInBundles[s]}}this._onBundleError(`Bundle ${s.id} was removed`,s)}else if(this._assetsInBundles[s.id]){delete this._assetsInBundles[s.id];const e=this._getAssetFileUrls(s);for(let s=0,t=e.length;s<t;s++)delete this._urlsInBundles[e[s]]}}_onBundleLoaded(s){s.resource?requestAnimationFrame((()=>{if(this._fileRequests)for(const e in this._fileRequests){const t=this._urlsInBundles[e];if(!t||-1===t.indexOf(s))continue;const n=decodeURIComponent(e);let i=null;s.resource.hasBlobUrl(n)||(i=`Bundle ${s.id} does not contain URL ${e}`);const l=this._fileRequests[e];for(let e=0,t=l.length;e<t;e++)i?l[e](i):l[e](null,s.resource.getBlobUrl(n));delete this._fileRequests[e]}})):this._onBundleError(`Bundle ${s.id} failed to load`,s)}_onBundleError(s,e){for(const e in this._fileRequests){if(!this._findLoadedOrLoadingBundleForUrl(e)){const t=this._fileRequests[e];for(let e=0,n=t.length;e<n;e++)t[e](s);delete this._fileRequests[e]}}}_findLoadedOrLoadingBundleForUrl(s){const e=this._urlsInBundles[s];if(!e)return null;const t=e.length;for(let s=0;s<t;s++)if(e[s].loaded&&e[s].resource)return e[s];for(let s=0;s<t;s++)if(e[s].loading)return e[s];return null}listBundlesForAsset(s){return this._assetsInBundles[s.id]||null}list(){const s=[];for(const e in this._bundleAssets)s.push(this._bundleAssets[e]);return s}hasUrl(s){return!!this._urlsInBundles[s]}canLoadUrl(s){return!!this._findLoadedOrLoadingBundleForUrl(s)}loadUrl(s,e){const t=this._findLoadedOrLoadingBundleForUrl(s);if(t)if(t.loaded){const n=decodeURIComponent(s);if(!t.resource.hasBlobUrl(n))return void e(`Bundle ${t.id} does not contain URL ${s}`);e(null,t.resource.getBlobUrl(n))}else this._fileRequests.hasOwnProperty(s)?this._fileRequests[s].push(e):this._fileRequests[s]=[e];else e(`URL ${s} not found in any bundles`)}destroy(){this._assets.off("add",this._onAssetAdded,this),this._assets.off("remove",this._onAssetRemoved,this);for(const s in this._bundleAssets)this._unregisterBundleEventListeners(s);this._assets=null,this._bundleAssets=null,this._assetsInBundles=null,this._urlsInBundles=null,this._fileRequests=null}}export{s as BundleRegistry};
