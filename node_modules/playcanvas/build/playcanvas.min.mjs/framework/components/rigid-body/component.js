import"../../../core/tracing.js";import{Quat as t}from"../../../core/math/quat.js";import{Vec3 as i}from"../../../core/math/vec3.js";import{BODYGROUP_STATIC as e,BODYMASK_NOT_STATIC as s,BODYTYPE_STATIC as a,BODYTYPE_DYNAMIC as o,BODYTYPE_KINEMATIC as n,BODYGROUP_KINEMATIC as r,BODYMASK_ALL as l,BODYGROUP_DYNAMIC as h,BODYFLAG_KINEMATIC_OBJECT as c,BODYSTATE_DISABLE_DEACTIVATION as y,BODYSTATE_ACTIVE_TAG as _,BODYSTATE_DISABLE_SIMULATION as u}from"./constants.js";import{Component as m}from"../component.js";let d,g,p,b,f;class F extends m{constructor(t,o){super(t,o),this._angularDamping=0,this._angularFactor=new i(1,1,1),this._angularVelocity=new i,this._body=null,this._friction=.5,this._group=e,this._linearDamping=0,this._linearFactor=new i(1,1,1),this._linearVelocity=new i,this._mask=s,this._mass=1,this._restitution=0,this._rollingFriction=0,this._simulationEnabled=!1,this._type=a}static onLibraryLoaded(){"undefined"!=typeof Ammo&&(d=new Ammo.btTransform,g=new Ammo.btVector3,p=new Ammo.btVector3,b=new Ammo.btQuaternion,f=new Ammo.btVector3(0,0,0))}set angularDamping(t){this._angularDamping!==t&&(this._angularDamping=t,this._body&&this._body.setDamping(this._linearDamping,t))}get angularDamping(){return this._angularDamping}set angularFactor(t){this._angularFactor.equals(t)||(this._angularFactor.copy(t),this._body&&this._type===o&&(g.setValue(t.x,t.y,t.z),this._body.setAngularFactor(g)))}get angularFactor(){return this._angularFactor}set angularVelocity(t){this._body&&this._type===o&&(this._body.activate(),g.setValue(t.x,t.y,t.z),this._body.setAngularVelocity(g),this._angularVelocity.copy(t))}get angularVelocity(){if(this._body&&this._type===o){const t=this._body.getAngularVelocity();this._angularVelocity.set(t.x(),t.y(),t.z())}return this._angularVelocity}set body(t){this._body!==t&&(this._body=t,t&&this._simulationEnabled&&t.activate())}get body(){return this._body}set friction(t){this._friction!==t&&(this._friction=t,this._body&&this._body.setFriction(t))}get friction(){return this._friction}set group(t){this._group!==t&&(this._group=t,this.enabled&&this.entity.enabled&&(this.disableSimulation(),this.enableSimulation()))}get group(){return this._group}set linearDamping(t){this._linearDamping!==t&&(this._linearDamping=t,this._body&&this._body.setDamping(t,this._angularDamping))}get linearDamping(){return this._linearDamping}set linearFactor(t){this._linearFactor.equals(t)||(this._linearFactor.copy(t),this._body&&this._type===o&&(g.setValue(t.x,t.y,t.z),this._body.setLinearFactor(g)))}get linearFactor(){return this._linearFactor}set linearVelocity(t){this._body&&this._type===o&&(this._body.activate(),g.setValue(t.x,t.y,t.z),this._body.setLinearVelocity(g),this._linearVelocity.copy(t))}get linearVelocity(){if(this._body&&this._type===o){const t=this._body.getLinearVelocity();this._linearVelocity.set(t.x(),t.y(),t.z())}return this._linearVelocity}set mask(t){this._mask!==t&&(this._mask=t,this.enabled&&this.entity.enabled&&(this.disableSimulation(),this.enableSimulation()))}get mask(){return this._mask}set mass(t){if(this._mass!==t&&(this._mass=t,this._body&&this._type===o)){const i=this.enabled&&this.entity.enabled;i&&this.disableSimulation(),this._body.getCollisionShape().calculateLocalInertia(t,g),this._body.setMassProps(t,g),this._body.updateInertiaTensor(),i&&this.enableSimulation()}}get mass(){return this._mass}set restitution(t){this._restitution!==t&&(this._restitution=t,this._body&&this._body.setRestitution(t))}get restitution(){return this._restitution}set rollingFriction(t){this._rollingFriction!==t&&(this._rollingFriction=t,this._body&&this._body.setRollingFriction(t))}get rollingFriction(){return this._rollingFriction}set type(t){if(this._type!==t){switch(this._type=t,this.disableSimulation(),t){case o:this._group=h,this._mask=l;break;case n:this._group=r,this._mask=l;break;default:this._group=e,this._mask=s}this.createBody()}}get type(){return this._type}createBody(){const t=this.entity;let i;if(t.collision&&(i=t.collision.shape,t.trigger&&(t.trigger.destroy(),delete t.trigger)),i){this._body&&this.system.onRemove(t,this);const e=this._type===o?this._mass:0;this._getEntityTransform(d);const s=this.system.createBody(e,i,d);if(s.setRestitution(this._restitution),s.setFriction(this._friction),s.setRollingFriction(this._rollingFriction),s.setDamping(this._linearDamping,this._angularDamping),this._type===o){const t=this._linearFactor;g.setValue(t.x,t.y,t.z),s.setLinearFactor(g);const i=this._angularFactor;g.setValue(i.x,i.y,i.z),s.setAngularFactor(g)}else this._type===n&&(s.setCollisionFlags(s.getCollisionFlags()|c),s.setActivationState(y));s.entity=t,this.body=s,this.enabled&&t.enabled&&this.enableSimulation()}}isActive(){return!!this._body&&this._body.isActive()}activate(){this._body&&this._body.activate()}enableSimulation(){const t=this.entity;if(t.collision&&t.collision.enabled&&!this._simulationEnabled){const i=this._body;if(i){switch(this.system.addBody(i,this._group,this._mask),this._type){case o:this.system._dynamic.push(this),i.forceActivationState(_),this.syncEntityToBody();break;case n:this.system._kinematic.push(this),i.forceActivationState(y);break;case a:i.forceActivationState(_),this.syncEntityToBody()}"compound"===t.collision.type&&this.system._compounds.push(t.collision),i.activate(),this._simulationEnabled=!0}}}disableSimulation(){const t=this._body;if(t&&this._simulationEnabled){const i=this.system;let e=i._compounds.indexOf(this.entity.collision);e>-1&&i._compounds.splice(e,1),e=i._dynamic.indexOf(this),e>-1&&i._dynamic.splice(e,1),e=i._kinematic.indexOf(this),e>-1&&i._kinematic.splice(e,1),i.removeBody(t),t.forceActivationState(u),this._simulationEnabled=!1}}applyForce(){let t,i,e,s,a,o;switch(arguments.length){case 1:t=arguments[0].x,i=arguments[0].y,e=arguments[0].z;break;case 2:t=arguments[0].x,i=arguments[0].y,e=arguments[0].z,s=arguments[1].x,a=arguments[1].y,o=arguments[1].z;break;case 3:t=arguments[0],i=arguments[1],e=arguments[2];break;case 6:t=arguments[0],i=arguments[1],e=arguments[2],s=arguments[3],a=arguments[4],o=arguments[5]}const n=this._body;n&&(n.activate(),g.setValue(t,i,e),void 0!==s?(p.setValue(s,a,o),n.applyForce(g,p)):n.applyForce(g,f))}applyTorque(){let t,i,e;switch(arguments.length){case 1:t=arguments[0].x,i=arguments[0].y,e=arguments[0].z;break;case 3:t=arguments[0],i=arguments[1],e=arguments[2];break;default:return}const s=this._body;s&&(s.activate(),g.setValue(t,i,e),s.applyTorque(g))}applyImpulse(){let t,i,e,s,a,o;switch(arguments.length){case 1:t=arguments[0].x,i=arguments[0].y,e=arguments[0].z;break;case 2:t=arguments[0].x,i=arguments[0].y,e=arguments[0].z,s=arguments[1].x,a=arguments[1].y,o=arguments[1].z;break;case 3:t=arguments[0],i=arguments[1],e=arguments[2];break;case 6:t=arguments[0],i=arguments[1],e=arguments[2],s=arguments[3],a=arguments[4],o=arguments[5];break;default:return}const n=this._body;n&&(n.activate(),g.setValue(t,i,e),void 0!==s?(p.setValue(s,a,o),n.applyImpulse(g,p)):n.applyImpulse(g,f))}applyTorqueImpulse(){let t,i,e;switch(arguments.length){case 1:t=arguments[0].x,i=arguments[0].y,e=arguments[0].z;break;case 3:t=arguments[0],i=arguments[1],e=arguments[2];break;default:return}const s=this._body;s&&(s.activate(),g.setValue(t,i,e),s.applyTorqueImpulse(g))}isStatic(){return this._type===a}isStaticOrKinematic(){return this._type===a||this._type===n}isKinematic(){return this._type===n}_getEntityTransform(t){const i=this.entity,e=i.getPosition(),s=i.getRotation();g.setValue(e.x,e.y,e.z),b.setValue(s.x,s.y,s.z,s.w),t.setOrigin(g),t.setRotation(b)}syncEntityToBody(){const t=this._body;if(t){if(this._getEntityTransform(d),t.setWorldTransform(d),this._type===n){const i=t.getMotionState();i&&i.setWorldTransform(d)}t.activate()}}_updateDynamic(){const t=this._body;if(t.isActive()){const i=t.getMotionState();if(i){i.getWorldTransform(d);const t=d.getOrigin(),e=d.getRotation();this.entity.setPosition(t.x(),t.y(),t.z()),this.entity.setRotation(e.x(),e.y(),e.z(),e.w())}}}_updateKinematic(){const t=this._body.getMotionState();t&&(this._getEntityTransform(d),t.setWorldTransform(d))}teleport(){arguments.length<3?(arguments[0]&&this.entity.setPosition(arguments[0]),arguments[1]&&(arguments[1]instanceof t?this.entity.setRotation(arguments[1]):this.entity.setEulerAngles(arguments[1]))):(6===arguments.length&&this.entity.setEulerAngles(arguments[3],arguments[4],arguments[5]),this.entity.setPosition(arguments[0],arguments[1],arguments[2])),this.syncEntityToBody()}onEnable(){this._body||this.createBody(),this.enableSimulation()}onDisable(){this.disableSimulation()}}export{F as RigidBodyComponent};
