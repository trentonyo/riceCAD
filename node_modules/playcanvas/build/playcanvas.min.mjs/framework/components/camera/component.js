import{LAYERID_UI as e,LAYERID_DEPTH as t,ASPECT_AUTO as r}from"../../../scene/constants.js";import{Camera as s}from"../../../scene/camera.js";import{Component as a}from"../component.js";import{PostEffectQueue as i}from"./post-effect-queue.js";import"../../../core/tracing.js";const n=[{name:"aspectRatio",readonly:!1},{name:"aspectRatioMode",readonly:!1},{name:"calculateProjection",readonly:!1},{name:"calculateTransform",readonly:!1},{name:"clearColor",readonly:!1},{name:"cullFaces",readonly:!1},{name:"farClip",readonly:!1},{name:"flipFaces",readonly:!1},{name:"fov",readonly:!1},{name:"frustumCulling",readonly:!1},{name:"horizontalFov",readonly:!1},{name:"nearClip",readonly:!1},{name:"orthoHeight",readonly:!1},{name:"projection",readonly:!1},{name:"scissorRect",readonly:!1},{name:"aperture",readonly:!1},{name:"shutter",readonly:!1},{name:"sensitivity",readonly:!1}];class o extends a{constructor(t,r){super(t,r),this.onPostprocessing=null,this.onPreRender=null,this.onPostRender=null,this._renderSceneDepthMap=0,this._renderSceneColorMap=0,this._camera=new s,this._camera.node=r,this._priority=0,this._disablePostEffectsLayer=e,this._postEffects=new i(t.app,this),this._sceneDepthMapRequested=!1,this._sceneColorMapRequested=!1}get camera(){return this._camera}set clearColorBuffer(e){this._camera.clearColorBuffer=e,this.dirtyLayerCompositionCameras()}get clearColorBuffer(){return this._camera.clearColorBuffer}set clearDepthBuffer(e){this._camera.clearDepthBuffer=e,this.dirtyLayerCompositionCameras()}get clearDepthBuffer(){return this._camera.clearDepthBuffer}set clearStencilBuffer(e){this._camera.clearStencilBuffer=e,this.dirtyLayerCompositionCameras()}get clearStencilBuffer(){return this._camera.clearStencilBuffer}set disablePostEffectsLayer(e){this._disablePostEffectsLayer=e,this.dirtyLayerCompositionCameras()}get disablePostEffectsLayer(){return this._disablePostEffectsLayer}_enableDepthLayer(e){if(this.layers.find((e=>e===t))){const r=this.system.app.scene.layers.getLayerById(t);e?null==r||r.incrementCounter():null==r||r.decrementCounter()}else if(e)return!1;return!0}requestSceneColorMap(e){this._renderSceneColorMap+=e?1:-1,this._enableDepthLayer(e)}set renderSceneColorMap(e){e&&!this._sceneColorMapRequested?(this.requestSceneColorMap(!0),this._sceneColorMapRequested=!0):this._sceneColorMapRequested&&(this.requestSceneColorMap(!1),this._sceneColorMapRequested=!1)}get renderSceneColorMap(){return this._renderSceneColorMap>0}requestSceneDepthMap(e){this._renderSceneDepthMap+=e?1:-1,this._enableDepthLayer(e)}set renderSceneDepthMap(e){e&&!this._sceneDepthMapRequested?(this.requestSceneDepthMap(!0),this._sceneDepthMapRequested=!0):this._sceneDepthMapRequested&&(this.requestSceneDepthMap(!1),this._sceneDepthMapRequested=!1)}get renderSceneDepthMap(){return this._renderSceneDepthMap>0}get frustum(){return this._camera.frustum}set layers(e){const t=this._camera.layers;for(let e=0;e<t.length;e++){const r=this.system.app.scene.layers.getLayerById(t[e]);r&&r.removeCamera(this)}if(this._camera.layers=e,this.enabled&&this.entity.enabled)for(let t=0;t<e.length;t++){const r=this.system.app.scene.layers.getLayerById(e[t]);r&&r.addCamera(this)}}get layers(){return this._camera.layers}get layersSet(){return this._camera.layersSet}get postEffectsEnabled(){return this._postEffects.enabled}get postEffects(){return this._postEffects}set priority(e){this._priority=e,this.dirtyLayerCompositionCameras()}get priority(){return this._priority}get projectionMatrix(){return this._camera.projectionMatrix}set aperture(e){this._camera.aperture=e}get aperture(){return this._camera.aperture}set sensitivity(e){this._camera.sensitivity=e}get sensitivity(){return this._camera.sensitivity}set shutter(e){this._camera.shutter=e}get shutter(){return this._camera.shutter}set rect(e){this._camera.rect=e,this.fire("set:rect",this._camera.rect)}get rect(){return this._camera.rect}set renderTarget(e){this._camera.renderTarget=e,this.dirtyLayerCompositionCameras()}get renderTarget(){return this._camera.renderTarget}get viewMatrix(){return this._camera.viewMatrix}dirtyLayerCompositionCameras(){this.system.app.scene.layers._dirtyCameras=!0}screenToWorld(e,t,r,s){const a=this.system.app.graphicsDevice,i=a.clientRect.width,n=a.clientRect.height;return this._camera.screenToWorld(e,t,r,i,n,s)}worldToScreen(e,t){const r=this.system.app.graphicsDevice,s=r.clientRect.width,a=r.clientRect.height;return this._camera.worldToScreen(e,s,a,t)}onAppPrerender(){this._camera._viewMatDirty=!0,this._camera._viewProjMatDirty=!0}addCameraToLayers(){const e=this.layers;for(let t=0;t<e.length;t++){const r=this.system.app.scene.layers.getLayerById(e[t]);r&&r.addCamera(this)}}removeCameraFromLayers(){const e=this.layers;for(let t=0;t<e.length;t++){const r=this.system.app.scene.layers.getLayerById(e[t]);r&&r.removeCamera(this)}}onLayersChanged(e,t){this.addCameraToLayers(),e.off("add",this.onLayerAdded,this),e.off("remove",this.onLayerRemoved,this),t.on("add",this.onLayerAdded,this),t.on("remove",this.onLayerRemoved,this)}onLayerAdded(e){this.layers.indexOf(e.id)<0||e.addCamera(this)}onLayerRemoved(e){this.layers.indexOf(e.id)<0||e.removeCamera(this)}onEnable(){const e=this.system,t=e.app.scene,r=t.layers;e.addCamera(this),t.on("set:layers",this.onLayersChanged,this),r&&(r.on("add",this.onLayerAdded,this),r.on("remove",this.onLayerRemoved,this)),this.enabled&&this.entity.enabled&&this.addCameraToLayers(),this.postEffects.enable()}onDisable(){const e=this.system,t=e.app.scene,r=t.layers;this.postEffects.disable(),this.removeCameraFromLayers(),t.off("set:layers",this.onLayersChanged,this),r&&(r.off("add",this.onLayerAdded,this),r.off("remove",this.onLayerRemoved,this)),e.removeCamera(this)}onRemove(){this.onDisable(),this.off()}calculateAspectRatio(e){const t=this.system.app.graphicsDevice,r=e?e.width:t.width,s=e?e.height:t.height;return r*this.rect.z/(s*this.rect.w)}frameUpdate(e){this.aspectRatioMode===r&&(this.aspectRatio=this.calculateAspectRatio(e))}startXr(e,t,r){this.system.app.xr.start(this,e,t,r)}endXr(e){this._camera.xr?this._camera.xr.end(e):e&&e(new Error("Camera is not in XR"))}copy(e){n.forEach((t=>{if(!t.readonly){const r=t.name;this[r]=e[r]}})),this.clearColorBuffer=e.clearColorBuffer,this.clearDepthBuffer=e.clearDepthBuffer,this.clearStencilBuffer=e.clearStencilBuffer,this.disablePostEffectsLayer=e.disablePostEffectsLayer,this.layers=e.layers,this.priority=e.priority,this.renderTarget=e.renderTarget,this.rect=e.rect,this.aperture=e.aperture,this.sensitivity=e.sensitivity,this.shutter=e.shutter}}n.forEach((function(e){const t=e.name,r={get:function(){return this._camera[t]}};e.readonly||(r.set=function(e){this._camera[t]=e}),Object.defineProperty(o.prototype,t,r)}));export{o as CameraComponent};
