import{platform as e}from"../../../core/platform.js";import{EventHandler as t}from"../../../core/event-handler.js";import{Quat as i}from"../../../core/math/quat.js";import{Vec2 as o}from"../../../core/math/vec2.js";import{Vec3 as s}from"../../../core/math/vec3.js";import{ElementComponent as n}from"./component.js";import{Ray as r}from"../../../core/shape/ray.js";import{Plane as a}from"../../../core/shape/plane.js";const h=new o,c=new s,l=new r,g=new a,_=new i,d={x:"y",y:"x"};class m extends t{constructor(e,t){if(super(),!(e&&e instanceof n))throw new Error("Element was null or not an ElementComponent");if(t&&"x"!==t&&"y"!==t)throw new Error("Unrecognized axis: "+t);this._element=e,this._app=e.system.app,this._axis=t||null,this._enabled=!0,this._dragScale=new s,this._dragStartMousePosition=new s,this._dragStartHandlePosition=new s,this._deltaMousePosition=new s,this._deltaHandlePosition=new s,this._isDragging=!1,this._toggleLifecycleListeners("on")}_toggleLifecycleListeners(e){this._element[e]("mousedown",this._onMouseDownOrTouchStart,this),this._element[e]("touchstart",this._onMouseDownOrTouchStart,this)}_toggleDragListeners(t){const i="on"===t;this._hasDragListeners&&i||(this._handleMouseUpOrTouchEnd||(this._handleMouseUpOrTouchEnd=this._onMouseUpOrTouchEnd.bind(this)),this._app.mouse&&(this._element[t]("mousemove",this._onMove,this),this._element[t]("mouseup",this._handleMouseUpOrTouchEnd,!1)),e.touch&&(this._element[t]("touchmove",this._onMove,this),this._element[t]("touchend",this._handleMouseUpOrTouchEnd,this),this._element[t]("touchcancel",this._handleMouseUpOrTouchEnd,this)),this._hasDragListeners=i)}_onMouseDownOrTouchStart(e){if(this._element&&!this._isDragging&&this.enabled){this._dragCamera=e.camera,this._calculateDragScale();const t=this._screenToLocal(e);t&&(this._toggleDragListeners("on"),this._isDragging=!0,this._dragStartMousePosition.copy(t),this._dragStartHandlePosition.copy(this._element.entity.getLocalPosition()),this.fire("drag:start"))}}_onMouseUpOrTouchEnd(){this._isDragging&&(this._isDragging=!1,this._toggleDragListeners("off"),this.fire("drag:end"))}_screenToLocal(e){this._determineInputPosition(e),this._chooseRayOriginAndDirection(),g.point.copy(this._element.entity.getLocalPosition()),g.normal.copy(this._element.entity.forward).mulScalar(-1);const t=g.normal.dot(l.direction);if(Math.abs(t)>0){const e=g.point.sub(l.origin).dot(g.normal)/t,i=l.origin.add(l.direction.mulScalar(e));return _.copy(this._element.entity.getRotation()).invert().transformVector(i,i),i.mul(this._dragScale),i}return null}_determineInputPosition(e){const t=this._app.graphicsDevice.maxPixelRatio;void 0!==e.x&&void 0!==e.y?(h.x=e.x*t,h.y=e.y*t):e.changedTouches?(h.x=e.changedTouches[0].x*t,h.y=e.changedTouches[0].y*t):console.warn("Could not determine position from input event")}_chooseRayOriginAndDirection(){this._element.screen&&this._element.screen.screen.screenSpace?(l.origin.set(h.x,-h.y,0),l.direction.copy(s.FORWARD)):(c.copy(this._dragCamera.screenToWorld(h.x,h.y,1)),l.origin.copy(this._dragCamera.entity.getPosition()),l.direction.copy(c).sub(l.origin).normalize())}_calculateDragScale(){let e=this._element.entity.parent;const t=this._element.screen&&this._element.screen.screen,i=t&&t.screenSpace,o=i?t.scale:1,s=this._dragScale;for(s.set(o,o,o);e&&(s.mul(e.getLocalScale()),e=e.parent,!i||!e.screen););s.x=1/s.x,s.y=1/s.y,s.z=1/s.z}_onMove(e){const{_element:t,_deltaMousePosition:i,_deltaHandlePosition:o,_axis:s}=this;if(t&&this._isDragging&&this.enabled&&t.enabled&&t.entity.enabled){const n=this._screenToLocal(e);if(n){if(i.sub2(n,this._dragStartMousePosition),o.add2(this._dragStartHandlePosition,i),s){const e=t.entity.getLocalPosition(),i=d[s];o[i]=e[i]}t.entity.setLocalPosition(o),this.fire("drag:move",o)}}}destroy(){this._toggleLifecycleListeners("off"),this._toggleDragListeners("off")}set enabled(e){this._enabled=e}get enabled(){return this._enabled}get isDragging(){return this._isDragging}}export{m as ElementDragHelper};
