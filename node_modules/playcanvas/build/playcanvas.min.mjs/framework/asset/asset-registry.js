import{path as e}from"../../core/path.js";import"../../core/tracing.js";import{EventHandler as t}from"../../core/event-handler.js";import{TagsCache as s}from"../../core/tags-cache.js";import{standardMaterialTextureParameters as r}from"../../scene/materials/standard-material-parameters.js";import{script as i}from"../script.js";import{Asset as a}from"./asset.js";class o extends t{constructor(e){super(),this._loader=e,this._assets=[],this._cache={},this._names={},this._tags=new s("_id"),this._urls={},this.prefix=null}list(e){return e=e||{},this._assets.filter((t=>{let s=!0;return void 0!==e.preload&&(s=t.preload===e.preload),s}))}add(e){const t=this._assets.push(e)-1;let s;this._cache[e.id]=t,this._names[e.name]||(this._names[e.name]=[]),this._names[e.name].push(t),e.file&&(s=e.file.url,this._urls[s]=t),e.registry=this,this._tags.addItem(e),e.tags.on("add",this._onTagAdd,this),e.tags.on("remove",this._onTagRemove,this),this.fire("add",e),this.fire("add:"+e.id,e),s&&this.fire("add:url:"+s,e),e.preload&&this.load(e)}remove(e){const t=this._cache[e.id],s=e.file?e.file.url:null;if(void 0!==t){this._assets.splice(t,1),delete this._cache[e.id],this._names={},this._urls=[];for(let e=0,t=this._assets.length;e<t;e++){const t=this._assets[e];this._cache[t.id]=e,this._names[t.name]||(this._names[t.name]=[]),this._names[t.name].push(e),t.file&&(this._urls[t.file.url]=e)}return this._tags.removeItem(e),e.tags.off("add",this._onTagAdd,this),e.tags.off("remove",this._onTagRemove,this),e.fire("remove",e),this.fire("remove",e),this.fire("remove:"+e.id,e),s&&this.fire("remove:url:"+s,e),!0}return!1}get(e){const t=this._cache[e];return this._assets[t]}getByUrl(e){const t=this._urls[e];return this._assets[t]}load(e){if(e.loading||e.loaded)return;const t=e.file,s=s=>{s instanceof Array?e.resources=s:e.resource=s,this._loader.patch(e,this),this.fire("load",e),this.fire("load:"+e.id,e),t&&t.url&&this.fire("load:url:"+t.url,e),e.fire("load",e)},r=(t,r,a)=>{if(e.loaded=!0,e.loading=!1,t)this.fire("error",t,e),this.fire("error:"+e.id,t,e),e.fire("error",t,e);else{if(!i.legacy&&"script"===e.type){const t=this._loader.getHandler("script");t._cache[e.id]&&t._cache[e.id].parentNode===document.head&&document.head.removeChild(t._cache[e.id]),t._cache[e.id]=a}s(r)}};if(t||"cubemap"===e.type)this.fire("load:start",e),this.fire("load:"+e.id+":start",e),e.loading=!0,this._loader.load(e.getFileUrl(),e.type,r,e);else{const t=this._loader.open(e.type,e.data);e.loaded=!0,s(t)}}loadFromUrl(e,t,s){this.loadFromUrlAndFilename(e,null,t,s)}loadFromUrlAndFilename(t,s,r,i){const o=e.getBasename(s||t),l={filename:s||o,url:t};let n=this.getByUrl(t);if(n){if(n.loaded)return void i(n.loadFromUrlError||null,n)}else n=new a(o,r,l),this.add(n);const d=e=>{e.once("load",(e=>{"material"===r?this._loadTextures(e,((t,s)=>{i(t,e)})):i(null,e)})),e.once("error",(t=>{t&&(this.loadFromUrlError=t),i(t,e)})),this.load(e)};n.resource?i(null,n):"model"===r?this._loadModel(n,d):d(n)}_loadModel(t,s){const r=t.getFileUrl(),i=e.getExtension(r);if(".json"===i||".glb"===i){const a=e.getDirectory(r),o=e.getBasename(r),l=e.join(a,o.replace(i,".mapping.json"));this._loader.load(l,"json",((e,r)=>{e?(t.data={mapping:[]},s(t)):this._loadMaterials(t,r,((e,i)=>{t.data=r,s(t)}))}))}else s(t)}_loadMaterials(e,t,s){const r=[];let i=0;const a=(e,t)=>{this._loadTextures(t,((e,a)=>{r.push(t),r.length===i&&s(null,r)}))};for(let s=0;s<t.mapping.length;s++){const r=t.mapping[s].path;if(r){i++;const t=e.getAbsoluteUrl(r);this.loadFromUrl(t,"material",a)}}0===i&&s(null,r)}_loadTextures(e,t){const s=[];let i=0;const a=e.data;if("path"!==a.mappingFormat)return void t(null,s);const o=(e,r)=>{e&&console.error(e),s.push(r),s.length===i&&t(null,s)},l=r;for(let t=0;t<l.length;t++){const s=a[l[t]];if(s&&"string"==typeof s){i++;const t=e.getAbsoluteUrl(s);this.loadFromUrl(t,"texture",o)}}0===i&&t(null,s)}findAll(e,t){const s=this._names[e];if(s){const e=s.map((e=>this._assets[e]));return t?e.filter((e=>e.type===t)):e}return[]}_onTagAdd(e,t){this._tags.add(e,t)}_onTagRemove(e,t){this._tags.remove(e,t)}findByTag(){return this._tags.find(arguments)}filter(e){return this._assets.filter((t=>e(t)))}find(e,t){const s=this.findAll(e,t);return s.length>0?s[0]:null}}export{o as AssetRegistry};
