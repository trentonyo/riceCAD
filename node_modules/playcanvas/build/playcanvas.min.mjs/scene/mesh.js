import"../core/tracing.js";import{RefCountedObject as e}from"../core/ref-counted-object.js";import{Vec3 as t}from"../core/math/vec3.js";import{BoundingBox as r}from"../core/shape/bounding-box.js";import{SEMANTIC_POSITION as i,SEMANTIC_BLENDWEIGHT as s,SEMANTIC_BLENDINDICES as a,TYPE_UINT16 as n,TYPE_INT16 as o,TYPE_UINT8 as h,TYPE_INT8 as m,BUFFER_STATIC as f,BUFFER_DYNAMIC as u,TYPE_FLOAT32 as d,SEMANTIC_NORMAL as x,SEMANTIC_TEXCOORD as c,SEMANTIC_COLOR as g,PRIMITIVE_TRIANGLES as _,INDEXFORMAT_UINT32 as y,INDEXFORMAT_UINT16 as l,PRIMITIVE_POINTS as D,typedArrayIndexFormats as p,PRIMITIVE_LINES as v}from"../platform/graphics/constants.js";import{IndexBuffer as B}from"../platform/graphics/index-buffer.js";import{VertexBuffer as S}from"../platform/graphics/vertex-buffer.js";import{VertexFormat as b}from"../platform/graphics/vertex-format.js";import{VertexIterator as C}from"../platform/graphics/vertex-iterator.js";import{GraphicsDeviceAccess as V}from"../platform/graphics/graphics-device-access.js";import{RENDERSTYLE_WIREFRAME as U,RENDERSTYLE_POINTS as N,RENDERSTYLE_SOLID as O}from"./constants.js";let A=0;class T{constructor(){this.initDefaults()}initDefaults(){this.recreate=!1,this.verticesUsage=f,this.indicesUsage=f,this.maxVertices=0,this.maxIndices=0,this.vertexCount=0,this.indexCount=0,this.vertexStreamsUpdated=!1,this.indexStreamUpdated=!1,this.vertexStreamDictionary={},this.indices=null}_changeVertexCount(e,t){this.vertexCount||(this.vertexCount=e)}}T.DEFAULT_COMPONENTS_POSITION=3,T.DEFAULT_COMPONENTS_NORMAL=3,T.DEFAULT_COMPONENTS_UV=2,T.DEFAULT_COMPONENTS_COLORS=4;class E{constructor(e,t,r,i){this.data=e,this.componentCount=t,this.dataType=r,this.dataTypeNormalize=i}}class M extends e{constructor(e){super(),this.id=A++,this.device=e||V.get(),this.vertexBuffer=null,this.indexBuffer=[null],this.primitive=[{type:0,base:0,count:0}],this.skin=null,this._morph=null,this._geometryData=null,this._aabb=new r,this.boneAabb=null}set morph(e){e!==this._morph&&(this._morph&&this._morph.decRefCount(),this._morph=e,e&&e.incRefCount())}get morph(){return this._morph}set aabb(e){this._aabb=e}get aabb(){return this._aabb}destroy(){const e=this.morph;e&&(this.morph=null,e.refCount<1&&e.destroy()),this.vertexBuffer&&(this.vertexBuffer.destroy(),this.vertexBuffer=null);for(let e=0;e<this.indexBuffer.length;e++)this._destroyIndexBuffer(e);this.indexBuffer.length=0,this._geometryData=null}_destroyIndexBuffer(e){this.indexBuffer[e]&&(this.indexBuffer[e].destroy(),this.indexBuffer[e]=null)}_initBoneAabbs(e){let f,u,d,x,c;this.boneAabb=[],this.boneUsed=[];const g=[],_=[],y=this.boneUsed,l=this.skin.boneNames.length;let D,p,v;for(let e=0;e<l;e++)g[e]=new t(Number.MAX_VALUE,Number.MAX_VALUE,Number.MAX_VALUE),_[e]=new t(-Number.MAX_VALUE,-Number.MAX_VALUE,-Number.MAX_VALUE);const B=new C(this.vertexBuffer),S=B.element[i],b=B.element[s],V=B.element[a],U=this.vertexBuffer.numVertices;for(let t=0;t<U;t++){for(let r=0;r<4;r++){if(b.array[b.index+r]>0){const i=V.array[V.index+r];if(y[i]=!0,f=S.array[S.index],u=S.array[S.index+1],d=S.array[S.index+2],x=_[i],c=g[i],c.x>f&&(c.x=f),c.y>u&&(c.y=u),c.z>d&&(c.z=d),x.x<f&&(x.x=f),x.y<u&&(x.y=u),x.z<d&&(x.z=d),e){let r=D=f,i=p=u,s=v=d;for(let a=0;a<e.length;a++){const n=e[a],o=n.deltaPositions[3*t],h=n.deltaPositions[3*t+1],m=n.deltaPositions[3*t+2];o<0?r+=o:D+=o,h<0?i+=h:p+=h,m<0?s+=m:v+=m}c.x>r&&(c.x=r),c.y>i&&(c.y=i),c.z>s&&(c.z=s),x.x<D&&(x.x=D),x.y<p&&(x.y=p),x.z<v&&(x.z=v)}}}B.next()}const N=this.vertexBuffer.getFormat().elements.find((e=>e.name===i));if(N&&N.normalize){const e=(()=>{switch(N.dataType){case m:return e=>Math.max(e/127,-1);case h:return e=>e/255;case o:return e=>Math.max(e/32767,-1);case n:return e=>e/65535;default:return e=>e}})();for(let t=0;t<l;t++)if(y[t]){const r=g[t],i=_[t];r.set(e(r.x),e(r.y),e(r.z)),i.set(e(i.x),e(i.y),e(i.z))}}for(let e=0;e<l;e++){const t=new r;t.setMinMax(g[e],_[e]),this.boneAabb.push(t)}}_initGeometryData(){this._geometryData||(this._geometryData=new T,this.vertexBuffer&&(this._geometryData.vertexCount=this.vertexBuffer.numVertices,this._geometryData.maxVertices=this.vertexBuffer.numVertices),this.indexBuffer.length>0&&this.indexBuffer[0]&&(this._geometryData.indexCount=this.indexBuffer[0].numIndices,this._geometryData.maxIndices=this.indexBuffer[0].numIndices))}clear(e,t,r=0,i=0){this._initGeometryData(),this._geometryData.initDefaults(),this._geometryData.recreate=!0,this._geometryData.maxVertices=r,this._geometryData.maxIndices=i,this._geometryData.verticesUsage=e?f:u,this._geometryData.indicesUsage=t?f:u}setVertexStream(e,t,r,i,s=d,a=!1){this._initGeometryData();const n=i||t.length/r;this._geometryData._changeVertexCount(n,e),this._geometryData.vertexStreamsUpdated=!0,this._geometryData.vertexStreamDictionary[e]=new E(t,r,s,a)}getVertexStream(e,t){let r=0,i=!1;if(this._geometryData){const s=this._geometryData.vertexStreamDictionary[e];s&&(i=!0,r=this._geometryData.vertexCount,ArrayBuffer.isView(t)?t.set(s.data):(t.length=0,t.push(s.data)))}if(!i&&this.vertexBuffer){r=new C(this.vertexBuffer).readData(e,t)}return r}setPositions(e,t=T.DEFAULT_COMPONENTS_POSITION,r){this.setVertexStream(i,e,t,r,d,!1)}setNormals(e,t=T.DEFAULT_COMPONENTS_NORMAL,r){this.setVertexStream(x,e,t,r,d,!1)}setUvs(e,t,r=T.DEFAULT_COMPONENTS_UV,i){this.setVertexStream(c+e,t,r,i,d,!1)}setColors(e,t=T.DEFAULT_COMPONENTS_COLORS,r){this.setVertexStream(g,e,t,r,d,!1)}setColors32(e,t){this.setVertexStream(g,e,T.DEFAULT_COMPONENTS_COLORS,t,h,!0)}setIndices(e,t){this._initGeometryData(),this._geometryData.indexStreamUpdated=!0,this._geometryData.indices=e,this._geometryData.indexCount=t||e.length}getPositions(e){return this.getVertexStream(i,e)}getNormals(e){return this.getVertexStream(x,e)}getUvs(e,t){return this.getVertexStream(c+e,t)}getColors(e){return this.getVertexStream(g,e)}getIndices(e){let t=0;if(this._geometryData&&this._geometryData.indices){const r=this._geometryData.indices;t=this._geometryData.indexCount,ArrayBuffer.isView(e)?e.set(r):(e.length=0,e.push(r))}else if(this.indexBuffer.length>0&&this.indexBuffer[0]){t=this.indexBuffer[0].readData(e)}return t}update(e=_,t=!0){if(this._geometryData){if(t){const e=this._geometryData.vertexStreamDictionary[i];e&&3===e.componentCount&&this._aabb.compute(e.data,this._geometryData.vertexCount)}let r=this._geometryData.recreate;this._geometryData.vertexCount>this._geometryData.maxVertices&&(r=!0,this._geometryData.maxVertices=this._geometryData.vertexCount),r&&this.vertexBuffer&&(this.vertexBuffer.destroy(),this.vertexBuffer=null);let s=this._geometryData.recreate;this._geometryData.indexCount>this._geometryData.maxIndices&&(s=!0,this._geometryData.maxIndices=this._geometryData.indexCount),s&&this.indexBuffer.length>0&&this.indexBuffer[0]&&(this.indexBuffer[0].destroy(),this.indexBuffer[0]=null),this._geometryData.vertexStreamsUpdated&&this._updateVertexBuffer(),this._geometryData.indexStreamUpdated&&this._updateIndexBuffer(),this.primitive[0].type=e,this.indexBuffer.length>0&&this.indexBuffer[0]?this._geometryData.indexStreamUpdated&&(this.primitive[0].count=this._geometryData.indexCount,this.primitive[0].indexed=!0):this._geometryData.vertexStreamsUpdated&&(this.primitive[0].count=this._geometryData.vertexCount,this.primitive[0].indexed=!1),this._geometryData.vertexCount=0,this._geometryData.indexCount=0,this._geometryData.vertexStreamsUpdated=!1,this._geometryData.indexStreamUpdated=!1,this._geometryData.recreate=!1,this.updateRenderStates()}}_buildVertexFormat(e){const t=[];for(const e in this._geometryData.vertexStreamDictionary){const r=this._geometryData.vertexStreamDictionary[e];t.push({semantic:e,components:r.componentCount,type:r.dataType,normalize:r.dataTypeNormalize})}return new b(this.device,t,e)}_updateVertexBuffer(){if(!this.vertexBuffer){const e=this._geometryData.maxVertices,t=this._buildVertexFormat(e);this.vertexBuffer=new S(this.device,t,e,this._geometryData.verticesUsage)}const e=new C(this.vertexBuffer),t=this._geometryData.vertexCount;for(const r in this._geometryData.vertexStreamDictionary){const i=this._geometryData.vertexStreamDictionary[r];e.writeData(r,i.data,t),delete this._geometryData.vertexStreamDictionary[r]}e.end()}_updateIndexBuffer(){if(this.indexBuffer.length<=0||!this.indexBuffer[0]){const e=this._geometryData.maxVertices>65535?y:l;this.indexBuffer[0]=new B(this.device,e,this._geometryData.maxIndices,this._geometryData.indicesUsage)}const e=this._geometryData.indices;if(e){this.indexBuffer[0].writeData(e,this._geometryData.indexCount),this._geometryData.indices=null}}prepareRenderState(e){e===U?this.generateWireframe():e===N&&(this.primitive[N]={type:D,base:0,count:this.vertexBuffer?this.vertexBuffer.numVertices:0,indexed:!1})}updateRenderStates(){this.primitive[N]&&this.prepareRenderState(N),this.primitive[U]&&this.prepareRenderState(U)}generateWireframe(){this._destroyIndexBuffer(U);const e=[];let t;if(this.indexBuffer.length>0&&this.indexBuffer[0]){const r=[[0,1],[1,2],[2,0]],i=this.primitive[O].base,s=this.primitive[O].count,a=this.indexBuffer[O],n=new p[a.format](a.storage),o={};for(let t=i;t<i+s;t+=3)for(let i=0;i<3;i++){const s=n[t+r[i][0]],a=n[t+r[i][1]],h=s>a?a<<16|s:s<<16|a;void 0===o[h]&&(o[h]=0,e.push(s,a))}t=a.format}else{for(let t=0;t<this.vertexBuffer.numVertices;t+=3)e.push(t,t+1,t+1,t+2,t+2,t);t=e.length>65535?y:l}const r=new B(this.vertexBuffer.device,t,e.length);new p[r.format](r.storage).set(e),r.unlock(),this.primitive[U]={type:v,base:0,count:e.length,indexed:!0},this.indexBuffer[U]=r}}export{M as Mesh};
