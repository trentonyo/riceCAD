import{math as t}from"../../core/math/math.js";import{Mat3 as e}from"../../core/math/mat3.js";import{Mat4 as s}from"../../core/math/mat4.js";import{Vec3 as n}from"../../core/math/vec3.js";import{CULLFACE_NONE as o}from"../../platform/graphics/constants.js";import{drawQuadWithShader as i}from"../../platform/graphics/simple-post-effect.js";import{EMITTERSHAPE_BOX as a}from"../constants.js";const r=new e,l=new e,c=new e;class h{constructor(t,e){this._emitter=t,this.frameRandomUniform=new Float32Array(3),this.emitterPosUniform=new Float32Array(3),this.emitterScaleUniform=new Float32Array([1,1,1]),this.worldBoundsMulUniform=new Float32Array(3),this.worldBoundsAddUniform=new Float32Array(3),this.inBoundsSizeUniform=new Float32Array(3),this.inBoundsCenterUniform=new Float32Array(3),this.constantParticleTexIN=e.scope.resolve("particleTexIN"),this.constantParticleTexOUT=e.scope.resolve("particleTexOUT"),this.constantEmitterPos=e.scope.resolve("emitterPos"),this.constantEmitterScale=e.scope.resolve("emitterScale"),this.constantSpawnBounds=e.scope.resolve("spawnBounds"),this.constantSpawnPosInnerRatio=e.scope.resolve("spawnPosInnerRatio"),this.constantSpawnBoundsSphere=e.scope.resolve("spawnBoundsSphere"),this.constantSpawnBoundsSphereInnerRatio=e.scope.resolve("spawnBoundsSphereInnerRatio"),this.constantInitialVelocity=e.scope.resolve("initialVelocity"),this.constantFrameRandom=e.scope.resolve("frameRandom"),this.constantDelta=e.scope.resolve("delta"),this.constantRate=e.scope.resolve("rate"),this.constantRateDiv=e.scope.resolve("rateDiv"),this.constantLifetime=e.scope.resolve("lifetime"),this.constantGraphSampleSize=e.scope.resolve("graphSampleSize"),this.constantGraphNumSamples=e.scope.resolve("graphNumSamples"),this.constantInternalTex0=e.scope.resolve("internalTex0"),this.constantInternalTex1=e.scope.resolve("internalTex1"),this.constantInternalTex2=e.scope.resolve("internalTex2"),this.constantInternalTex3=e.scope.resolve("internalTex3"),this.constantEmitterMatrix=e.scope.resolve("emitterMatrix"),this.constantEmitterMatrixInv=e.scope.resolve("emitterMatrixInv"),this.constantNumParticles=e.scope.resolve("numParticles"),this.constantNumParticlesPot=e.scope.resolve("numParticlesPot"),this.constantLocalVelocityDivMult=e.scope.resolve("localVelocityDivMult"),this.constantVelocityDivMult=e.scope.resolve("velocityDivMult"),this.constantRotSpeedDivMult=e.scope.resolve("rotSpeedDivMult"),this.constantSeed=e.scope.resolve("seed"),this.constantStartAngle=e.scope.resolve("startAngle"),this.constantStartAngle2=e.scope.resolve("startAngle2"),this.constantOutBoundsMul=e.scope.resolve("outBoundsMul"),this.constantOutBoundsAdd=e.scope.resolve("outBoundsAdd"),this.constantInBoundsSize=e.scope.resolve("inBoundsSize"),this.constantInBoundsCenter=e.scope.resolve("inBoundsCenter"),this.constantMaxVel=e.scope.resolve("maxVel"),this.constantFaceTangent=e.scope.resolve("faceTangent"),this.constantFaceBinorm=e.scope.resolve("faceBinorm")}_setInputBounds(){this.inBoundsSizeUniform[0]=this._emitter.prevWorldBoundsSize.x,this.inBoundsSizeUniform[1]=this._emitter.prevWorldBoundsSize.y,this.inBoundsSizeUniform[2]=this._emitter.prevWorldBoundsSize.z,this.constantInBoundsSize.setValue(this.inBoundsSizeUniform),this.inBoundsCenterUniform[0]=this._emitter.prevWorldBoundsCenter.x,this.inBoundsCenterUniform[1]=this._emitter.prevWorldBoundsCenter.y,this.inBoundsCenterUniform[2]=this._emitter.prevWorldBoundsCenter.z,this.constantInBoundsCenter.setValue(this.inBoundsCenterUniform)}randomize(){this.frameRandomUniform[0]=Math.random(),this.frameRandomUniform[1]=Math.random(),this.frameRandomUniform[2]=Math.random()}update(e,h,m,d,u){const p=this._emitter;e.setBlending(!1),e.setColorWrite(!0,!0,!0,!0),e.setCullMode(o),e.setDepthTest(!1),e.setDepthWrite(!1),this.randomize(),this.constantGraphSampleSize.setValue(1/p.precision),this.constantGraphNumSamples.setValue(p.precision),this.constantNumParticles.setValue(p.numParticles),this.constantNumParticlesPot.setValue(p.numParticlesPot),this.constantInternalTex0.setValue(p.internalTex0),this.constantInternalTex1.setValue(p.internalTex1),this.constantInternalTex2.setValue(p.internalTex2),this.constantInternalTex3.setValue(p.internalTex3);const v=p.meshInstance.node,B=null===v?n.ONE:v.localScale;if(p.pack8){this.worldBoundsMulUniform[0]=p.worldBoundsMul.x,this.worldBoundsMulUniform[1]=p.worldBoundsMul.y,this.worldBoundsMulUniform[2]=p.worldBoundsMul.z,this.constantOutBoundsMul.setValue(this.worldBoundsMulUniform),this.worldBoundsAddUniform[0]=p.worldBoundsAdd.x,this.worldBoundsAddUniform[1]=p.worldBoundsAdd.y,this.worldBoundsAddUniform[2]=p.worldBoundsAdd.z,this.constantOutBoundsAdd.setValue(this.worldBoundsAddUniform),this._setInputBounds();let t=p.maxVel*Math.max(Math.max(B.x,B.y),B.z);t=Math.max(t,1),this.constantMaxVel.setValue(t)}const f=null===v||p.localSpace?n.ZERO:v.getPosition(),x=null===v?s.IDENTITY:v.getWorldTransform();p.emitterShape===a?(r.setFromMat4(h),this.constantSpawnBounds.setValue(r.data),this.constantSpawnPosInnerRatio.setValue(m)):(this.constantSpawnBoundsSphere.setValue(p.emitterRadius),this.constantSpawnBoundsSphereInnerRatio.setValue(0===p.emitterRadius?0:p.emitterRadiusInner/p.emitterRadius)),this.constantInitialVelocity.setValue(p.initialVelocity),l.setFromMat4(x),x.invertTo3x3(c),this.emitterPosUniform[0]=f.x,this.emitterPosUniform[1]=f.y,this.emitterPosUniform[2]=f.z,this.constantEmitterPos.setValue(this.emitterPosUniform),this.constantFrameRandom.setValue(this.frameRandomUniform),this.constantDelta.setValue(d),this.constantRate.setValue(p.rate),this.constantRateDiv.setValue(p.rate2-p.rate),this.constantStartAngle.setValue(p.startAngle*t.DEG_TO_RAD),this.constantStartAngle2.setValue(p.startAngle2*t.DEG_TO_RAD),this.constantSeed.setValue(p.seed),this.constantLifetime.setValue(p.lifetime),this.emitterScaleUniform[0]=B.x,this.emitterScaleUniform[1]=B.y,this.emitterScaleUniform[2]=B.z,this.constantEmitterScale.setValue(this.emitterScaleUniform),this.constantEmitterMatrix.setValue(l.data),this.constantEmitterMatrixInv.setValue(c.data),this.constantLocalVelocityDivMult.setValue(p.localVelocityUMax),this.constantVelocityDivMult.setValue(p.velocityUMax),this.constantRotSpeedDivMult.setValue(p.rotSpeedUMax[0]);let S=p.swapTex?p.particleTexOUT:p.particleTexIN;S=p.beenReset?p.particleTexStart:S;const T=p.swapTex?p.particleTexIN:p.particleTexOUT;this.constantParticleTexIN.setValue(S),i(e,p.swapTex?p.rtParticleTexIN:p.rtParticleTexOUT,u?p.shaderParticleUpdateOnStop:p.loop?p.shaderParticleUpdateRespawn:p.shaderParticleUpdateNoRespawn),p.material.setParameter("particleTexOUT",S),p.material.setParameter("particleTexIN",T),p.beenReset=!1,p.swapTex=!p.swapTex,e.setDepthTest(!0),e.setDepthWrite(!0),p.prevWorldBoundsSize.copy(p.worldBoundsSize),p.prevWorldBoundsCenter.copy(p.worldBounds.center),p.pack8&&this._setInputBounds()}}export{h as ParticleGPUUpdater};
