import{LIGHTTYPE_DIRECTIONAL as t}from"../constants.js";class i{constructor(){this.layerIndex=0,this.cameraIndex=0,this.camera=null,this.renderTarget=null,this.lightClusters=null,this.clearColor=!1,this.clearDepth=!1,this.clearStencil=!1,this.triggerPostprocess=!1,this.firstCameraUse=!1,this.lastCameraUse=!1,this.directionalLightsSet=new Set,this.directionalLights=[],this.directionalLightsIndices=[],this.viewBindGroups=[]}destroy(){this.viewBindGroups.forEach((t=>{t.defaultUniformBuffer.destroy(),t.destroy()})),this.viewBindGroups.length=0}get hasDirectionalShadowLights(){return this.directionalLights.length>0}reset(){this.lightClusters=null,this.directionalLightsSet.clear(),this.directionalLights.length=0,this.directionalLightsIndices.length=0}isLayerEnabled(t){return t.layerList[this.layerIndex].enabled&&t.subLayerEnabled[this.layerIndex]}collectDirectionalLights(i,e,s){this.directionalLightsSet.clear(),this.directionalLights.length=0,this.directionalLightsIndices.length=0;for(let h=0;h<e.length;h++){const r=e[h];if(r.castShadows)for(let e=0;e<i.length;e++)if(i[e]._splitLights[t].indexOf(r)>=0&&!this.directionalLightsSet.has(r)){this.directionalLightsSet.add(r),this.directionalLights.push(r);const t=s.indexOf(r);this.directionalLightsIndices.push(t)}}}}export{i as RenderAction};
