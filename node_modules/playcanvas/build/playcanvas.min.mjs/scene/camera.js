import{Color as t}from"../core/math/color.js";import{Mat4 as e}from"../core/math/mat4.js";import{Vec3 as i}from"../core/math/vec3.js";import{Vec4 as r}from"../core/math/vec4.js";import{math as s}from"../core/math/math.js";import{Frustum as a}from"../core/shape/frustum.js";import{ASPECT_AUTO as o,LAYERID_WORLD as h,LAYERID_DEPTH as c,LAYERID_SKYBOX as l,LAYERID_UI as n,LAYERID_IMMEDIATE as _,PROJECTION_PERSPECTIVE as u}from"./constants.js";const p=new i,f=new i,g=new i,M=new e,y=[new i,new i,new i,new i,new i,new i,new i,new i];class j{constructor(){this._aspectRatio=16/9,this._aspectRatioMode=o,this._calculateProjection=null,this._calculateTransform=null,this._clearColor=new t(.75,.75,.75,1),this._clearColorBuffer=!0,this._clearDepth=1,this._clearDepthBuffer=!0,this._clearStencil=0,this._clearStencilBuffer=!0,this._cullingMask=4294967295,this._cullFaces=!0,this._farClip=1e3,this._flipFaces=!1,this._fov=45,this._frustumCulling=!0,this._horizontalFov=!1,this._layers=[h,c,l,n,_],this._layersSet=new Set(this._layers),this._nearClip=.1,this._node=null,this._orthoHeight=10,this._projection=u,this._rect=new r(0,0,1,1),this._renderTarget=null,this._scissorRect=new r(0,0,1,1),this._scissorRectClear=!1,this._aperture=16,this._shutter=.001,this._sensitivity=1e3,this._projMat=new e,this._projMatDirty=!0,this._projMatSkybox=new e,this._viewMat=new e,this._viewMatDirty=!0,this._viewProjMat=new e,this._viewProjMatDirty=!0,this.frustum=new a}get fullSizeClearRect(){const t=this._scissorRectClear?this.scissorRect:this._rect;return 0===t.x&&0===t.y&&1===t.z&&1===t.w}set aspectRatio(t){this._aspectRatio!==t&&(this._aspectRatio=t,this._projMatDirty=!0)}get aspectRatio(){return this._aspectRatio}set aspectRatioMode(t){this._aspectRatioMode!==t&&(this._aspectRatioMode=t,this._projMatDirty=!0)}get aspectRatioMode(){return this._aspectRatioMode}set calculateProjection(t){this._calculateProjection=t,this._projMatDirty=!0}get calculateProjection(){return this._calculateProjection}set calculateTransform(t){this._calculateTransform=t}get calculateTransform(){return this._calculateTransform}set clearColor(t){this._clearColor.copy(t)}get clearColor(){return this._clearColor}set clearColorBuffer(t){this._clearColorBuffer=t}get clearColorBuffer(){return this._clearColorBuffer}set clearDepth(t){this._clearDepth=t}get clearDepth(){return this._clearDepth}set clearDepthBuffer(t){this._clearDepthBuffer=t}get clearDepthBuffer(){return this._clearDepthBuffer}set clearStencil(t){this._clearStencil=t}get clearStencil(){return this._clearStencil}set clearStencilBuffer(t){this._clearStencilBuffer=t}get clearStencilBuffer(){return this._clearStencilBuffer}set cullingMask(t){this._cullingMask=t}get cullingMask(){return this._cullingMask}set cullFaces(t){this._cullFaces=t}get cullFaces(){return this._cullFaces}set farClip(t){this._farClip!==t&&(this._farClip=t,this._projMatDirty=!0)}get farClip(){return this._farClip}set flipFaces(t){this._flipFaces=t}get flipFaces(){return this._flipFaces}set fov(t){this._fov!==t&&(this._fov=t,this._projMatDirty=!0)}get fov(){return this._fov}set frustumCulling(t){this._frustumCulling=t}get frustumCulling(){return this._frustumCulling}set horizontalFov(t){this._horizontalFov!==t&&(this._horizontalFov=t,this._projMatDirty=!0)}get horizontalFov(){return this._horizontalFov}set layers(t){this._layers=t.slice(0),this._layersSet=new Set(this._layers)}get layers(){return this._layers}get layersSet(){return this._layersSet}set nearClip(t){this._nearClip!==t&&(this._nearClip=t,this._projMatDirty=!0)}get nearClip(){return this._nearClip}set node(t){this._node=t}get node(){return this._node}set orthoHeight(t){this._orthoHeight!==t&&(this._orthoHeight=t,this._projMatDirty=!0)}get orthoHeight(){return this._orthoHeight}set projection(t){this._projection!==t&&(this._projection=t,this._projMatDirty=!0)}get projection(){return this._projection}get projectionMatrix(){return this._evaluateProjectionMatrix(),this._projMat}set rect(t){this._rect.copy(t)}get rect(){return this._rect}set renderTarget(t){this._renderTarget=t}get renderTarget(){return this._renderTarget}set scissorRect(t){this._scissorRect.copy(t)}get scissorRect(){return this._scissorRect}get viewMatrix(){if(this._viewMatDirty){const t=this._node.getWorldTransform();this._viewMat.copy(t).invert(),this._viewMatDirty=!1}return this._viewMat}set aperture(t){this._aperture=t}get aperture(){return this._aperture}set sensitivity(t){this._sensitivity=t}get sensitivity(){return this._sensitivity}set shutter(t){this._shutter=t}get shutter(){return this._shutter}clone(){return(new j).copy(this)}copy(t){return this.aspectRatio=t.aspectRatio,this.aspectRatioMode=t.aspectRatioMode,this.calculateProjection=t.calculateProjection,this.calculateTransform=t.calculateTransform,this.clearColor=t.clearColor,this.clearColorBuffer=t.clearColorBuffer,this.clearDepth=t.clearDepth,this.clearDepthBuffer=t.clearDepthBuffer,this.clearStencil=t.clearStencil,this.clearStencilBuffer=t.clearStencilBuffer,this.cullFaces=t.cullFaces,this.cullingMask=t.cullingMask,this.farClip=t.farClip,this.flipFaces=t.flipFaces,this.fov=t.fov,this.frustumCulling=t.frustumCulling,this.horizontalFov=t.horizontalFov,this.layers=t.layers,this.nearClip=t.nearClip,this.orthoHeight=t.orthoHeight,this.projection=t.projection,this.rect=t.rect,this.renderTarget=t.renderTarget,this.scissorRect=t.scissorRect,this.aperture=t.aperture,this.shutter=t.shutter,this.sensitivity=t.sensitivity,this}_updateViewProjMat(){(this._projMatDirty||this._viewMatDirty||this._viewProjMatDirty)&&(this._viewProjMat.mul2(this.projectionMatrix,this.viewMatrix),this._viewProjMatDirty=!1)}worldToScreen(t,e,r,s=new i){this._updateViewProjMat(),this._viewProjMat.transformPoint(t,s);const a=this._viewProjMat.data,o=t.x*a[3]+t.y*a[7]+t.z*a[11]+1*a[15];return s.x=.5*(s.x/o+1)*e,s.y=.5*(1-s.y/o)*r,s}screenToWorld(t,r,s,a,o,h=new i){const c=this._farClip-this._nearClip;if(p.set(t/a,(o-r)/o,s/c),p.mulScalar(2),p.sub(i.ONE),this._projection===u){e._getPerspectiveHalfSize(f,this._fov,this._aspectRatio,this._nearClip,this._horizontalFov),f.x*=p.x,f.y*=p.y;const t=this._node.getWorldTransform();f.z=-this._nearClip,t.transformPoint(f,g);const i=this._node.getPosition();h.sub2(g,i),h.normalize(),h.mulScalar(s),h.add(i)}else this._updateViewProjMat(),M.copy(this._viewProjMat).invert(),M.transformPoint(p,h);return h}_evaluateProjectionMatrix(){if(this._projMatDirty){if(this._projection===u)this._projMat.setPerspective(this._fov,this._aspectRatio,this._nearClip,this._farClip,this._horizontalFov),this._projMatSkybox.copy(this._projMat);else{const t=this._orthoHeight,e=t*this._aspectRatio;this._projMat.setOrtho(-e,e,-t,t,this._nearClip,this._farClip),this._projMatSkybox.setPerspective(this._fov,this._aspectRatio,this._nearClip,this._farClip)}this._projMatDirty=!1}}getProjectionMatrixSkybox(){return this._evaluateProjectionMatrix(),this._projMatSkybox}getExposure(){const t=Math.log2(this._aperture*this._aperture/this._shutter*100/this._sensitivity);return 1/(1.2*Math.pow(2,t))}getScreenSize(t){if(this._projection===u){const e=this._node.getPosition().distance(t.center);if(e<t.radius)return 1;const i=Math.asin(t.radius/e),r=Math.tan(i),a=Math.tan(this._fov/2*s.DEG_TO_RAD);return Math.min(r/a,1)}return s.clamp(t.radius/this._orthoHeight,0,1)}getFrustumCorners(t=this._nearClip,e=this._farClip){const i=this._fov*Math.PI/180;let r=this._projection===u?Math.tan(i/2)*t:this._orthoHeight,s=r*this._aspectRatio;const a=y;return a[0].x=s,a[0].y=-r,a[0].z=-t,a[1].x=s,a[1].y=r,a[1].z=-t,a[2].x=-s,a[2].y=r,a[2].z=-t,a[3].x=-s,a[3].y=-r,a[3].z=-t,this._projection===u&&(r=Math.tan(i/2)*e,s=r*this._aspectRatio),a[4].x=s,a[4].y=-r,a[4].z=-e,a[5].x=s,a[5].y=r,a[5].z=-e,a[6].x=-s,a[6].y=r,a[6].z=-e,a[7].x=-s,a[7].y=-r,a[7].z=-e,a}}export{j as Camera};
