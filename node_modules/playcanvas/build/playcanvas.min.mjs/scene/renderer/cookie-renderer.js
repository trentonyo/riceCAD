import{Vec4 as e}from"../../core/math/vec4.js";import{Mat4 as i}from"../../core/math/mat4.js";import{PIXELFORMAT_R8_G8_B8_A8 as t,FILTER_NEAREST as r,ADDRESS_CLAMP_TO_EDGE as o}from"../../platform/graphics/constants.js";import{Texture as s}from"../../platform/graphics/texture.js";import{createShaderFromCode as n}from"../shader-lib/utils.js";import{drawQuadWithShader as a}from"../../platform/graphics/simple-post-effect.js";import{LIGHTTYPE_OMNI as l}from"../constants.js";import{LightCamera as c}from"./light-camera.js";const h=new e;class u{constructor(e,i){this.device=e,this.lightTextureAtlas=i,this.blitShader2d=null,this.blitShaderCube=null,this.blitTextureId=null,this.invViewProjId=null}destroy(){}getShader(e,i){return this[e]||(this[e]=n(this.device,"\n    attribute vec2 vertex_position;\n    varying vec2 uv0;\n    void main(void) {\n        gl_Position = vec4(vertex_position, 0.5, 1.0);\n        uv0 = vertex_position.xy * 0.5 + 0.5;\n    }",i,`cookie_renderer_${e}`)),this.blitTextureId||(this.blitTextureId=this.device.scope.resolve("blitTexture")),this.invViewProjId||(this.invViewProjId=this.device.scope.resolve("invViewProj")),this[e]}get shader2d(){return this.getShader("blitShader2d","\n    varying vec2 uv0;\n    uniform sampler2D blitTexture;\n    void main(void) {\n        gl_FragColor = texture2D(blitTexture, uv0);\n    }")}get shaderCube(){return this.getShader("blitShaderCube","\n    varying vec2 uv0;\n    uniform samplerCube blitTexture;\n    uniform mat4 invViewProj;\n    void main(void) {\n        vec4 projPos = vec4(uv0 * 2.0 - 1.0, 0.5, 1.0);\n        vec4 worldPos = invViewProj * projPos;\n        gl_FragColor = textureCube(blitTexture, worldPos.xyz);\n    }")}static createTexture(e,i){return new s(e,{name:"CookieAtlas",width:i,height:i,format:t,cubemap:!1,mipmaps:!1,minFilter:r,magFilter:r,addressU:o,addressV:o})}initInvViewProjMatrices(){if(!u._invViewProjMatrices){u._invViewProjMatrices=[];for(let e=0;e<6;e++){const t=c.create(null,l,e),r=t.projectionMatrix,o=t.node.getLocalTransform().clone().invert();u._invViewProjMatrices[e]=(new i).mul2(r,o).invert()}}}render(e,i){if(e.enabled&&e.cookie&&e.visibleThisFrame){const t=e.numShadowFaces,r=t>1?this.shaderCube:this.shader2d,o=this.device;t>1&&this.initInvViewProjMatrices(),this.blitTextureId.setValue(e.cookie);for(let s=0;s<t;s++){if(h.copy(e.atlasViewport),t>1){const e=h.z/3,i=this.lightTextureAtlas.cubeSlotsOffsets[s];h.x+=e*i.x,h.y+=e*i.y,h.z=e,h.w=e,this.invViewProjId.setValue(u._invViewProjMatrices[s].data)}h.mulScalar(i.colorBuffer.width),a(o,i,r,h)}}}}u._invViewProjMatrices=null;export{u as CookieRenderer};
