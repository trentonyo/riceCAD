/**
 * @license
 * PlayCanvas Engine v1.58.0 revision 6672f604c (DEBUG PROFILER)
 * Copyright 2011-2022 PlayCanvas Ltd. All rights reserved.
 */
import { BoundingBox } from '../../core/shape/bounding-box.js';

class Batch {
  constructor(meshInstances, dynamic, batchGroupId) {
    this.origMeshInstances = meshInstances;
    this._aabb = new BoundingBox();
    this.meshInstance = null;
    this.dynamic = dynamic;
    this.batchGroupId = batchGroupId;
  }

  destroy(scene, layers) {
    if (this.meshInstance) {
      this.removeFromLayers(scene, layers);
      this.meshInstance.destroy();
    }
  }
  addToLayers(scene, layers) {
    for (let i = 0; i < layers.length; i++) {
      const layer = scene.layers.getLayerById(layers[i]);
      if (layer) {
        layer.addMeshInstances([this.meshInstance]);
      }
    }
  }
  removeFromLayers(scene, layers) {
    for (let i = 0; i < layers.length; i++) {
      const layer = scene.layers.getLayerById(layers[i]);
      if (layer) {
        layer.removeMeshInstances([this.meshInstance]);
      }
    }
  }

  updateBoundingBox() {
    this._aabb.copy(this.origMeshInstances[0].aabb);
    for (let i = 1; i < this.origMeshInstances.length; i++) {
      this._aabb.add(this.origMeshInstances[i].aabb);
    }
    this.meshInstance.aabb = this._aabb;
    this.meshInstance._aabbVer = 0;
  }
}

export { Batch };
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiYmF0Y2guanMiLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uL3NyYy9zY2VuZS9iYXRjaGluZy9iYXRjaC5qcyJdLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBCb3VuZGluZ0JveCB9IGZyb20gJy4uLy4uL2NvcmUvc2hhcGUvYm91bmRpbmctYm94LmpzJztcblxuLyoqIEB0eXBlZGVmIHtpbXBvcnQoJy4uL21lc2gtaW5zdGFuY2UuanMnKS5NZXNoSW5zdGFuY2V9IE1lc2hJbnN0YW5jZSAqL1xuXG4vKipcbiAqIEhvbGRzIGluZm9ybWF0aW9uIGFib3V0IGJhdGNoZWQgbWVzaCBpbnN0YW5jZXMuIENyZWF0ZWQgaW4ge0BsaW5rIEJhdGNoTWFuYWdlciNjcmVhdGV9LlxuICpcbiAqIEBwcm9wZXJ0eSB7TWVzaEluc3RhbmNlW119IG9yaWdNZXNoSW5zdGFuY2VzIEFuIGFycmF5IG9mIG9yaWdpbmFsIG1lc2ggaW5zdGFuY2VzLCBmcm9tIHdoaWNoXG4gKiB0aGlzIGJhdGNoIHdhcyBnZW5lcmF0ZWQuXG4gKiBAcHJvcGVydHkge01lc2hJbnN0YW5jZX0gbWVzaEluc3RhbmNlIEEgc2luZ2xlIGNvbWJpbmVkIG1lc2ggaW5zdGFuY2UsIHRoZSByZXN1bHQgb2YgYmF0Y2hpbmcuXG4gKiBAcHJvcGVydHkge2Jvb2xlYW59IGR5bmFtaWMgV2hldGhlciB0aGlzIGJhdGNoIGlzIGR5bmFtaWMgKHN1cHBvcnRzIHRyYW5zZm9ybWluZyBtZXNoIGluc3RhbmNlc1xuICogYXQgcnVudGltZSkuXG4gKiBAcHJvcGVydHkge251bWJlcn0gW2JhdGNoR3JvdXBJZF0gTGluayB0aGlzIGJhdGNoIHRvIGEgc3BlY2lmaWMgYmF0Y2ggZ3JvdXAuIFRoaXMgaXMgZG9uZVxuICogYXV0b21hdGljYWxseSB3aXRoIGRlZmF1bHQgYmF0Y2hlcy5cbiAqL1xuY2xhc3MgQmF0Y2gge1xuICAgIC8qKlxuICAgICAqIENyZWF0ZSBhIG5ldyBCYXRjaCBpbnN0YW5jZS5cbiAgICAgKlxuICAgICAqIEBwYXJhbSB7TWVzaEluc3RhbmNlW119IG1lc2hJbnN0YW5jZXMgLSBUaGUgbWVzaCBpbnN0YW5jZXMgdG8gYmUgYmF0Y2hlZC5cbiAgICAgKiBAcGFyYW0ge2Jvb2xlYW59IGR5bmFtaWMgLSBXaGV0aGVyIHRoaXMgYmF0Y2ggaXMgZHluYW1pYyAoc3VwcG9ydHMgdHJhbnNmb3JtaW5nIG1lc2ggaW5zdGFuY2VzIGF0IHJ1bnRpbWUpLlxuICAgICAqIEBwYXJhbSB7bnVtYmVyfSBiYXRjaEdyb3VwSWQgLSBMaW5rIHRoaXMgYmF0Y2ggdG8gYSBzcGVjaWZpYyBiYXRjaCBncm91cC4gVGhpcyBpcyBkb25lIGF1dG9tYXRpY2FsbHkgd2l0aCBkZWZhdWx0IGJhdGNoZXMuXG4gICAgICovXG4gICAgY29uc3RydWN0b3IobWVzaEluc3RhbmNlcywgZHluYW1pYywgYmF0Y2hHcm91cElkKSB7XG4gICAgICAgIHRoaXMub3JpZ01lc2hJbnN0YW5jZXMgPSBtZXNoSW5zdGFuY2VzO1xuICAgICAgICB0aGlzLl9hYWJiID0gbmV3IEJvdW5kaW5nQm94KCk7XG4gICAgICAgIHRoaXMubWVzaEluc3RhbmNlID0gbnVsbDtcbiAgICAgICAgdGhpcy5keW5hbWljID0gZHluYW1pYztcbiAgICAgICAgdGhpcy5iYXRjaEdyb3VwSWQgPSBiYXRjaEdyb3VwSWQ7XG4gICAgfVxuXG4gICAgLy8gUmVtb3ZlcyB0aGUgYmF0Y2ggbWVzaGVzIGZyb20gYWxsIGxheWVycyBhbmQgZGVzdHJveXMgaXRcbiAgICBkZXN0cm95KHNjZW5lLCBsYXllcnMpIHtcbiAgICAgICAgaWYgKHRoaXMubWVzaEluc3RhbmNlKSB7XG4gICAgICAgICAgICB0aGlzLnJlbW92ZUZyb21MYXllcnMoc2NlbmUsIGxheWVycyk7XG4gICAgICAgICAgICB0aGlzLm1lc2hJbnN0YW5jZS5kZXN0cm95KCk7XG4gICAgICAgIH1cbiAgICB9XG5cbiAgICBhZGRUb0xheWVycyhzY2VuZSwgbGF5ZXJzKSB7XG4gICAgICAgIGZvciAobGV0IGkgPSAwOyBpIDwgbGF5ZXJzLmxlbmd0aDsgaSsrKSB7XG4gICAgICAgICAgICBjb25zdCBsYXllciA9IHNjZW5lLmxheWVycy5nZXRMYXllckJ5SWQobGF5ZXJzW2ldKTtcbiAgICAgICAgICAgIGlmIChsYXllcikge1xuICAgICAgICAgICAgICAgIGxheWVyLmFkZE1lc2hJbnN0YW5jZXMoW3RoaXMubWVzaEluc3RhbmNlXSk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICB9XG5cbiAgICByZW1vdmVGcm9tTGF5ZXJzKHNjZW5lLCBsYXllcnMpIHtcbiAgICAgICAgZm9yIChsZXQgaSA9IDA7IGkgPCBsYXllcnMubGVuZ3RoOyBpKyspIHtcbiAgICAgICAgICAgIGNvbnN0IGxheWVyID0gc2NlbmUubGF5ZXJzLmdldExheWVyQnlJZChsYXllcnNbaV0pO1xuICAgICAgICAgICAgaWYgKGxheWVyKSB7XG4gICAgICAgICAgICAgICAgbGF5ZXIucmVtb3ZlTWVzaEluc3RhbmNlcyhbdGhpcy5tZXNoSW5zdGFuY2VdKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgIH1cblxuICAgIC8vIFVwZGF0ZXMgYm91bmRpbmcgYm94IGZvciBhIGJhdGNoXG4gICAgdXBkYXRlQm91bmRpbmdCb3goKSB7XG4gICAgICAgIHRoaXMuX2FhYmIuY29weSh0aGlzLm9yaWdNZXNoSW5zdGFuY2VzWzBdLmFhYmIpO1xuICAgICAgICBmb3IgKGxldCBpID0gMTsgaSA8IHRoaXMub3JpZ01lc2hJbnN0YW5jZXMubGVuZ3RoOyBpKyspIHtcbiAgICAgICAgICAgIHRoaXMuX2FhYmIuYWRkKHRoaXMub3JpZ01lc2hJbnN0YW5jZXNbaV0uYWFiYik7XG4gICAgICAgIH1cbiAgICAgICAgdGhpcy5tZXNoSW5zdGFuY2UuYWFiYiA9IHRoaXMuX2FhYmI7XG4gICAgICAgIHRoaXMubWVzaEluc3RhbmNlLl9hYWJiVmVyID0gMDtcbiAgICB9XG59XG5cbmV4cG9ydCB7IEJhdGNoIH07XG4iXSwibmFtZXMiOlsiQmF0Y2giLCJjb25zdHJ1Y3RvciIsIm1lc2hJbnN0YW5jZXMiLCJkeW5hbWljIiwiYmF0Y2hHcm91cElkIiwib3JpZ01lc2hJbnN0YW5jZXMiLCJfYWFiYiIsIkJvdW5kaW5nQm94IiwibWVzaEluc3RhbmNlIiwiZGVzdHJveSIsInNjZW5lIiwibGF5ZXJzIiwicmVtb3ZlRnJvbUxheWVycyIsImFkZFRvTGF5ZXJzIiwiaSIsImxlbmd0aCIsImxheWVyIiwiZ2V0TGF5ZXJCeUlkIiwiYWRkTWVzaEluc3RhbmNlcyIsInJlbW92ZU1lc2hJbnN0YW5jZXMiLCJ1cGRhdGVCb3VuZGluZ0JveCIsImNvcHkiLCJhYWJiIiwiYWRkIiwiX2FhYmJWZXIiXSwibWFwcGluZ3MiOiI7Ozs7Ozs7QUFlQSxNQUFNQSxLQUFLLENBQUM7QUFRUkMsRUFBQUEsV0FBVyxDQUFDQyxhQUFhLEVBQUVDLE9BQU8sRUFBRUMsWUFBWSxFQUFFO0lBQzlDLElBQUksQ0FBQ0MsaUJBQWlCLEdBQUdILGFBQWEsQ0FBQTtBQUN0QyxJQUFBLElBQUksQ0FBQ0ksS0FBSyxHQUFHLElBQUlDLFdBQVcsRUFBRSxDQUFBO0lBQzlCLElBQUksQ0FBQ0MsWUFBWSxHQUFHLElBQUksQ0FBQTtJQUN4QixJQUFJLENBQUNMLE9BQU8sR0FBR0EsT0FBTyxDQUFBO0lBQ3RCLElBQUksQ0FBQ0MsWUFBWSxHQUFHQSxZQUFZLENBQUE7QUFDcEMsR0FBQTs7QUFHQUssRUFBQUEsT0FBTyxDQUFDQyxLQUFLLEVBQUVDLE1BQU0sRUFBRTtJQUNuQixJQUFJLElBQUksQ0FBQ0gsWUFBWSxFQUFFO0FBQ25CLE1BQUEsSUFBSSxDQUFDSSxnQkFBZ0IsQ0FBQ0YsS0FBSyxFQUFFQyxNQUFNLENBQUMsQ0FBQTtBQUNwQyxNQUFBLElBQUksQ0FBQ0gsWUFBWSxDQUFDQyxPQUFPLEVBQUUsQ0FBQTtBQUMvQixLQUFBO0FBQ0osR0FBQTtBQUVBSSxFQUFBQSxXQUFXLENBQUNILEtBQUssRUFBRUMsTUFBTSxFQUFFO0FBQ3ZCLElBQUEsS0FBSyxJQUFJRyxDQUFDLEdBQUcsQ0FBQyxFQUFFQSxDQUFDLEdBQUdILE1BQU0sQ0FBQ0ksTUFBTSxFQUFFRCxDQUFDLEVBQUUsRUFBRTtBQUNwQyxNQUFBLE1BQU1FLEtBQUssR0FBR04sS0FBSyxDQUFDQyxNQUFNLENBQUNNLFlBQVksQ0FBQ04sTUFBTSxDQUFDRyxDQUFDLENBQUMsQ0FBQyxDQUFBO0FBQ2xELE1BQUEsSUFBSUUsS0FBSyxFQUFFO1FBQ1BBLEtBQUssQ0FBQ0UsZ0JBQWdCLENBQUMsQ0FBQyxJQUFJLENBQUNWLFlBQVksQ0FBQyxDQUFDLENBQUE7QUFDL0MsT0FBQTtBQUNKLEtBQUE7QUFDSixHQUFBO0FBRUFJLEVBQUFBLGdCQUFnQixDQUFDRixLQUFLLEVBQUVDLE1BQU0sRUFBRTtBQUM1QixJQUFBLEtBQUssSUFBSUcsQ0FBQyxHQUFHLENBQUMsRUFBRUEsQ0FBQyxHQUFHSCxNQUFNLENBQUNJLE1BQU0sRUFBRUQsQ0FBQyxFQUFFLEVBQUU7QUFDcEMsTUFBQSxNQUFNRSxLQUFLLEdBQUdOLEtBQUssQ0FBQ0MsTUFBTSxDQUFDTSxZQUFZLENBQUNOLE1BQU0sQ0FBQ0csQ0FBQyxDQUFDLENBQUMsQ0FBQTtBQUNsRCxNQUFBLElBQUlFLEtBQUssRUFBRTtRQUNQQSxLQUFLLENBQUNHLG1CQUFtQixDQUFDLENBQUMsSUFBSSxDQUFDWCxZQUFZLENBQUMsQ0FBQyxDQUFBO0FBQ2xELE9BQUE7QUFDSixLQUFBO0FBQ0osR0FBQTs7QUFHQVksRUFBQUEsaUJBQWlCLEdBQUc7QUFDaEIsSUFBQSxJQUFJLENBQUNkLEtBQUssQ0FBQ2UsSUFBSSxDQUFDLElBQUksQ0FBQ2hCLGlCQUFpQixDQUFDLENBQUMsQ0FBQyxDQUFDaUIsSUFBSSxDQUFDLENBQUE7QUFDL0MsSUFBQSxLQUFLLElBQUlSLENBQUMsR0FBRyxDQUFDLEVBQUVBLENBQUMsR0FBRyxJQUFJLENBQUNULGlCQUFpQixDQUFDVSxNQUFNLEVBQUVELENBQUMsRUFBRSxFQUFFO0FBQ3BELE1BQUEsSUFBSSxDQUFDUixLQUFLLENBQUNpQixHQUFHLENBQUMsSUFBSSxDQUFDbEIsaUJBQWlCLENBQUNTLENBQUMsQ0FBQyxDQUFDUSxJQUFJLENBQUMsQ0FBQTtBQUNsRCxLQUFBO0FBQ0EsSUFBQSxJQUFJLENBQUNkLFlBQVksQ0FBQ2MsSUFBSSxHQUFHLElBQUksQ0FBQ2hCLEtBQUssQ0FBQTtBQUNuQyxJQUFBLElBQUksQ0FBQ0UsWUFBWSxDQUFDZ0IsUUFBUSxHQUFHLENBQUMsQ0FBQTtBQUNsQyxHQUFBO0FBQ0o7Ozs7In0=
