/**
 * @license
 * PlayCanvas Engine v1.58.0 revision 6672f604c (DEBUG PROFILER)
 * Copyright 2011-2022 PlayCanvas Ltd. All rights reserved.
 */
import { PIXELFORMAT_RGBA32F, PIXELFORMAT_RGBA16F, BLENDMODE_ONE, BLENDEQUATION_ADD } from '../platform/graphics/constants.js';
import { createShaderFromCode } from './shader-lib/utils.js';
import { drawQuadWithShader } from '../platform/graphics/simple-post-effect.js';
import { RenderTarget } from '../platform/graphics/render-target.js';
import { DebugGraphics } from '../platform/graphics/debug-graphics.js';
import { Debug } from '../core/debug.js';
import { Morph } from './morph.js';

const textureMorphVertexShader = `
    attribute vec2 vertex_position;
    varying vec2 uv0;
    void main(void) {
        gl_Position = vec4(vertex_position, 0.5, 1.0);
        uv0 = vertex_position.xy * 0.5 + 0.5;
    }
    `;

class MorphInstance {
  constructor(morph) {
    this.morph = morph;
    morph.incRefCount();
    this.device = morph.device;

    this._weights = [];
    this._weightMap = new Map();
    for (let v = 0; v < morph._targets.length; v++) {
      const target = morph._targets[v];
      if (target.name) {
        this._weightMap.set(target.name, v);
      }
      this.setWeight(v, target.defaultWeight);
    }

    this._activeTargets = [];
    if (morph.useTextureMorph) {
      this.shaderCache = {};

      this.maxSubmitCount = this.device.maxTextures;

      this._shaderMorphWeights = new Float32Array(this.maxSubmitCount);

      const createRT = (name, textureVar) => {
        const format = morph._renderTextureFormat === Morph.FORMAT_FLOAT ? PIXELFORMAT_RGBA32F : PIXELFORMAT_RGBA16F;
        this[textureVar] = morph._createTexture(name, format);
        return new RenderTarget({
          colorBuffer: this[textureVar],
          depth: false
        });
      };
      if (morph.morphPositions) {
        this.rtPositions = createRT('MorphRTPos', 'texturePositions');
      }
      if (morph.morphNormals) {
        this.rtNormals = createRT('MorphRTNrm', 'textureNormals');
      }

      this._textureParams = new Float32Array([morph.morphTextureWidth, morph.morphTextureHeight, 1 / morph.morphTextureWidth, 1 / morph.morphTextureHeight]);

      for (let i = 0; i < this.maxSubmitCount; i++) {
        this['morphBlendTex' + i] = this.device.scope.resolve('morphBlendTex' + i);
      }
      this.morphFactor = this.device.scope.resolve('morphFactor[0]');

      this.zeroTextures = false;
    } else {

      this.maxSubmitCount = 8;

      this._shaderMorphWeights = new Float32Array(this.maxSubmitCount);
      this._shaderMorphWeightsA = new Float32Array(this._shaderMorphWeights.buffer, 0, 4);
      this._shaderMorphWeightsB = new Float32Array(this._shaderMorphWeights.buffer, 4 * 4, 4);

      this._activeVertexBuffers = new Array(this.maxSubmitCount);
    }
  }

  destroy() {
    this.shader = null;
    const morph = this.morph;
    if (morph) {
      this.morph = null;
      morph.decRefCount();

      if (morph.refCount < 1) {
        morph.destroy();
      }
    }
    if (this.rtPositions) {
      this.rtPositions.destroy();
      this.rtPositions = null;
    }
    if (this.texturePositions) {
      this.texturePositions.destroy();
      this.texturePositions = null;
    }
    if (this.rtNormals) {
      this.rtNormals.destroy();
      this.rtNormals = null;
    }
    if (this.textureNormals) {
      this.textureNormals.destroy();
      this.textureNormals = null;
    }
  }

  clone() {
    return new MorphInstance(this.morph);
  }
  _getWeightIndex(key) {
    if (typeof key === 'string') {
      const index = this._weightMap.get(key);
      if (index === undefined) {
        Debug.error(`Cannot find morph target with name: ${key}.`);
      }
      return index;
    }
    return key;
  }

  getWeight(key) {
    const index = this._getWeightIndex(key);
    return this._weights[index];
  }

  setWeight(key, weight) {
    const index = this._getWeightIndex(key);
    Debug.assert(index >= 0 && index < this.morph._targets.length);
    this._weights[index] = weight;
    this._dirty = true;
  }

  _getFragmentShader(numTextures) {
    let fragmentShader = '';
    if (numTextures > 0) {
      fragmentShader += 'varying vec2 uv0;\n' + 'uniform highp float morphFactor[' + numTextures + '];\n';
    }
    for (let i = 0; i < numTextures; i++) {
      fragmentShader += 'uniform highp sampler2D morphBlendTex' + i + ';\n';
    }
    fragmentShader += 'void main (void) {\n' + '    highp vec4 color = vec4(0, 0, 0, 1);\n';
    for (let i = 0; i < numTextures; i++) {
      fragmentShader += '    color.xyz += morphFactor[' + i + '] * texture2D(morphBlendTex' + i + ', uv0).xyz;\n';
    }
    fragmentShader += '    gl_FragColor = color;\n' + '}\n';
    return fragmentShader;
  }

  _getShader(count) {
    let shader = this.shaderCache[count];

    if (!shader) {
      const fs = this._getFragmentShader(count);
      shader = createShaderFromCode(this.device, textureMorphVertexShader, fs, 'textureMorph' + count);
      this.shaderCache[count] = shader;
    }
    return shader;
  }
  _updateTextureRenderTarget(renderTarget, srcTextureName) {
    const device = this.device;

    const submitBatch = (usedCount, blending) => {
      this.morphFactor.setValue(this._shaderMorphWeights);

      device.setBlending(blending);
      if (blending) {
        device.setBlendFunction(BLENDMODE_ONE, BLENDMODE_ONE);
        device.setBlendEquation(BLENDEQUATION_ADD);
      }

      const shader = this._getShader(usedCount);
      drawQuadWithShader(device, renderTarget, shader, undefined, undefined, blending);
    };

    let usedCount = 0;
    let blending = false;
    const count = this._activeTargets.length;
    for (let i = 0; i < count; i++) {
      const activeTarget = this._activeTargets[i];
      const tex = activeTarget.target[srcTextureName];
      if (tex) {
        this['morphBlendTex' + usedCount].setValue(tex);

        this._shaderMorphWeights[usedCount] = activeTarget.weight;

        usedCount++;
        if (usedCount >= this.maxSubmitCount) {
          submitBatch(usedCount, blending);
          usedCount = 0;
          blending = true;
        }
      }
    }

    if (usedCount > 0 || count === 0 && !this.zeroTextures) {
      submitBatch(usedCount, blending);
    }
  }
  _updateTextureMorph() {
    const device = this.device;
    DebugGraphics.pushGpuMarker(device, 'MorphUpdate');

    if (this._activeTargets.length > 0 || !this.zeroTextures) {
      this._updateTextureRenderTarget(this.rtPositions, 'texturePositions');
      this._updateTextureRenderTarget(this.rtNormals, 'textureNormals');

      this.zeroTextures = this._activeTargets.length === 0;
    }
    DebugGraphics.popGpuMarker(device);
  }
  _updateVertexMorph() {
    const count = this.maxSubmitCount;
    for (let i = 0; i < count; i++) {
      this._shaderMorphWeights[i] = 0;
      this._activeVertexBuffers[i] = null;
    }
    let posIndex = 0;
    let nrmIndex = this.morph.morphPositions ? 4 : 0;
    for (let i = 0; i < this._activeTargets.length; i++) {
      const target = this._activeTargets[i].target;
      if (target._vertexBufferPositions) {
        this._activeVertexBuffers[posIndex] = target._vertexBufferPositions;
        this._shaderMorphWeights[posIndex] = this._activeTargets[i].weight;
        posIndex++;
      }
      if (target._vertexBufferNormals) {
        this._activeVertexBuffers[nrmIndex] = target._vertexBufferNormals;
        this._shaderMorphWeights[nrmIndex] = this._activeTargets[i].weight;
        nrmIndex++;
      }
    }
  }

  update() {
    this._dirty = false;
    const targets = this.morph._targets;

    let activeCount = 0;
    const epsilon = 0.00001;
    for (let i = 0; i < targets.length; i++) {
      const absWeight = Math.abs(this.getWeight(i));
      if (absWeight > epsilon) {
        if (this._activeTargets.length <= activeCount) {
          this._activeTargets[activeCount] = {};
        }
        const activeTarget = this._activeTargets[activeCount++];
        activeTarget.absWeight = absWeight;
        activeTarget.weight = this.getWeight(i);
        activeTarget.target = targets[i];
      }
    }
    this._activeTargets.length = activeCount;

    const maxActiveTargets = this.morph.maxActiveTargets;
    if (this._activeTargets.length > maxActiveTargets) {
      this._activeTargets.sort(function (l, r) {
        return l.absWeight < r.absWeight ? 1 : r.absWeight < l.absWeight ? -1 : 0;
      });

      this._activeTargets.length = maxActiveTargets;
    }

    if (this.morph.useTextureMorph) {
      this._updateTextureMorph();
    } else {
      this._updateVertexMorph();
    }
  }
}

export { MorphInstance };
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibW9ycGgtaW5zdGFuY2UuanMiLCJzb3VyY2VzIjpbIi4uLy4uLy4uL3NyYy9zY2VuZS9tb3JwaC1pbnN0YW5jZS5qcyJdLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBCTEVOREVRVUFUSU9OX0FERCwgQkxFTkRNT0RFX09ORSwgUElYRUxGT1JNQVRfUkdCQTMyRiwgUElYRUxGT1JNQVRfUkdCQTE2RiB9IGZyb20gJy4uL3BsYXRmb3JtL2dyYXBoaWNzL2NvbnN0YW50cy5qcyc7XG5pbXBvcnQgeyBjcmVhdGVTaGFkZXJGcm9tQ29kZSB9IGZyb20gJy4uL3NjZW5lL3NoYWRlci1saWIvdXRpbHMuanMnO1xuaW1wb3J0IHsgZHJhd1F1YWRXaXRoU2hhZGVyIH0gZnJvbSAnLi4vcGxhdGZvcm0vZ3JhcGhpY3Mvc2ltcGxlLXBvc3QtZWZmZWN0LmpzJztcbmltcG9ydCB7IFJlbmRlclRhcmdldCB9IGZyb20gJy4uL3BsYXRmb3JtL2dyYXBoaWNzL3JlbmRlci10YXJnZXQuanMnO1xuaW1wb3J0IHsgRGVidWdHcmFwaGljcyB9IGZyb20gJy4uL3BsYXRmb3JtL2dyYXBoaWNzL2RlYnVnLWdyYXBoaWNzLmpzJztcbmltcG9ydCB7IERlYnVnIH0gZnJvbSAnLi4vY29yZS9kZWJ1Zy5qcyc7XG5cbmltcG9ydCB7IE1vcnBoIH0gZnJvbSAnLi9tb3JwaC5qcyc7XG5cbi8qKiBAdHlwZWRlZiB7aW1wb3J0KCcuLi9wbGF0Zm9ybS9ncmFwaGljcy9zaGFkZXIuanMnKS5TaGFkZXJ9IFNoYWRlciAqL1xuXG4vLyB2ZXJ0ZXggc2hhZGVyIHVzZWQgdG8gYWRkIG1vcnBoIHRhcmdldHMgZnJvbSB0ZXh0dXJlcyBpbnRvIHJlbmRlciB0YXJnZXRcbmNvbnN0IHRleHR1cmVNb3JwaFZlcnRleFNoYWRlciA9IGBcbiAgICBhdHRyaWJ1dGUgdmVjMiB2ZXJ0ZXhfcG9zaXRpb247XG4gICAgdmFyeWluZyB2ZWMyIHV2MDtcbiAgICB2b2lkIG1haW4odm9pZCkge1xuICAgICAgICBnbF9Qb3NpdGlvbiA9IHZlYzQodmVydGV4X3Bvc2l0aW9uLCAwLjUsIDEuMCk7XG4gICAgICAgIHV2MCA9IHZlcnRleF9wb3NpdGlvbi54eSAqIDAuNSArIDAuNTtcbiAgICB9XG4gICAgYDtcblxuLyoqXG4gKiBBbiBpbnN0YW5jZSBvZiB7QGxpbmsgTW9ycGh9LiBDb250YWlucyB3ZWlnaHRzIHRvIGFzc2lnbiB0byBldmVyeSB7QGxpbmsgTW9ycGhUYXJnZXR9LCBtYW5hZ2VzXG4gKiBzZWxlY3Rpb24gb2YgYWN0aXZlIG1vcnBoIHRhcmdldHMuXG4gKi9cbmNsYXNzIE1vcnBoSW5zdGFuY2Uge1xuICAgIC8qKlxuICAgICAqIENyZWF0ZSBhIG5ldyBNb3JwaEluc3RhbmNlIGluc3RhbmNlLlxuICAgICAqXG4gICAgICogQHBhcmFtIHtNb3JwaH0gbW9ycGggLSBUaGUge0BsaW5rIE1vcnBofSB0byBpbnN0YW5jZS5cbiAgICAgKi9cbiAgICBjb25zdHJ1Y3Rvcihtb3JwaCkge1xuICAgICAgICAvKipcbiAgICAgICAgICogVGhlIG1vcnBoIHdpdGggaXRzIHRhcmdldHMsIHdoaWNoIGlzIGJlaW5nIGluc3RhbmNlZC5cbiAgICAgICAgICpcbiAgICAgICAgICogQHR5cGUge01vcnBofVxuICAgICAgICAgKi9cbiAgICAgICAgdGhpcy5tb3JwaCA9IG1vcnBoO1xuICAgICAgICBtb3JwaC5pbmNSZWZDb3VudCgpO1xuICAgICAgICB0aGlzLmRldmljZSA9IG1vcnBoLmRldmljZTtcblxuICAgICAgICAvLyB3ZWlnaHRzXG4gICAgICAgIHRoaXMuX3dlaWdodHMgPSBbXTtcbiAgICAgICAgdGhpcy5fd2VpZ2h0TWFwID0gbmV3IE1hcCgpO1xuICAgICAgICBmb3IgKGxldCB2ID0gMDsgdiA8IG1vcnBoLl90YXJnZXRzLmxlbmd0aDsgdisrKSB7XG4gICAgICAgICAgICBjb25zdCB0YXJnZXQgPSBtb3JwaC5fdGFyZ2V0c1t2XTtcbiAgICAgICAgICAgIGlmICh0YXJnZXQubmFtZSkge1xuICAgICAgICAgICAgICAgIHRoaXMuX3dlaWdodE1hcC5zZXQodGFyZ2V0Lm5hbWUsIHYpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgdGhpcy5zZXRXZWlnaHQodiwgdGFyZ2V0LmRlZmF1bHRXZWlnaHQpO1xuICAgICAgICB9XG5cbiAgICAgICAgLy8gdGVtcG9yYXJ5IGFycmF5IG9mIHRhcmdldHMgd2l0aCBub24temVybyB3ZWlnaHRcbiAgICAgICAgdGhpcy5fYWN0aXZlVGFyZ2V0cyA9IFtdO1xuXG4gICAgICAgIGlmIChtb3JwaC51c2VUZXh0dXJlTW9ycGgpIHtcblxuICAgICAgICAgICAgLy8gc2hhZGVyIGNhY2hlXG4gICAgICAgICAgICB0aGlzLnNoYWRlckNhY2hlID0ge307XG5cbiAgICAgICAgICAgIC8vIG1heCBudW1iZXIgb2YgbW9ycGggdGFyZ2V0cyByZW5kZXJlZCBhdCBhIHRpbWUgKGVhY2ggdXNlcyBzaW5nbGUgdGV4dHVyZSBzbG90KVxuICAgICAgICAgICAgdGhpcy5tYXhTdWJtaXRDb3VudCA9IHRoaXMuZGV2aWNlLm1heFRleHR1cmVzO1xuXG4gICAgICAgICAgICAvLyBhcnJheSBmb3IgbWF4IG51bWJlciBvZiB3ZWlnaHRzXG4gICAgICAgICAgICB0aGlzLl9zaGFkZXJNb3JwaFdlaWdodHMgPSBuZXcgRmxvYXQzMkFycmF5KHRoaXMubWF4U3VibWl0Q291bnQpO1xuXG4gICAgICAgICAgICAvLyBjcmVhdGUgcmVuZGVyIHRhcmdldHMgdG8gbW9ycGggdGFyZ2V0cyBpbnRvXG4gICAgICAgICAgICBjb25zdCBjcmVhdGVSVCA9IChuYW1lLCB0ZXh0dXJlVmFyKSA9PiB7XG5cbiAgICAgICAgICAgICAgICAvLyByZW5kZXIgdG8gYXBwcm9wcmlhdGUsIFJHQkEgZm9ybWF0cywgd2UgY2Fubm90IHJlbmRlciB0byBSR0IgZmxvYXQgLyBoYWxmIGZsb2F0IGZvcm1hdCBpbiBXRWJHTFxuICAgICAgICAgICAgICAgIGNvbnN0IGZvcm1hdCA9IG1vcnBoLl9yZW5kZXJUZXh0dXJlRm9ybWF0ID09PSBNb3JwaC5GT1JNQVRfRkxPQVQgPyBQSVhFTEZPUk1BVF9SR0JBMzJGIDogUElYRUxGT1JNQVRfUkdCQTE2RjtcbiAgICAgICAgICAgICAgICB0aGlzW3RleHR1cmVWYXJdID0gbW9ycGguX2NyZWF0ZVRleHR1cmUobmFtZSwgZm9ybWF0KTtcbiAgICAgICAgICAgICAgICByZXR1cm4gbmV3IFJlbmRlclRhcmdldCh7XG4gICAgICAgICAgICAgICAgICAgIGNvbG9yQnVmZmVyOiB0aGlzW3RleHR1cmVWYXJdLFxuICAgICAgICAgICAgICAgICAgICBkZXB0aDogZmFsc2VcbiAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgIH07XG5cbiAgICAgICAgICAgIGlmIChtb3JwaC5tb3JwaFBvc2l0aW9ucykge1xuICAgICAgICAgICAgICAgIHRoaXMucnRQb3NpdGlvbnMgPSBjcmVhdGVSVCgnTW9ycGhSVFBvcycsICd0ZXh0dXJlUG9zaXRpb25zJyk7XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIGlmIChtb3JwaC5tb3JwaE5vcm1hbHMpIHtcbiAgICAgICAgICAgICAgICB0aGlzLnJ0Tm9ybWFscyA9IGNyZWF0ZVJUKCdNb3JwaFJUTnJtJywgJ3RleHR1cmVOb3JtYWxzJyk7XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIC8vIHRleHR1cmUgcGFyYW1zXG4gICAgICAgICAgICB0aGlzLl90ZXh0dXJlUGFyYW1zID0gbmV3IEZsb2F0MzJBcnJheShbbW9ycGgubW9ycGhUZXh0dXJlV2lkdGgsIG1vcnBoLm1vcnBoVGV4dHVyZUhlaWdodCxcbiAgICAgICAgICAgICAgICAxIC8gbW9ycGgubW9ycGhUZXh0dXJlV2lkdGgsIDEgLyBtb3JwaC5tb3JwaFRleHR1cmVIZWlnaHRdKTtcblxuICAgICAgICAgICAgLy8gcmVzb2x2ZSBwb3NzaWJsZSB0ZXh0dXJlIG5hbWVzXG4gICAgICAgICAgICBmb3IgKGxldCBpID0gMDsgaSA8IHRoaXMubWF4U3VibWl0Q291bnQ7IGkrKykge1xuICAgICAgICAgICAgICAgIHRoaXNbJ21vcnBoQmxlbmRUZXgnICsgaV0gPSB0aGlzLmRldmljZS5zY29wZS5yZXNvbHZlKCdtb3JwaEJsZW5kVGV4JyArIGkpO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICB0aGlzLm1vcnBoRmFjdG9yID0gdGhpcy5kZXZpY2Uuc2NvcGUucmVzb2x2ZSgnbW9ycGhGYWN0b3JbMF0nKTtcblxuICAgICAgICAgICAgLy8gdHJ1ZSBpbmRpY2F0ZXMgcmVuZGVyIHRhcmdldCB0ZXh0dXJlcyBhcmUgZnVsbCBvZiB6ZXJvcyB0byBhdm9pZCByZW5kZXJpbmcgdG8gdGhlbSB3aGVuIGFsbCB3ZWlnaHRzIGFyZSB6ZXJvXG4gICAgICAgICAgICB0aGlzLnplcm9UZXh0dXJlcyA9IGZhbHNlO1xuXG4gICAgICAgIH0gZWxzZSB7ICAgIC8vIHZlcnRleCBhdHRyaWJ1dGUgYmFzZWQgbW9ycGhpbmdcblxuICAgICAgICAgICAgLy8gbWF4IG51bWJlciBvZiBtb3JwaCB0YXJnZXRzIHJlbmRlcmVkIGF0IGEgdGltZVxuICAgICAgICAgICAgdGhpcy5tYXhTdWJtaXRDb3VudCA9IDg7XG5cbiAgICAgICAgICAgIC8vIHdlaWdodHMgb2YgYWN0aXZlIHZlcnRleCBidWZmZXJzIGluIGZvcm1hdCB1c2VkIGJ5IHJlbmRlcmluZ1xuICAgICAgICAgICAgdGhpcy5fc2hhZGVyTW9ycGhXZWlnaHRzID0gbmV3IEZsb2F0MzJBcnJheSh0aGlzLm1heFN1Ym1pdENvdW50KTsgICAgICAgICAgICAgICAgICAgICAgICAgICAvLyB3aG9sZSBhcnJheVxuICAgICAgICAgICAgdGhpcy5fc2hhZGVyTW9ycGhXZWlnaHRzQSA9IG5ldyBGbG9hdDMyQXJyYXkodGhpcy5fc2hhZGVyTW9ycGhXZWlnaHRzLmJ1ZmZlciwgMCwgNCk7ICAgICAgICAvLyBmaXJzdCA0IGVsZW1lbnRzXG4gICAgICAgICAgICB0aGlzLl9zaGFkZXJNb3JwaFdlaWdodHNCID0gbmV3IEZsb2F0MzJBcnJheSh0aGlzLl9zaGFkZXJNb3JwaFdlaWdodHMuYnVmZmVyLCA0ICogNCwgNCk7ICAgIC8vIHNlY29uZCA0IGVsZW1lbnRzXG5cbiAgICAgICAgICAgIC8vIHByZS1hbGxvY2F0ZSBhcnJheSBvZiBhY3RpdmUgdmVydGV4IGJ1ZmZlcnMgdXNlZCBieSByZW5kZXJpbmdcbiAgICAgICAgICAgIHRoaXMuX2FjdGl2ZVZlcnRleEJ1ZmZlcnMgPSBuZXcgQXJyYXkodGhpcy5tYXhTdWJtaXRDb3VudCk7XG4gICAgICAgIH1cbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBGcmVlcyB2aWRlbyBtZW1vcnkgYWxsb2NhdGVkIGJ5IHRoaXMgb2JqZWN0LlxuICAgICAqL1xuICAgIGRlc3Ryb3koKSB7XG5cbiAgICAgICAgLy8gZG9uJ3QgZGVzdHJveSBzaGFkZXIgYXMgaXQncyBpbiB0aGUgY2FjaGUgYW5kIGNhbiBiZSB1c2VkIGJ5IG90aGVyIG1hdGVyaWFsc1xuICAgICAgICB0aGlzLnNoYWRlciA9IG51bGw7XG5cbiAgICAgICAgY29uc3QgbW9ycGggPSB0aGlzLm1vcnBoO1xuICAgICAgICBpZiAobW9ycGgpIHtcblxuICAgICAgICAgICAgLy8gZGVjcmVhc2UgcmVmIGNvdW50XG4gICAgICAgICAgICB0aGlzLm1vcnBoID0gbnVsbDtcbiAgICAgICAgICAgIG1vcnBoLmRlY1JlZkNvdW50KCk7XG5cbiAgICAgICAgICAgIC8vIGRlc3Ryb3kgbW9ycGhcbiAgICAgICAgICAgIGlmIChtb3JwaC5yZWZDb3VudCA8IDEpIHtcbiAgICAgICAgICAgICAgICBtb3JwaC5kZXN0cm95KCk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cblxuICAgICAgICBpZiAodGhpcy5ydFBvc2l0aW9ucykge1xuICAgICAgICAgICAgdGhpcy5ydFBvc2l0aW9ucy5kZXN0cm95KCk7XG4gICAgICAgICAgICB0aGlzLnJ0UG9zaXRpb25zID0gbnVsbDtcbiAgICAgICAgfVxuXG4gICAgICAgIGlmICh0aGlzLnRleHR1cmVQb3NpdGlvbnMpIHtcbiAgICAgICAgICAgIHRoaXMudGV4dHVyZVBvc2l0aW9ucy5kZXN0cm95KCk7XG4gICAgICAgICAgICB0aGlzLnRleHR1cmVQb3NpdGlvbnMgPSBudWxsO1xuICAgICAgICB9XG5cbiAgICAgICAgaWYgKHRoaXMucnROb3JtYWxzKSB7XG4gICAgICAgICAgICB0aGlzLnJ0Tm9ybWFscy5kZXN0cm95KCk7XG4gICAgICAgICAgICB0aGlzLnJ0Tm9ybWFscyA9IG51bGw7XG4gICAgICAgIH1cblxuICAgICAgICBpZiAodGhpcy50ZXh0dXJlTm9ybWFscykge1xuICAgICAgICAgICAgdGhpcy50ZXh0dXJlTm9ybWFscy5kZXN0cm95KCk7XG4gICAgICAgICAgICB0aGlzLnRleHR1cmVOb3JtYWxzID0gbnVsbDtcbiAgICAgICAgfVxuICAgIH1cblxuICAgIC8qKlxuICAgICAqIENsb25lcyBhIE1vcnBoSW5zdGFuY2UuIFRoZSByZXR1cm5lZCBjbG9uZSB1c2VzIHRoZSBzYW1lIHtAbGluayBNb3JwaH0gYW5kIHdlaWdodHMgYXJlIHNldFxuICAgICAqIHRvIGRlZmF1bHRzLlxuICAgICAqXG4gICAgICogQHJldHVybnMge01vcnBoSW5zdGFuY2V9IEEgY2xvbmUgb2YgdGhlIHNwZWNpZmllZCBNb3JwaEluc3RhbmNlLlxuICAgICAqL1xuICAgIGNsb25lKCkge1xuICAgICAgICByZXR1cm4gbmV3IE1vcnBoSW5zdGFuY2UodGhpcy5tb3JwaCk7XG4gICAgfVxuXG4gICAgX2dldFdlaWdodEluZGV4KGtleSkge1xuICAgICAgICBpZiAodHlwZW9mIGtleSA9PT0gJ3N0cmluZycpIHtcbiAgICAgICAgICAgIGNvbnN0IGluZGV4ID0gdGhpcy5fd2VpZ2h0TWFwLmdldChrZXkpO1xuICAgICAgICAgICAgaWYgKGluZGV4ID09PSB1bmRlZmluZWQpIHtcbiAgICAgICAgICAgICAgICBEZWJ1Zy5lcnJvcihgQ2Fubm90IGZpbmQgbW9ycGggdGFyZ2V0IHdpdGggbmFtZTogJHtrZXl9LmApO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgcmV0dXJuIGluZGV4O1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiBrZXk7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogR2V0cyBjdXJyZW50IHdlaWdodCBvZiB0aGUgc3BlY2lmaWVkIG1vcnBoIHRhcmdldC5cbiAgICAgKlxuICAgICAqIEBwYXJhbSB7c3RyaW5nfG51bWJlcn0ga2V5IC0gQW4gaWRlbnRpZmllciBmb3IgdGhlIG1vcnBoIHRhcmdldC4gRWl0aGVyIHRoZSB3ZWlnaHQgaW5kZXggb3IgdGhlIHdlaWdodCBuYW1lXG4gICAgICogQHJldHVybnMge251bWJlcn0gV2VpZ2h0LlxuICAgICAqL1xuICAgIGdldFdlaWdodChrZXkpIHtcbiAgICAgICAgY29uc3QgaW5kZXggPSB0aGlzLl9nZXRXZWlnaHRJbmRleChrZXkpO1xuICAgICAgICByZXR1cm4gdGhpcy5fd2VpZ2h0c1tpbmRleF07XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogU2V0cyB3ZWlnaHQgb2YgdGhlIHNwZWNpZmllZCBtb3JwaCB0YXJnZXQuXG4gICAgICpcbiAgICAgKiBAcGFyYW0ge3N0cmluZ3xudW1iZXJ9IGtleSAtIEFuIGlkZW50aWZpZXIgZm9yIHRoZSBtb3JwaCB0YXJnZXQuIEVpdGhlciB0aGUgd2VpZ2h0IGluZGV4IG9yIHRoZSB3ZWlnaHQgbmFtZVxuICAgICAqIEBwYXJhbSB7bnVtYmVyfSB3ZWlnaHQgLSBXZWlnaHQuXG4gICAgICovXG4gICAgc2V0V2VpZ2h0KGtleSwgd2VpZ2h0KSB7XG4gICAgICAgIGNvbnN0IGluZGV4ID0gdGhpcy5fZ2V0V2VpZ2h0SW5kZXgoa2V5KTtcbiAgICAgICAgRGVidWcuYXNzZXJ0KGluZGV4ID49IDAgJiYgaW5kZXggPCB0aGlzLm1vcnBoLl90YXJnZXRzLmxlbmd0aCk7XG4gICAgICAgIHRoaXMuX3dlaWdodHNbaW5kZXhdID0gd2VpZ2h0O1xuICAgICAgICB0aGlzLl9kaXJ0eSA9IHRydWU7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogR2VuZXJhdGUgZnJhZ21lbnQgc2hhZGVyIHRvIGJsZW5kIGEgbnVtYmVyIG9mIHRleHR1cmVzIHVzaW5nIHNwZWNpZmllZCB3ZWlnaHRzLlxuICAgICAqXG4gICAgICogQHBhcmFtIHtudW1iZXJ9IG51bVRleHR1cmVzIC0gTnVtYmVyIG9mIHRleHR1cmVzIHRvIGJsZW5kLlxuICAgICAqIEByZXR1cm5zIHtzdHJpbmd9IEZyYWdtZW50IHNoYWRlci5cbiAgICAgKiBAcHJpdmF0ZVxuICAgICAqL1xuICAgIF9nZXRGcmFnbWVudFNoYWRlcihudW1UZXh0dXJlcykge1xuXG4gICAgICAgIGxldCBmcmFnbWVudFNoYWRlciA9ICcnO1xuXG4gICAgICAgIGlmIChudW1UZXh0dXJlcyA+IDApIHtcbiAgICAgICAgICAgIGZyYWdtZW50U2hhZGVyICs9ICd2YXJ5aW5nIHZlYzIgdXYwO1xcbicgK1xuICAgICAgICAgICAgICAgICd1bmlmb3JtIGhpZ2hwIGZsb2F0IG1vcnBoRmFjdG9yWycgKyBudW1UZXh0dXJlcyArICddO1xcbic7XG4gICAgICAgIH1cblxuICAgICAgICBmb3IgKGxldCBpID0gMDsgaSA8IG51bVRleHR1cmVzOyBpKyspIHtcbiAgICAgICAgICAgIGZyYWdtZW50U2hhZGVyICs9ICd1bmlmb3JtIGhpZ2hwIHNhbXBsZXIyRCBtb3JwaEJsZW5kVGV4JyArIGkgKyAnO1xcbic7XG4gICAgICAgIH1cblxuICAgICAgICBmcmFnbWVudFNoYWRlciArPSAndm9pZCBtYWluICh2b2lkKSB7XFxuJyArXG4gICAgICAgICAgICAnICAgIGhpZ2hwIHZlYzQgY29sb3IgPSB2ZWM0KDAsIDAsIDAsIDEpO1xcbic7XG5cbiAgICAgICAgZm9yIChsZXQgaSA9IDA7IGkgPCBudW1UZXh0dXJlczsgaSsrKSB7XG4gICAgICAgICAgICBmcmFnbWVudFNoYWRlciArPSAnICAgIGNvbG9yLnh5eiArPSBtb3JwaEZhY3RvclsnICsgaSArICddICogdGV4dHVyZTJEKG1vcnBoQmxlbmRUZXgnICsgaSArICcsIHV2MCkueHl6O1xcbic7XG4gICAgICAgIH1cblxuICAgICAgICBmcmFnbWVudFNoYWRlciArPSAnICAgIGdsX0ZyYWdDb2xvciA9IGNvbG9yO1xcbicgK1xuICAgICAgICAgICAgJ31cXG4nO1xuXG4gICAgICAgIHJldHVybiBmcmFnbWVudFNoYWRlcjtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBDcmVhdGUgY29tcGxldGUgc2hhZGVyIGZvciB0ZXh0dXJlIGJhc2VkIG1vcnBoaW5nLlxuICAgICAqXG4gICAgICogQHBhcmFtIHtudW1iZXJ9IGNvdW50IC0gTnVtYmVyIG9mIHRleHR1cmVzIHRvIGJsZW5kLlxuICAgICAqIEByZXR1cm5zIHtTaGFkZXJ9IFNoYWRlci5cbiAgICAgKiBAcHJpdmF0ZVxuICAgICAqL1xuICAgIF9nZXRTaGFkZXIoY291bnQpIHtcblxuICAgICAgICBsZXQgc2hhZGVyID0gdGhpcy5zaGFkZXJDYWNoZVtjb3VudF07XG5cbiAgICAgICAgLy8gaWYgc2hhZGVyIGlzIG5vdCBpbiBjYWNoZSwgZ2VuZXJhdGUgb25lXG4gICAgICAgIGlmICghc2hhZGVyKSB7XG4gICAgICAgICAgICBjb25zdCBmcyA9IHRoaXMuX2dldEZyYWdtZW50U2hhZGVyKGNvdW50KTtcbiAgICAgICAgICAgIHNoYWRlciA9IGNyZWF0ZVNoYWRlckZyb21Db2RlKHRoaXMuZGV2aWNlLCB0ZXh0dXJlTW9ycGhWZXJ0ZXhTaGFkZXIsIGZzLCAndGV4dHVyZU1vcnBoJyArIGNvdW50KTtcbiAgICAgICAgICAgIHRoaXMuc2hhZGVyQ2FjaGVbY291bnRdID0gc2hhZGVyO1xuICAgICAgICB9XG5cbiAgICAgICAgcmV0dXJuIHNoYWRlcjtcbiAgICB9XG5cbiAgICBfdXBkYXRlVGV4dHVyZVJlbmRlclRhcmdldChyZW5kZXJUYXJnZXQsIHNyY1RleHR1cmVOYW1lKSB7XG5cbiAgICAgICAgY29uc3QgZGV2aWNlID0gdGhpcy5kZXZpY2U7XG5cbiAgICAgICAgLy8gYmxlbmQgY3VycmVudGx5IHNldCB1cCB0ZXh0dXJlcyB0byByZW5kZXIgdGFyZ2V0XG4gICAgICAgIGNvbnN0IHN1Ym1pdEJhdGNoID0gKHVzZWRDb3VudCwgYmxlbmRpbmcpID0+IHtcblxuICAgICAgICAgICAgLy8gZmFjdG9yc1xuICAgICAgICAgICAgdGhpcy5tb3JwaEZhY3Rvci5zZXRWYWx1ZSh0aGlzLl9zaGFkZXJNb3JwaFdlaWdodHMpO1xuXG4gICAgICAgICAgICAvLyBhbHBoYSBibGVuZGluZyAtIGZpcnN0IHBhc3MgZ2V0cyBub25lLCBmb2xsb3dpbmcgcGFzc2VzIGFyZSBhZGRpdGl2ZVxuICAgICAgICAgICAgZGV2aWNlLnNldEJsZW5kaW5nKGJsZW5kaW5nKTtcbiAgICAgICAgICAgIGlmIChibGVuZGluZykge1xuICAgICAgICAgICAgICAgIGRldmljZS5zZXRCbGVuZEZ1bmN0aW9uKEJMRU5ETU9ERV9PTkUsIEJMRU5ETU9ERV9PTkUpO1xuICAgICAgICAgICAgICAgIGRldmljZS5zZXRCbGVuZEVxdWF0aW9uKEJMRU5ERVFVQVRJT05fQUREKTtcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgLy8gcmVuZGVyIHF1YWQgd2l0aCBzaGFkZXIgZm9yIHJlcXVpcmVkIG51bWJlciBvZiB0ZXh0dXJlc1xuICAgICAgICAgICAgY29uc3Qgc2hhZGVyID0gdGhpcy5fZ2V0U2hhZGVyKHVzZWRDb3VudCk7XG4gICAgICAgICAgICBkcmF3UXVhZFdpdGhTaGFkZXIoZGV2aWNlLCByZW5kZXJUYXJnZXQsIHNoYWRlciwgdW5kZWZpbmVkLCB1bmRlZmluZWQsIGJsZW5kaW5nKTtcbiAgICAgICAgfTtcblxuICAgICAgICAvLyBzZXQgdXAgcGFyYW1ldGVycyBmb3IgYWN0aXZlIGJsZW5kIHRhcmdldHNcbiAgICAgICAgbGV0IHVzZWRDb3VudCA9IDA7XG4gICAgICAgIGxldCBibGVuZGluZyA9IGZhbHNlO1xuICAgICAgICBjb25zdCBjb3VudCA9IHRoaXMuX2FjdGl2ZVRhcmdldHMubGVuZ3RoO1xuICAgICAgICBmb3IgKGxldCBpID0gMDsgaSA8IGNvdW50OyBpKyspIHtcbiAgICAgICAgICAgIGNvbnN0IGFjdGl2ZVRhcmdldCA9IHRoaXMuX2FjdGl2ZVRhcmdldHNbaV07XG4gICAgICAgICAgICBjb25zdCB0ZXggPSBhY3RpdmVUYXJnZXQudGFyZ2V0W3NyY1RleHR1cmVOYW1lXTtcbiAgICAgICAgICAgIGlmICh0ZXgpIHtcblxuICAgICAgICAgICAgICAgIC8vIHRleHR1cmVcbiAgICAgICAgICAgICAgICB0aGlzWydtb3JwaEJsZW5kVGV4JyArIHVzZWRDb3VudF0uc2V0VmFsdWUodGV4KTtcblxuICAgICAgICAgICAgICAgIC8vIHdlaWdodFxuICAgICAgICAgICAgICAgIHRoaXMuX3NoYWRlck1vcnBoV2VpZ2h0c1t1c2VkQ291bnRdID0gYWN0aXZlVGFyZ2V0LndlaWdodDtcblxuICAgICAgICAgICAgICAgIC8vIHN1Ym1pdCBpZiBiYXRjaCBpcyBmdWxsXG4gICAgICAgICAgICAgICAgdXNlZENvdW50Kys7XG4gICAgICAgICAgICAgICAgaWYgKHVzZWRDb3VudCA+PSB0aGlzLm1heFN1Ym1pdENvdW50KSB7XG5cbiAgICAgICAgICAgICAgICAgICAgc3VibWl0QmF0Y2godXNlZENvdW50LCBibGVuZGluZyk7XG4gICAgICAgICAgICAgICAgICAgIHVzZWRDb3VudCA9IDA7XG4gICAgICAgICAgICAgICAgICAgIGJsZW5kaW5nID0gdHJ1ZTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cblxuICAgICAgICAvLyBsZWZ0b3ZlciBiYXRjaCwgb3IganVzdCB0byBjbGVhciB0ZXh0dXJlXG4gICAgICAgIGlmICh1c2VkQ291bnQgPiAwIHx8IChjb3VudCA9PT0gMCAmJiAhdGhpcy56ZXJvVGV4dHVyZXMpKSB7XG4gICAgICAgICAgICBzdWJtaXRCYXRjaCh1c2VkQ291bnQsIGJsZW5kaW5nKTtcbiAgICAgICAgfVxuICAgIH1cblxuICAgIF91cGRhdGVUZXh0dXJlTW9ycGgoKSB7XG5cbiAgICAgICAgY29uc3QgZGV2aWNlID0gdGhpcy5kZXZpY2U7XG5cbiAgICAgICAgRGVidWdHcmFwaGljcy5wdXNoR3B1TWFya2VyKGRldmljZSwgJ01vcnBoVXBkYXRlJyk7XG5cbiAgICAgICAgLy8gdXBkYXRlIHRleHR1cmVzIGlmIGFjdGl2ZSB0YXJnZXRzLCBvciBubyBhY3RpdmUgdGFyZ2V0cyBhbmQgdGV4dHVyZXMgbmVlZCB0byBiZSBjbGVhcmVkXG4gICAgICAgIGlmICh0aGlzLl9hY3RpdmVUYXJnZXRzLmxlbmd0aCA+IDAgfHwgIXRoaXMuemVyb1RleHR1cmVzKSB7XG5cbiAgICAgICAgICAgIC8vIGJsZW5kIG1vcnBoIHRhcmdldHMgaW50byByZW5kZXIgdGFyZ2V0c1xuICAgICAgICAgICAgdGhpcy5fdXBkYXRlVGV4dHVyZVJlbmRlclRhcmdldCh0aGlzLnJ0UG9zaXRpb25zLCAndGV4dHVyZVBvc2l0aW9ucycpO1xuICAgICAgICAgICAgdGhpcy5fdXBkYXRlVGV4dHVyZVJlbmRlclRhcmdldCh0aGlzLnJ0Tm9ybWFscywgJ3RleHR1cmVOb3JtYWxzJyk7XG5cbiAgICAgICAgICAgIC8vIHRleHR1cmVzIHdlcmUgY2xlYXJlZCBpZiBubyBhY3RpdmUgdGFyZ2V0c1xuICAgICAgICAgICAgdGhpcy56ZXJvVGV4dHVyZXMgPSB0aGlzLl9hY3RpdmVUYXJnZXRzLmxlbmd0aCA9PT0gMDtcbiAgICAgICAgfVxuXG4gICAgICAgIERlYnVnR3JhcGhpY3MucG9wR3B1TWFya2VyKGRldmljZSk7XG4gICAgfVxuXG4gICAgX3VwZGF0ZVZlcnRleE1vcnBoKCkge1xuXG4gICAgICAgIC8vIHByZXBhcmUgOCBzbG90cyBmb3IgcmVuZGVyaW5nLiB0aGVzZSBhcmUgc3VwcG9ydGVkIGNvbWJpbmF0aW9uczogUFBQUFBQUFAsIE5OTk5OTk5OLCBQUFBQTk5OTlxuICAgICAgICBjb25zdCBjb3VudCA9IHRoaXMubWF4U3VibWl0Q291bnQ7XG4gICAgICAgIGZvciAobGV0IGkgPSAwOyBpIDwgY291bnQ7IGkrKykge1xuICAgICAgICAgICAgdGhpcy5fc2hhZGVyTW9ycGhXZWlnaHRzW2ldID0gMDtcbiAgICAgICAgICAgIHRoaXMuX2FjdGl2ZVZlcnRleEJ1ZmZlcnNbaV0gPSBudWxsO1xuICAgICAgICB9XG5cbiAgICAgICAgbGV0IHBvc0luZGV4ID0gMDtcbiAgICAgICAgbGV0IG5ybUluZGV4ID0gdGhpcy5tb3JwaC5tb3JwaFBvc2l0aW9ucyA/IDQgOiAwO1xuICAgICAgICBmb3IgKGxldCBpID0gMDsgaSA8IHRoaXMuX2FjdGl2ZVRhcmdldHMubGVuZ3RoOyBpKyspIHtcbiAgICAgICAgICAgIGNvbnN0IHRhcmdldCA9IHRoaXMuX2FjdGl2ZVRhcmdldHNbaV0udGFyZ2V0O1xuXG4gICAgICAgICAgICBpZiAodGFyZ2V0Ll92ZXJ0ZXhCdWZmZXJQb3NpdGlvbnMpIHtcbiAgICAgICAgICAgICAgICB0aGlzLl9hY3RpdmVWZXJ0ZXhCdWZmZXJzW3Bvc0luZGV4XSA9IHRhcmdldC5fdmVydGV4QnVmZmVyUG9zaXRpb25zO1xuICAgICAgICAgICAgICAgIHRoaXMuX3NoYWRlck1vcnBoV2VpZ2h0c1twb3NJbmRleF0gPSB0aGlzLl9hY3RpdmVUYXJnZXRzW2ldLndlaWdodDtcbiAgICAgICAgICAgICAgICBwb3NJbmRleCsrO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICBpZiAodGFyZ2V0Ll92ZXJ0ZXhCdWZmZXJOb3JtYWxzKSB7XG4gICAgICAgICAgICAgICAgdGhpcy5fYWN0aXZlVmVydGV4QnVmZmVyc1tucm1JbmRleF0gPSB0YXJnZXQuX3ZlcnRleEJ1ZmZlck5vcm1hbHM7XG4gICAgICAgICAgICAgICAgdGhpcy5fc2hhZGVyTW9ycGhXZWlnaHRzW25ybUluZGV4XSA9IHRoaXMuX2FjdGl2ZVRhcmdldHNbaV0ud2VpZ2h0O1xuICAgICAgICAgICAgICAgIG5ybUluZGV4Kys7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBTZWxlY3RzIGFjdGl2ZSBtb3JwaCB0YXJnZXRzIGFuZCBwcmVwYXJlcyBtb3JwaCBmb3IgcmVuZGVyaW5nLiBDYWxsZWQgYXV0b21hdGljYWxseSBieVxuICAgICAqIHJlbmRlcmVyLlxuICAgICAqL1xuICAgIHVwZGF0ZSgpIHtcblxuICAgICAgICB0aGlzLl9kaXJ0eSA9IGZhbHNlO1xuICAgICAgICBjb25zdCB0YXJnZXRzID0gdGhpcy5tb3JwaC5fdGFyZ2V0cztcblxuICAgICAgICAvLyBjb2xsZWN0IGFjdGl2ZSB0YXJnZXRzLCByZXVzZSBvYmplY3RzIGluIF9hY3RpdmVUYXJnZXRzIGFycmF5IHRvIGF2b2lkIGFsbG9jYXRpb25zXG4gICAgICAgIGxldCBhY3RpdmVDb3VudCA9IDA7XG4gICAgICAgIGNvbnN0IGVwc2lsb24gPSAwLjAwMDAxO1xuICAgICAgICBmb3IgKGxldCBpID0gMDsgaSA8IHRhcmdldHMubGVuZ3RoOyBpKyspIHtcbiAgICAgICAgICAgIGNvbnN0IGFic1dlaWdodCA9IE1hdGguYWJzKHRoaXMuZ2V0V2VpZ2h0KGkpKTtcbiAgICAgICAgICAgIGlmIChhYnNXZWlnaHQgPiBlcHNpbG9uKSB7XG5cbiAgICAgICAgICAgICAgICAvLyBjcmVhdGUgbmV3IG9iamVjdCBpZiBuZWVkZWRcbiAgICAgICAgICAgICAgICBpZiAodGhpcy5fYWN0aXZlVGFyZ2V0cy5sZW5ndGggPD0gYWN0aXZlQ291bnQpIHtcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5fYWN0aXZlVGFyZ2V0c1thY3RpdmVDb3VudF0gPSB7fTtcbiAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgICBjb25zdCBhY3RpdmVUYXJnZXQgPSB0aGlzLl9hY3RpdmVUYXJnZXRzW2FjdGl2ZUNvdW50KytdO1xuICAgICAgICAgICAgICAgIGFjdGl2ZVRhcmdldC5hYnNXZWlnaHQgPSBhYnNXZWlnaHQ7XG4gICAgICAgICAgICAgICAgYWN0aXZlVGFyZ2V0LndlaWdodCA9IHRoaXMuZ2V0V2VpZ2h0KGkpO1xuICAgICAgICAgICAgICAgIGFjdGl2ZVRhcmdldC50YXJnZXQgPSB0YXJnZXRzW2ldO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIHRoaXMuX2FjdGl2ZVRhcmdldHMubGVuZ3RoID0gYWN0aXZlQ291bnQ7XG5cbiAgICAgICAgLy8gaWYgdGhlcmUncyBtb3JlIGFjdGl2ZSB0YXJnZXRzIHRoZW4gcmVuZGVyaW5nIHN1cHBvcnRzXG4gICAgICAgIGNvbnN0IG1heEFjdGl2ZVRhcmdldHMgPSB0aGlzLm1vcnBoLm1heEFjdGl2ZVRhcmdldHM7XG4gICAgICAgIGlmICh0aGlzLl9hY3RpdmVUYXJnZXRzLmxlbmd0aCA+IG1heEFjdGl2ZVRhcmdldHMpIHtcblxuICAgICAgICAgICAgLy8gc29ydCB0aGVtIGJ5IGFic1dlaWdodFxuICAgICAgICAgICAgdGhpcy5fYWN0aXZlVGFyZ2V0cy5zb3J0KGZ1bmN0aW9uIChsLCByKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIChsLmFic1dlaWdodCA8IHIuYWJzV2VpZ2h0KSA/IDEgOiAoci5hYnNXZWlnaHQgPCBsLmFic1dlaWdodCA/IC0xIDogMCk7XG4gICAgICAgICAgICB9KTtcblxuICAgICAgICAgICAgLy8gcmVtb3ZlIGV4Y2Vzc1xuICAgICAgICAgICAgdGhpcy5fYWN0aXZlVGFyZ2V0cy5sZW5ndGggPSBtYXhBY3RpdmVUYXJnZXRzO1xuICAgICAgICB9XG5cbiAgICAgICAgLy8gcHJlcGFyZSBmb3IgcmVuZGVyaW5nXG4gICAgICAgIGlmICh0aGlzLm1vcnBoLnVzZVRleHR1cmVNb3JwaCkge1xuICAgICAgICAgICAgdGhpcy5fdXBkYXRlVGV4dHVyZU1vcnBoKCk7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICB0aGlzLl91cGRhdGVWZXJ0ZXhNb3JwaCgpO1xuICAgICAgICB9XG4gICAgfVxufVxuXG5leHBvcnQgeyBNb3JwaEluc3RhbmNlIH07XG4iXSwibmFtZXMiOlsidGV4dHVyZU1vcnBoVmVydGV4U2hhZGVyIiwiTW9ycGhJbnN0YW5jZSIsImNvbnN0cnVjdG9yIiwibW9ycGgiLCJpbmNSZWZDb3VudCIsImRldmljZSIsIl93ZWlnaHRzIiwiX3dlaWdodE1hcCIsIk1hcCIsInYiLCJfdGFyZ2V0cyIsImxlbmd0aCIsInRhcmdldCIsIm5hbWUiLCJzZXQiLCJzZXRXZWlnaHQiLCJkZWZhdWx0V2VpZ2h0IiwiX2FjdGl2ZVRhcmdldHMiLCJ1c2VUZXh0dXJlTW9ycGgiLCJzaGFkZXJDYWNoZSIsIm1heFN1Ym1pdENvdW50IiwibWF4VGV4dHVyZXMiLCJfc2hhZGVyTW9ycGhXZWlnaHRzIiwiRmxvYXQzMkFycmF5IiwiY3JlYXRlUlQiLCJ0ZXh0dXJlVmFyIiwiZm9ybWF0IiwiX3JlbmRlclRleHR1cmVGb3JtYXQiLCJNb3JwaCIsIkZPUk1BVF9GTE9BVCIsIlBJWEVMRk9STUFUX1JHQkEzMkYiLCJQSVhFTEZPUk1BVF9SR0JBMTZGIiwiX2NyZWF0ZVRleHR1cmUiLCJSZW5kZXJUYXJnZXQiLCJjb2xvckJ1ZmZlciIsImRlcHRoIiwibW9ycGhQb3NpdGlvbnMiLCJydFBvc2l0aW9ucyIsIm1vcnBoTm9ybWFscyIsInJ0Tm9ybWFscyIsIl90ZXh0dXJlUGFyYW1zIiwibW9ycGhUZXh0dXJlV2lkdGgiLCJtb3JwaFRleHR1cmVIZWlnaHQiLCJpIiwic2NvcGUiLCJyZXNvbHZlIiwibW9ycGhGYWN0b3IiLCJ6ZXJvVGV4dHVyZXMiLCJfc2hhZGVyTW9ycGhXZWlnaHRzQSIsImJ1ZmZlciIsIl9zaGFkZXJNb3JwaFdlaWdodHNCIiwiX2FjdGl2ZVZlcnRleEJ1ZmZlcnMiLCJBcnJheSIsImRlc3Ryb3kiLCJzaGFkZXIiLCJkZWNSZWZDb3VudCIsInJlZkNvdW50IiwidGV4dHVyZVBvc2l0aW9ucyIsInRleHR1cmVOb3JtYWxzIiwiY2xvbmUiLCJfZ2V0V2VpZ2h0SW5kZXgiLCJrZXkiLCJpbmRleCIsImdldCIsInVuZGVmaW5lZCIsIkRlYnVnIiwiZXJyb3IiLCJnZXRXZWlnaHQiLCJ3ZWlnaHQiLCJhc3NlcnQiLCJfZGlydHkiLCJfZ2V0RnJhZ21lbnRTaGFkZXIiLCJudW1UZXh0dXJlcyIsImZyYWdtZW50U2hhZGVyIiwiX2dldFNoYWRlciIsImNvdW50IiwiZnMiLCJjcmVhdGVTaGFkZXJGcm9tQ29kZSIsIl91cGRhdGVUZXh0dXJlUmVuZGVyVGFyZ2V0IiwicmVuZGVyVGFyZ2V0Iiwic3JjVGV4dHVyZU5hbWUiLCJzdWJtaXRCYXRjaCIsInVzZWRDb3VudCIsImJsZW5kaW5nIiwic2V0VmFsdWUiLCJzZXRCbGVuZGluZyIsInNldEJsZW5kRnVuY3Rpb24iLCJCTEVORE1PREVfT05FIiwic2V0QmxlbmRFcXVhdGlvbiIsIkJMRU5ERVFVQVRJT05fQUREIiwiZHJhd1F1YWRXaXRoU2hhZGVyIiwiYWN0aXZlVGFyZ2V0IiwidGV4IiwiX3VwZGF0ZVRleHR1cmVNb3JwaCIsIkRlYnVnR3JhcGhpY3MiLCJwdXNoR3B1TWFya2VyIiwicG9wR3B1TWFya2VyIiwiX3VwZGF0ZVZlcnRleE1vcnBoIiwicG9zSW5kZXgiLCJucm1JbmRleCIsIl92ZXJ0ZXhCdWZmZXJQb3NpdGlvbnMiLCJfdmVydGV4QnVmZmVyTm9ybWFscyIsInVwZGF0ZSIsInRhcmdldHMiLCJhY3RpdmVDb3VudCIsImVwc2lsb24iLCJhYnNXZWlnaHQiLCJNYXRoIiwiYWJzIiwibWF4QWN0aXZlVGFyZ2V0cyIsInNvcnQiLCJsIiwiciJdLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7Ozs7OztBQVlBLE1BQU1BLHdCQUF3QixHQUFJLENBQUE7QUFDbEM7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsSUFBSyxDQUFBLENBQUE7O0FBTUwsTUFBTUMsYUFBYSxDQUFDO0VBTWhCQyxXQUFXLENBQUNDLEtBQUssRUFBRTtJQU1mLElBQUksQ0FBQ0EsS0FBSyxHQUFHQSxLQUFLLENBQUE7SUFDbEJBLEtBQUssQ0FBQ0MsV0FBVyxFQUFFLENBQUE7QUFDbkIsSUFBQSxJQUFJLENBQUNDLE1BQU0sR0FBR0YsS0FBSyxD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
