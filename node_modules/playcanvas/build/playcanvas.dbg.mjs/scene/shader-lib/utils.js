/**
 * @license
 * PlayCanvas Engine v1.58.0 revision 6672f604c (DEBUG PROFILER)
 * Copyright 2011-2022 PlayCanvas Ltd. All rights reserved.
 */
import { Shader } from '../../platform/graphics/shader.js';
import { ShaderUtils } from '../../platform/graphics/shader-utils.js';
import { shaderChunks } from './chunks/chunks.js';
import { getProgramLibrary } from './get-program-library.js';

function createShader(device, vsName, fsName, useTransformFeedback = false) {
  return new Shader(device, ShaderUtils.createDefinition(device, {
    name: `${vsName}_${fsName}`,
    vertexCode: shaderChunks[vsName],
    fragmentCode: shaderChunks[fsName],
    useTransformFeedback: useTransformFeedback
  }));
}

function createShaderFromCode(device, vsCode, fsCode, uniqueName, useTransformFeedback = false, fragmentPreamble = '') {
  const programLibrary = getProgramLibrary(device);
  let shader = programLibrary.getCachedShader(uniqueName);
  if (!shader) {
    shader = new Shader(device, ShaderUtils.createDefinition(device, {
      name: uniqueName,
      vertexCode: vsCode,
      fragmentCode: fsCode,
      fragmentPreamble: fragmentPreamble,
      useTransformFeedback: useTransformFeedback
    }));
    programLibrary.setCachedShader(uniqueName, shader);
  }
  return shader;
}
shaderChunks.createShader = createShader;
shaderChunks.createShaderFromCode = createShaderFromCode;

export { createShader, createShaderFromCode };
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoidXRpbHMuanMiLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uL3NyYy9zY2VuZS9zaGFkZXItbGliL3V0aWxzLmpzIl0sInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IFNoYWRlciB9IGZyb20gJy4uLy4uL3BsYXRmb3JtL2dyYXBoaWNzL3NoYWRlci5qcyc7XG5pbXBvcnQgeyBTaGFkZXJVdGlscyB9IGZyb20gJy4uLy4uL3BsYXRmb3JtL2dyYXBoaWNzL3NoYWRlci11dGlscy5qcyc7XG5pbXBvcnQgeyBzaGFkZXJDaHVua3MgfSBmcm9tICcuL2NodW5rcy9jaHVua3MuanMnO1xuaW1wb3J0IHsgZ2V0UHJvZ3JhbUxpYnJhcnkgfSBmcm9tICcuL2dldC1wcm9ncmFtLWxpYnJhcnkuanMnO1xuXG4vKiogQHR5cGVkZWYge2ltcG9ydCgnLi4vLi4vcGxhdGZvcm0vZ3JhcGhpY3MvZ3JhcGhpY3MtZGV2aWNlLmpzJykuR3JhcGhpY3NEZXZpY2V9IEdyYXBoaWNzRGV2aWNlICovXG5cbi8qKlxuICogQ3JlYXRlIGEgc2hhZGVyIGZyb20gbmFtZWQgc2hhZGVyIGNodW5rcy5cbiAqXG4gKiBAcGFyYW0ge0dyYXBoaWNzRGV2aWNlfSBkZXZpY2UgLSBUaGUgZ3JhcGhpY3MgZGV2aWNlLlxuICogQHBhcmFtIHtzdHJpbmd9IHZzTmFtZSAtIFRoZSB2ZXJ0ZXggc2hhZGVyIGNodW5rIG5hbWUuXG4gKiBAcGFyYW0ge3N0cmluZ30gZnNOYW1lIC0gVGhlIGZyYWdtZW50IHNoYWRlciBjaHVuayBuYW1lLlxuICogQHBhcmFtIHtib29sZWFufSBbdXNlVHJhbnNmb3JtRmVlZGJhY2tdIC0gV2hldGhlciB0byB1c2UgdHJhbnNmb3JtIGZlZWRiYWNrLiBEZWZhdWx0cyB0byBmYWxzZS5cbiAqIEByZXR1cm5zIHtTaGFkZXJ9IFRoZSBuZXdseSBjcmVhdGVkIHNoYWRlci5cbiAqL1xuZnVuY3Rpb24gY3JlYXRlU2hhZGVyKGRldmljZSwgdnNOYW1lLCBmc05hbWUsIHVzZVRyYW5zZm9ybUZlZWRiYWNrID0gZmFsc2UpIHtcbiAgICByZXR1cm4gbmV3IFNoYWRlcihkZXZpY2UsIFNoYWRlclV0aWxzLmNyZWF0ZURlZmluaXRpb24oZGV2aWNlLCB7XG4gICAgICAgIG5hbWU6IGAke3ZzTmFtZX1fJHtmc05hbWV9YCxcbiAgICAgICAgdmVydGV4Q29kZTogc2hhZGVyQ2h1bmtzW3ZzTmFtZV0sXG4gICAgICAgIGZyYWdtZW50Q29kZTogc2hhZGVyQ2h1bmtzW2ZzTmFtZV0sXG4gICAgICAgIHVzZVRyYW5zZm9ybUZlZWRiYWNrOiB1c2VUcmFuc2Zvcm1GZWVkYmFja1xuICAgIH0pKTtcbn1cblxuLyoqXG4gKiBDcmVhdGUgYSBzaGFkZXIgZnJvbSB0aGUgc3VwcGxpZWQgc291cmNlIGNvZGUuXG4gKlxuICogQHBhcmFtIHtHcmFwaGljc0RldmljZX0gZGV2aWNlIC0gVGhlIGdyYXBoaWNzIGRldmljZS5cbiAqIEBwYXJhbSB7c3RyaW5nfSB2c0NvZGUgLSBUaGUgdmVydGV4IHNoYWRlciBjb2RlLlxuICogQHBhcmFtIHtzdHJpbmd9IGZzQ29kZSAtIFRoZSBmcmFnbWVudCBzaGFkZXIgY29kZS5cbiAqIEBwYXJhbSB7c3RyaW5nfSB1bmlxdWVOYW1lIC0gVW5pcXVlIG5hbWUgZm9yIHRoZSBzaGFkZXIuXG4gKiBAcGFyYW0ge2Jvb2xlYW59IFt1c2VUcmFuc2Zvcm1GZWVkYmFja10gLSBXaGV0aGVyIHRvIHVzZSB0cmFuc2Zvcm0gZmVlZGJhY2suIERlZmF1bHRzIHRvIGZhbHNlLlxuICogQHBhcmFtIHtzdHJpbmd9IFtmcmFnbWVudFByZWFtYmxlXSAtIEFuIG9wdGlvbmFsICdwcmVhbWJsZScgc3RyaW5nIGZvciB0aGUgZnJhZ21lbnQgc2hhZGVyLiBEZWZhdWx0c1xuICogdG8gJycuXG4gKiBAcmV0dXJucyB7U2hhZGVyfSBUaGUgbmV3bHkgY3JlYXRlZCBzaGFkZXIuXG4gKi9cbmZ1bmN0aW9uIGNyZWF0ZVNoYWRlckZyb21Db2RlKGRldmljZSwgdnNDb2RlLCBmc0NvZGUsIHVuaXF1ZU5hbWUsIHVzZVRyYW5zZm9ybUZlZWRiYWNrID0gZmFsc2UsIGZyYWdtZW50UHJlYW1ibGUgPSAnJykge1xuICAgIGNvbnN0IHByb2dyYW1MaWJyYXJ5ID0gZ2V0UHJvZ3JhbUxpYnJhcnkoZGV2aWNlKTtcbiAgICBsZXQgc2hhZGVyID0gcHJvZ3JhbUxpYnJhcnkuZ2V0Q2FjaGVkU2hhZGVyKHVuaXF1ZU5hbWUpO1xuICAgIGlmICghc2hhZGVyKSB7XG4gICAgICAgIHNoYWRlciA9IG5ldyBTaGFkZXIoZGV2aWNlLCBTaGFkZXJVdGlscy5jcmVhdGVEZWZpbml0aW9uKGRldmljZSwge1xuICAgICAgICAgICAgbmFtZTogdW5pcXVlTmFtZSxcbiAgICAgICAgICAgIHZlcnRleENvZGU6IHZzQ29kZSxcbiAgICAgICAgICAgIGZyYWdtZW50Q29kZTogZnNDb2RlLFxuICAgICAgICAgICAgZnJhZ21lbnRQcmVhbWJsZTogZnJhZ21lbnRQcmVhbWJsZSxcbiAgICAgICAgICAgIHVzZVRyYW5zZm9ybUZlZWRiYWNrOiB1c2VUcmFuc2Zvcm1GZWVkYmFja1xuICAgICAgICB9KSk7XG4gICAgICAgIHByb2dyYW1MaWJyYXJ5LnNldENhY2hlZFNoYWRlcih1bmlxdWVOYW1lLCBzaGFkZXIpO1xuICAgIH1cbiAgICByZXR1cm4gc2hhZGVyO1xufVxuXG5zaGFkZXJDaHVua3MuY3JlYXRlU2hhZGVyID0gY3JlYXRlU2hhZGVyO1xuc2hhZGVyQ2h1bmtzLmNyZWF0ZVNoYWRlckZyb21Db2RlID0gY3JlYXRlU2hhZGVyRnJvbUNvZGU7XG5cbmV4cG9ydCB7IGNyZWF0ZVNoYWRlciwgY3JlYXRlU2hhZGVyRnJvbUNvZGUgfTtcbiJdLCJuYW1lcyI6WyJjcmVhdGVTaGFkZXIiLCJkZXZpY2UiLCJ2c05hbWUiLCJmc05hbWUiLCJ1c2VUcmFuc2Zvcm1GZWVkYmFjayIsIlNoYWRlciIsIlNoYWRlclV0aWxzIiwiY3JlYXRlRGVmaW5pdGlvbiIsIm5hbWUiLCJ2ZXJ0ZXhDb2RlIiwic2hhZGVyQ2h1bmtzIiwiZnJhZ21lbnRDb2RlIiwiY3JlYXRlU2hhZGVyRnJvbUNvZGUiLCJ2c0NvZGUiLCJmc0NvZGUiLCJ1bmlxdWVOYW1lIiwiZnJhZ21lbnRQcmVhbWJsZSIsInByb2dyYW1MaWJyYXJ5IiwiZ2V0UHJvZ3JhbUxpYnJhcnkiLCJzaGFkZXIiLCJnZXRDYWNoZWRTaGFkZXIiLCJzZXRDYWNoZWRTaGFkZXIiXSwibWFwcGluZ3MiOiI7Ozs7Ozs7Ozs7QUFnQkEsU0FBU0EsWUFBWSxDQUFDQyxNQUFNLEVBQUVDLE1BQU0sRUFBRUMsTUFBTSxFQUFFQyxvQkFBb0IsR0FBRyxLQUFLLEVBQUU7RUFDeEUsT0FBTyxJQUFJQyxNQUFNLENBQUNKLE1BQU0sRUFBRUssV0FBVyxDQUFDQyxnQkFBZ0IsQ0FBQ04sTUFBTSxFQUFFO0FBQzNETyxJQUFBQSxJQUFJLEVBQUcsQ0FBQSxFQUFFTixNQUFPLENBQUEsQ0FBQSxFQUFHQyxNQUFPLENBQUMsQ0FBQTtBQUMzQk0sSUFBQUEsVUFBVSxFQUFFQyxZQUFZLENBQUNSLE1BQU0sQ0FBQztBQUNoQ1MsSUFBQUEsWUFBWSxFQUFFRCxZQUFZLENBQUNQLE1BQU0sQ0FBQztBQUNsQ0MsSUFBQUEsb0JBQW9CLEVBQUVBLG9CQUFBQTtBQUMxQixHQUFDLENBQUMsQ0FBQyxDQUFBO0FBQ1AsQ0FBQTs7QUFjQSxTQUFTUSxvQkFBb0IsQ0FBQ1gsTUFBTSxFQUFFWSxNQUFNLEVBQUVDLE1BQU0sRUFBRUMsVUFBVSxFQUFFWCxvQkFBb0IsR0FBRyxLQUFLLEVBQUVZLGdCQUFnQixHQUFHLEVBQUUsRUFBRTtBQUNuSCxFQUFBLE1BQU1DLGNBQWMsR0FBR0MsaUJBQWlCLENBQUNqQixNQUFNLENBQUMsQ0FBQTtBQUNoRCxFQUFBLElBQUlrQixNQUFNLEdBQUdGLGNBQWMsQ0FBQ0csZUFBZSxDQUFDTCxVQUFVLENBQUMsQ0FBQTtFQUN2RCxJQUFJLENBQUNJLE1BQU0sRUFBRTtJQUNUQSxNQUFNLEdBQUcsSUFBSWQsTUFBTSxDQUFDSixNQUFNLEVBQUVLLFdBQVcsQ0FBQ0MsZ0JBQWdCLENBQUNOLE1BQU0sRUFBRTtBQUM3RE8sTUFBQUEsSUFBSSxFQUFFTyxVQUFVO0FBQ2hCTixNQUFBQSxVQUFVLEVBQUVJLE1BQU07QUFDbEJGLE1BQUFBLFlBQVksRUFBRUcsTUFBTTtBQUNwQkUsTUFBQUEsZ0JBQWdCLEVBQUVBLGdCQUFnQjtBQUNsQ1osTUFBQUEsb0JBQW9CLEVBQUVBLG9CQUFBQTtBQUMxQixLQUFDLENBQUMsQ0FBQyxDQUFBO0FBQ0hhLElBQUFBLGNBQWMsQ0FBQ0ksZUFBZSxDQUFDTixVQUFVLEVBQUVJLE1BQU0sQ0FBQyxDQUFBO0FBQ3RELEdBQUE7QUFDQSxFQUFBLE9BQU9BLE1BQU0sQ0FBQTtBQUNqQixDQUFBO0FBRUFULFlBQVksQ0FBQ1YsWUFBWSxHQUFHQSxZQUFZLENBQUE7QUFDeENVLFlBQVksQ0FBQ0Usb0JBQW9CLEdBQUdBLG9CQUFvQjs7OzsifQ==
