/**
 * @license
 * PlayCanvas Engine v1.58.0 revision 6672f604c (DEBUG PROFILER)
 * Copyright 2011-2022 PlayCanvas Ltd. All rights reserved.
 */
import { Debug } from '../core/debug.js';
import { math } from '../core/math/math.js';
import { Mat4 } from '../core/math/mat4.js';
import { PIXELFORMAT_RGBA32F, FILTER_NEAREST } from '../platform/graphics/constants.js';
import { Texture } from '../platform/graphics/texture.js';

const _invMatrix = new Mat4();

class SkinInstance {

  constructor(skin) {
    this.bones = void 0;
    this._dirty = true;

    this._rootBone = null;

    this._skinUpdateIndex = -1;

    this._updateBeforeCull = true;
    if (skin) {
      this.initSkin(skin);
    }
  }
  set rootBone(rootBone) {
    this._rootBone = rootBone;
  }
  get rootBone() {
    return this._rootBone;
  }
  init(device, numBones) {
    if (device.supportsBoneTextures) {
      const numPixels = numBones * 3;
      let width = Math.ceil(Math.sqrt(numPixels));
      width = math.roundUp(width, 3);
      const height = Math.ceil(numPixels / width);
      this.boneTexture = new Texture(device, {
        width: width,
        height: height,
        format: PIXELFORMAT_RGBA32F,
        mipmaps: false,
        minFilter: FILTER_NEAREST,
        magFilter: FILTER_NEAREST,
        name: 'skin'
      });
      this.matrixPalette = this.boneTexture.lock();
    } else {
      this.matrixPalette = new Float32Array(numBones * 12);
    }
  }
  destroy() {
    if (this.boneTexture) {
      this.boneTexture.destroy();
      this.boneTexture = null;
    }
  }

  resolve(rootBone, entity) {
    this.rootBone = rootBone;

    const skin = this.skin;
    const bones = [];
    for (let j = 0; j < skin.boneNames.length; j++) {
      const boneName = skin.boneNames[j];
      let bone = rootBone.findByName(boneName);
      if (!bone) {
        Debug.error(`Failed to find bone [${boneName}] in the entity hierarchy, RenderComponent on ${entity.name}, rootBone: ${rootBone.name}`);
        bone = entity;
      }
      bones.push(bone);
    }
    this.bones = bones;
  }
  initSkin(skin) {
    this.skin = skin;

    this.bones = [];
    const numBones = skin.inverseBindPose.length;
    this.init(skin.device, numBones);
    this.matrices = [];
    for (let i = 0; i < numBones; i++) {
      this.matrices[i] = new Mat4();
    }
  }
  uploadBones(device) {
    if (device.supportsBoneTextures) {
      this.boneTexture.lock();
      this.boneTexture.unlock();
    }
  }
  _updateMatrices(rootNode, skinUpdateIndex) {
    if (this._skinUpdateIndex !== skinUpdateIndex) {
      this._skinUpdateIndex = skinUpdateIndex;
      _invMatrix.copy(rootNode.getWorldTransform()).invert();
      for (let i = this.bones.length - 1; i >= 0; i--) {
        this.matrices[i].mulAffine2(_invMatrix, this.bones[i].getWorldTransform());
        this.matrices[i].mulAffine2(this.matrices[i], this.skin.inverseBindPose[i]);
      }
    }
  }

  updateMatrices(rootNode, skinUpdateIndex) {
    if (this._updateBeforeCull) {
      this._updateMatrices(rootNode, skinUpdateIndex);
    }
  }
  updateMatrixPalette(rootNode, skinUpdateIndex) {
    this._updateMatrices(rootNode, skinUpdateIndex);

    const mp = this.matrixPalette;
    const count = this.bones.length;
    for (let i = 0; i < count; i++) {
      const pe = this.matrices[i].data;

      const base = i * 12;
      mp[base] = pe[0];
      mp[base + 1] = pe[4];
      mp[base + 2] = pe[8];
      mp[base + 3] = pe[12];
      mp[base + 4] = pe[1];
      mp[base + 5] = pe[5];
      mp[base + 6] = pe[9];
      mp[base + 7] = pe[13];
      mp[base + 8] = pe[2];
      mp[base + 9] = pe[6];
      mp[base + 10] = pe[10];
      mp[base + 11] = pe[14];
    }
    this.uploadBones(this.skin.device);
  }
}

export { SkinInstance };
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoic2tpbi1pbnN0YW5jZS5qcyIsInNvdXJjZXMiOlsiLi4vLi4vLi4vc3JjL3NjZW5lL3NraW4taW5zdGFuY2UuanMiXSwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgRGVidWcgfSBmcm9tICcuLi9jb3JlL2RlYnVnLmpzJztcbmltcG9ydCB7IG1hdGggfSBmcm9tICcuLi9jb3JlL21hdGgvbWF0aC5qcyc7XG5pbXBvcnQgeyBNYXQ0IH0gZnJvbSAnLi4vY29yZS9tYXRoL21hdDQuanMnO1xuXG5pbXBvcnQgeyBGSUxURVJfTkVBUkVTVCwgUElYRUxGT1JNQVRfUkdCQTMyRiB9IGZyb20gJy4uL3BsYXRmb3JtL2dyYXBoaWNzL2NvbnN0YW50cy5qcyc7XG5pbXBvcnQgeyBUZXh0dXJlIH0gZnJvbSAnLi4vcGxhdGZvcm0vZ3JhcGhpY3MvdGV4dHVyZS5qcyc7XG5cbi8qKiBAdHlwZWRlZiB7aW1wb3J0KCcuL2dyYXBoLW5vZGUuanMnKS5HcmFwaE5vZGV9IEdyYXBoTm9kZSAqL1xuLyoqIEB0eXBlZGVmIHtpbXBvcnQoJy4vc2tpbi5qcycpLlNraW59IFNraW4gKi9cblxuY29uc3QgX2ludk1hdHJpeCA9IG5ldyBNYXQ0KCk7XG5cbi8qKlxuICogQSBza2luIGluc3RhbmNlIGlzIHJlc3BvbnNpYmxlIGZvciBnZW5lcmF0aW5nIHRoZSBtYXRyaXggcGFsZXR0ZSB0aGF0IGlzIHVzZWQgdG8gc2tpbiB2ZXJ0aWNlc1xuICogZnJvbSBvYmplY3Qgc3BhY2UgdG8gd29ybGQgc3BhY2UuXG4gKi9cbmNsYXNzIFNraW5JbnN0YW5jZSB7XG4gICAgLyoqXG4gICAgICogQW4gYXJyYXkgb2Ygbm9kZXMgcmVwcmVzZW50aW5nIGVhY2ggYm9uZSBpbiB0aGlzIHNraW4gaW5zdGFuY2UuXG4gICAgICpcbiAgICAgKiBAdHlwZSB7R3JhcGhOb2RlW119XG4gICAgICovXG4gICAgYm9uZXM7XG5cbiAgICAvKipcbiAgICAgKiBDcmVhdGUgYSBuZXcgU2tpbkluc3RhbmNlIGluc3RhbmNlLlxuICAgICAqXG4gICAgICogQHBhcmFtIHtTa2lufSBza2luIC0gVGhlIHNraW4gdGhhdCB3aWxsIHByb3ZpZGUgdGhlIGludmVyc2UgYmluZCBwb3NlIG1hdHJpY2VzIHRvIGdlbmVyYXRlXG4gICAgICogdGhlIGZpbmFsIG1hdHJpeCBwYWxldHRlLlxuICAgICAqL1xuICAgIGNvbnN0cnVjdG9yKHNraW4pIHtcbiAgICAgICAgdGhpcy5fZGlydHkgPSB0cnVlO1xuXG4gICAgICAgIC8vIG9wdGlvbmFsIHJvb3QgYm9uZSAtIHVzZWQgZm9yIGNhY2hlIGxvb2t1cCwgbm90IHVzZWQgZm9yIHNraW5uaW5nXG4gICAgICAgIHRoaXMuX3Jvb3RCb25lID0gbnVsbDtcblxuICAgICAgICAvLyBzZXF1ZW50aWFsIGluZGV4IG9mIHdoZW4gdGhlIGJvbmUgdXBkYXRlIHdhcyBwZXJmb3JtZWQgdGhlIGxhc3QgdGltZVxuICAgICAgICB0aGlzLl9za2luVXBkYXRlSW5kZXggPSAtMTtcblxuICAgICAgICAvLyB0cnVlIGlmIGJvbmVzIG5lZWQgdG8gYmUgdXBkYXRlZCBiZWZvcmUgdGhlIGZydXN0dW0gY3VsbGluZyAoYm9uZXMgYXJlIG5lZWRlZCB0byB1cGRhdGUgYm91bmRzIG9mIHRoZSBNZXNoSW5zdGFuY2UpXG4gICAgICAgIHRoaXMuX3VwZGF0ZUJlZm9yZUN1bGwgPSB0cnVlO1xuXG4gICAgICAgIGlmIChza2luKSB7XG4gICAgICAgICAgICB0aGlzLmluaXRTa2luKHNraW4pO1xuICAgICAgICB9XG4gICAgfVxuXG4gICAgc2V0IHJvb3RCb25lKHJvb3RCb25lKSB7XG4gICAgICAgIHRoaXMuX3Jvb3RCb25lID0gcm9vdEJvbmU7XG4gICAgfVxuXG4gICAgZ2V0IHJvb3RCb25lKCkge1xuICAgICAgICByZXR1cm4gdGhpcy5fcm9vdEJvbmU7XG4gICAgfVxuXG4gICAgaW5pdChkZXZpY2UsIG51bUJvbmVzKSB7XG5cbiAgICAgICAgaWYgKGRldmljZS5zdXBwb3J0c0JvbmVUZXh0dXJlcykge1xuXG4gICAgICAgICAgICAvLyB0ZXh0dXJlIHNpemUgLSByb3VnaGx5IHNxdWFyZSB0aGF0IGZpdHMgYWxsIGJvbmVzLCB3aWR0aCBpcyBtdWx0aXBseSBvZiAzIHRvIHNpbXBsaWZ5IHNoYWRlciBtYXRoXG4gICAgICAgICAgICBjb25zdCBudW1QaXhlbHMgPSBudW1Cb25lcyAqIDM7XG4gICAgICAgICAgICBsZXQgd2lkdGggPSBNYXRoLmNlaWwoTWF0aC5zcXJ0KG51bVBpeGVscykpO1xuICAgICAgICAgICAgd2lkdGggPSBtYXRoLnJvdW5kVXAod2lkdGgsIDMpO1xuICAgICAgICAgICAgY29uc3QgaGVpZ2h0ID0gTWF0aC5jZWlsKG51bVBpeGVscyAvIHdpZHRoKTtcblxuICAgICAgICAgICAgdGhpcy5ib25lVGV4dHVyZSA9IG5ldyBUZXh0dXJlKGRldmljZSwge1xuICAgICAgICAgICAgICAgIHdpZHRoOiB3aWR0aCxcbiAgICAgICAgICAgICAgICBoZWlnaHQ6IGhlaWdodCxcbiAgICAgICAgICAgICAgICBmb3JtYXQ6IFBJWEVMRk9STUFUX1JHQkEzMkYsXG4gICAgICAgICAgICAgICAgbWlwbWFwczogZmFsc2UsXG4gICAgICAgICAgICAgICAgbWluRmlsdGVyOiBGSUxURVJfTkVBUkVTVCxcbiAgICAgICAgICAgICAgICBtYWdGaWx0ZXI6IEZJTFRFUl9ORUFSRVNULFxuICAgICAgICAgICAgICAgIG5hbWU6ICdza2luJ1xuICAgICAgICAgICAgfSk7XG5cbiAgICAgICAgICAgIHRoaXMubWF0cml4UGFsZXR0ZSA9IHRoaXMuYm9uZVRleHR1cmUubG9jaygpO1xuXG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICB0aGlzLm1hdHJpeFBhbGV0dGUgPSBuZXcgRmxvYXQzMkFycmF5KG51bUJvbmVzICogMTIpO1xuICAgICAgICB9XG4gICAgfVxuXG4gICAgZGVzdHJveSgpIHtcblxuICAgICAgICBpZiAodGhpcy5ib25lVGV4dHVyZSkge1xuICAgICAgICAgICAgdGhpcy5ib25lVGV4dHVyZS5kZXN0cm95KCk7XG4gICAgICAgICAgICB0aGlzLmJvbmVUZXh0dXJlID0gbnVsbDtcbiAgICAgICAgfVxuICAgIH1cblxuICAgIC8vIHJlc29sdmVkIHNraW4gYm9uZXMgdG8gYSBoaWVyYXJjaHkgd2l0aCB0aGUgcm9vdEJvbmUgYXQgaXRzIHJvb3QuXG4gICAgLy8gZW50aXR5IHBhcmFtZXRlciBzcGVjaWZpZXMgdGhlIGVudGl0eSB1c2VkIGlmIHRoZSBib25lIG1hdGNoIGlzIG5vdCBmb3VuZCBpbiB0aGUgaGllcmFyY2h5IC0gdXN1YWxseSB0aGUgZW50aXR5IHRoZSByZW5kZXIgY29tcG9uZW50IGlzIGF0dGFjaGVkIHRvXG4gICAgcmVzb2x2ZShyb290Qm9uZSwgZW50aXR5KSB7XG5cbiAgICAgICAgdGhpcy5yb290Qm9uZSA9IHJvb3RCb25lO1xuXG4gICAgICAgIC8vIFJlc29sdmUgYm9uZSBJRHMgdG8gYWN0dWFsIGdyYXBoIG5vZGVzIG9mIHRoZSBoaWVyYXJjaHlcbiAgICAgICAgY29uc3Qgc2tpbiA9IHRoaXMuc2tpbjtcbiAgICAgICAgY29uc3QgYm9uZXMgPSBbXTtcbiAgICAgICAgZm9yIChsZXQgaiA9IDA7IGogPCBza2luLmJvbmVOYW1lcy5sZW5ndGg7IGorKykge1xuICAgICAgICAgICAgY29uc3QgYm9uZU5hbWUgPSBza2luLmJvbmVOYW1lc1tqXTtcbiAgICAgICAgICAgIGxldCBib25lID0gcm9vdEJvbmUuZmluZEJ5TmFtZShib25lTmFtZSk7XG5cbiAgICAgICAgICAgIGlmICghYm9uZSkge1xuICAgICAgICAgICAgICAgIERlYnVnLmVycm9yKGBGYWlsZWQgdG8gZmluZCBib25lIFske2JvbmVOYW1lfV0gaW4gdGhlIGVudGl0eSBoaWVyYXJjaHksIFJlbmRlckNvbXBvbmVudCBvbiAke2VudGl0eS5uYW1lfSwgcm9vdEJvbmU6ICR7cm9vdEJvbmUubmFtZX1gKTtcbiAgICAgICAgICAgICAgICBib25lID0gZW50aXR5O1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICBib25lcy5wdXNoKGJvbmUpO1xuICAgICAgICB9XG4gICAgICAgIHRoaXMuYm9uZXMgPSBib25lcztcbiAgICB9XG5cbiAgICBpbml0U2tpbihza2luKSB7XG5cbiAgICAgICAgdGhpcy5za2luID0gc2tpbjtcblxuICAgICAgICAvLyBVbmlxdWUgcGVyIGNsb25lXG4gICAgICAgIHRoaXMuYm9uZXMgPSBbXTtcblxuICAgICAgICBjb25zdCBudW1Cb25lcyA9IHNraW4uaW52ZXJzZUJpbmRQb3NlLmxlbmd0aDtcbiAgICAgICAgdGhpcy5pbml0KHNraW4uZGV2aWNlLCBudW1Cb25lcyk7XG5cbiAgICAgICAgdGhpcy5tYXRyaWNlcyA9IFtdO1xuICAgICAgICBmb3IgKGxldCBpID0gMDsgaSA8IG51bUJvbmVzOyBpKyspIHtcbiAgICAgICAgICAgIHRoaXMubWF0cmljZXNbaV0gPSBuZXcgTWF0NCgpO1xuICAgICAgICB9XG4gICAgfVxuXG4gICAgdXBsb2FkQm9uZXMoZGV2aWNlKSB7XG5cbiAgICAgICAgLy8gVE9ETzogdGhpcyBpcyBhIGJpdCBzdHJhbmdlIGxvb2tpbmcuIENoYW5nZSB0aGUgVGV4dHVyZSBBUEkgdG8gZG8gYSByZXVwbG9hZFxuICAgICAgICBpZiAoZGV2aWNlLnN1cHBvcnRzQm9uZVRleHR1cmVzKSB7XG4gICAgICAgICAgICB0aGlzLmJvbmVUZXh0dXJlLmxvY2soKTtcbiAgICAgICAgICAgIHRoaXMuYm9uZVRleHR1cmUudW5sb2NrKCk7XG4gICAgICAgIH1cbiAgICB9XG5cbiAgICBfdXBkYXRlTWF0cmljZXMocm9vdE5vZGUsIHNraW5VcGRhdGVJbmRleCkge1xuXG4gICAgICAgIC8vIGlmIG5vdCBhbHJlYWR5IHVwIHRvIGRhdGVcbiAgICAgICAgaWYgKHRoaXMuX3NraW5VcGRhdGVJbmRleCAhPT0gc2tpblVwZGF0ZUluZGV4KSB7XG4gICAgICAgICAgICB0aGlzLl9za2luVXBkYXRlSW5kZXggPSBza2luVXBkYXRlSW5kZXg7XG5cbiAgICAgICAgICAgIF9pbnZNYXRyaXguY29weShyb290Tm9kZS5nZXRXb3JsZFRyYW5zZm9ybSgpKS5pbnZlcnQoKTtcbiAgICAgICAgICAgIGZvciAobGV0IGkgPSB0aGlzLmJvbmVzLmxlbmd0aCAtIDE7IGkgPj0gMDsgaS0tKSB7XG4gICAgICAgICAgICAgICAgdGhpcy5tYXRyaWNlc1tpXS5tdWxBZmZpbmUyKF9pbnZNYXRyaXgsIHRoaXMuYm9uZXNbaV0uZ2V0V29ybGRUcmFuc2Zvcm0oKSk7IC8vIHdvcmxkIHNwYWNlIC0+IHJvb3ROb2RlIHNwYWNlXG4gICAgICAgICAgICAgICAgdGhpcy5tYXRyaWNlc1tpXS5tdWxBZmZpbmUyKHRoaXMubWF0cmljZXNbaV0sIHRoaXMuc2tpbi5pbnZlcnNlQmluZFBvc2VbaV0pOyAvLyByb290Tm9kZSBzcGFjZSAtPiBiaW5kIHNwYWNlXG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICB9XG5cbiAgICB1cGRhdGVNYXRyaWNlcyhyb290Tm9kZSwgc2tpblVwZGF0ZUluZGV4KSB7XG5cbiAgICAgICAgaWYgKHRoaXMuX3VwZGF0ZUJlZm9yZUN1bGwpIHtcbiAgICAgICAgICAgIHRoaXMuX3VwZGF0ZU1hdHJpY2VzKHJvb3ROb2RlLCBza2luVXBkYXRlSW5kZXgpO1xuICAgICAgICB9XG4gICAgfVxuXG4gICAgdXBkYXRlTWF0cml4UGFsZXR0ZShyb290Tm9kZSwgc2tpblVwZGF0ZUluZGV4KSB7XG5cbiAgICAgICAgLy8gbWFrZSBzdXJlIG1hdHJpY2VzIGFyZSB1cCB0byBkYXRlXG4gICAgICAgIHRoaXMuX3VwZGF0ZU1hdHJpY2VzKHJvb3ROb2RlLCBza2luVXBkYXRlSW5kZXgpO1xuXG4gICAgICAgIC8vIGNvcHkgbWF0cmljZXMgdG8gcGFsZXR0ZVxuICAgICAgICBjb25zdCBtcCA9IHRoaXMubWF0cml4UGFsZXR0ZTtcbiAgICAgICAgY29uc3QgY291bnQgPSB0aGlzLmJvbmVzLmxlbmd0aDtcbiAgICAgICAgZm9yIChsZXQgaSA9IDA7IGkgPCBjb3VudDsgaSsrKSB7XG4gICAgICAgICAgICBjb25zdCBwZSA9IHRoaXMubWF0cmljZXNbaV0uZGF0YTtcblxuICAgICAgICAgICAgLy8gQ29weSB0aGUgbWF0cml4IGludG8gdGhlIHBhbGV0dGUsIHJlYWR5IHRvIGJlIHNlbnQgdG8gdGhlIHZlcnRleCBzaGFkZXIsIHRyYW5zcG9zZSBtYXRyaXggZnJvbSA0eDQgdG8gNHgzIGZvcm1hdCBhcyB3ZWxsXG4gICAgICAgICAgICBjb25zdCBiYXNlID0gaSAqIDEyO1xuICAgICAgICAgICAgbXBbYmFzZV0gPSBwZVswXTtcbiAgICAgICAgICAgIG1wW2Jhc2UgKyAxXSA9IHBlWzRdO1xuICAgICAgICAgICAgbXBbYmFzZSArIDJdID0gcGVbOF07XG4gICAgICAgICAgICBtcFtiYXNlICsgM10gPSBwZVsxMl07XG4gICAgICAgICAgICBtcFtiYXNlICsgNF0gPSBwZVsxXTtcbiAgICAgICAgICAgIG1wW2Jhc2UgKyA1XSA9IHBlWzVdO1xuICAgICAgICAgICAgbXBbYmFzZSArIDZdID0gcGVbOV07XG4gICAgICAgICAgICBtcFtiYXNlICsgN10gPSBwZVsxM107XG4gICAgICAgICAgICBtcFtiYXNlICsgOF0gPSBwZVsyXTtcbiAgICAgICAgICAgIG1wW2Jhc2UgKyA5XSA9IHBlWzZdO1xuICAgICAgICAgICAgbXBbYmFzZSArIDEwXSA9IHBlWzEwXTtcbiAgICAgICAgICAgIG1wW2Jhc2UgKyAxMV0gPSBwZVsxNF07XG4gICAgICAgIH1cblxuICAgICAgICB0aGlzLnVwbG9hZEJvbmVzKHRoaXMuc2tpbi5kZXZpY2UpO1xuICAgIH1cbn1cblxuZXhwb3J0IHsgU2tpbkluc3RhbmNlIH07XG4iXSwibmFtZXMiOlsiX2ludk1hdHJpeCIsIk1hdDQiLCJTa2luSW5zdGFuY2UiLCJjb25zdHJ1Y3RvciIsInNraW4iLCJib25lcyIsIl9kaXJ0eSIsIl9yb290Qm9uZSIsIl9za2luVXBkYXRlSW5kZXgiLCJfdXBkYXRlQmVmb3JlQ3VsbCIsImluaXRTa2luIiwicm9vdEJvbmUiLCJpbml0IiwiZGV2aWNlIiwibnVtQm9uZXMiLCJzdXBwb3J0c0JvbmVUZXh0dXJlcyIsIm51bVBpeGVscyIsIndpZHRoIiwiTWF0aCIsImNlaWwiLCJzcXJ0IiwibWF0aCIsInJvdW5kVXAiLCJoZWlnaHQiLCJib25lVGV4dHVyZSIsIlRleHR1cmUiLCJmb3JtYXQiLCJQSVhFTEZPUk1BVF9SR0JBMzJGIiwibWlwbWFwcyIsIm1pbkZpbHRlciIsIkZJTFRFUl9ORUFSRVNUIiwibWFnRmlsdGVyIiwibmFtZSIsIm1hdHJpeFBhbGV0dGUiLCJsb2NrIiwiRmxvYXQzMkFycmF5IiwiZGVzdHJveSIsInJlc29sdmUiLCJlbnRpdHkiLCJqIiwiYm9uZU5hbWVzIiwibGVuZ3RoIiwiYm9uZU5hbWUiLCJib25lIiwiZmluZEJ5TmFtZSIsIkRlYnVnIiwiZXJyb3IiLCJwdXNoIiwiaW52ZXJzZUJpbmRQb3NlIiwibWF0cmljZXMiLCJpIiwidXBsb2FkQm9uZXMiLCJ1bmxvY2siLCJfdXBkYXRlTWF0cmljZXMiLCJyb290Tm9kZSIsInNraW5VcGRhdGVJbmRleCIsImNvcHkiLCJnZXRXb3JsZFRyYW5zZm9ybSIsImludmVydCIsIm11bEFmZmluZTIiLCJ1cGRhdGVNYXRyaWNlcyIsInVwZGF0ZU1hdHJpeFBhbGV0dGUiLCJtcCIsImNvdW50IiwicGUiLCJkYXRhIiwiYmFzZSJdLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7Ozs7QUFVQSxNQUFNQSxVQUFVLEdBQUcsSUFBSUMsSUFBSSxFQUFFLENBQUE7O0FBTTdCLE1BQU1DLFlBQVksQ0FBQzs7RUFjZkMsV0FBVyxDQUFDQyxJQUFJLEVBQUU7QUFBQSxJQUFBLElBQUEsQ0FSbEJDLEtBQUssR0FBQSxLQUFBLENBQUEsQ0FBQTtJQVNELElBQUksQ0FBQ0MsTUFBTSxHQUFHLElBQUksQ0FBQTs7SUFHbEIsSUFBSSxDQUFDQyxTQUFTLEdBQUcsSUFBSSxDQUFBOztBQUdyQixJQUFBLElBQUksQ0FBQ0MsZ0JBQWdCLEdBQUcsQ0FBQyxDQUFDLENBQUE7O0lB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
