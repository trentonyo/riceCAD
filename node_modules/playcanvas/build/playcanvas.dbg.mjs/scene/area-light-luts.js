/**
 * @license
 * PlayCanvas Engine v1.58.0 revision 6672f604c (DEBUG PROFILER)
 * Copyright 2011-2022 PlayCanvas Ltd. All rights reserved.
 */
import { FloatPacking } from '../core/math/float-packing.js';
import { Texture } from '../platform/graphics/texture.js';
import { DeviceCache } from '../platform/graphics/device-cache.js';
import { ADDRESS_CLAMP_TO_EDGE, TEXTURETYPE_DEFAULT, FILTER_LINEAR, FILTER_NEAREST, PIXELFORMAT_R8_G8_B8_A8, PIXELFORMAT_RGBA32F, PIXELFORMAT_RGBA16F } from '../platform/graphics/constants.js';

class AreaLightCacheEntry {
  constructor(texture0, texture1) {
    this.texture0 = texture0;
    this.texture1 = texture1;
  }
  destroy() {
    var _this$texture, _this$texture2;
    (_this$texture = this.texture0) == null ? void 0 : _this$texture.destroy();
    (_this$texture2 = this.texture1) == null ? void 0 : _this$texture2.destroy();
  }
}

const deviceCache = new DeviceCache();

class AreaLightLuts {
  static createTexture(device, format, size, postfix = '') {
    const tex = new Texture(device, {
      width: size,
      height: size,
      format: format,
      addressU: ADDRESS_CLAMP_TO_EDGE,
      addressV: ADDRESS_CLAMP_TO_EDGE,
      type: TEXTURETYPE_DEFAULT,
      magFilter: FILTER_LINEAR,
      minFilter: FILTER_NEAREST,
      anisotropy: 1,
      name: `AreaLightLUT${postfix}`
    });
    return tex;
  }
  static applyTextures(device, texture1, texture2) {
    deviceCache.remove(device);

    deviceCache.get(device, () => {
      return new AreaLightCacheEntry(texture1, texture1 === texture2 ? null : texture2);
    });

    device.scope.resolve('areaLightsLutTex1').setValue(texture1);
    device.scope.resolve('areaLightsLutTex2').setValue(texture2);
  }

  static createPlaceholder(device) {
    const texture = AreaLightLuts.createTexture(device, PIXELFORMAT_R8_G8_B8_A8, 2, 'placeholder');
    const pixels = texture.lock();
    pixels.fill(0);
    texture.unlock();
    AreaLightLuts.applyTextures(device, texture, texture);
  }

  static set(device, ltcMat1, ltcMat2) {
    function buildTexture(device, data, format) {
      const texture = AreaLightLuts.createTexture(device, format, 64);
      texture.lock().set(data);
      texture.unlock();
      texture.upload();
      return texture;
    }
    function offsetScale(data, offset, scale) {
      const count = data.length;
      const ret = new Float32Array(count);
      for (let i = 0; i < count; i++) {
        const n = i % 4;
        ret[i] = (data[i] + offset[n]) * scale[n];
      }
      return ret;
    }
    function convertToHalfFloat(data) {
      const count = data.length;
      const ret = new Uint16Array(count);
      const float2Half = FloatPacking.float2Half;
      for (let i = 0; i < count; i++) {
        ret[i] = float2Half(data[i]);
      }
      return ret;
    }
    function convertToUint(data) {
      const count = data.length;
      const ret = new Uint8ClampedArray(count);
      for (let i = 0; i < count; i++) {
        ret[i] = data[i] * 255;
      }
      return ret;
    }
    const srcData1 = ltcMat1;
    const srcData2 = ltcMat2;

    let data1, data2;
    const format = device.areaLightLutFormat;
    if (format === PIXELFORMAT_RGBA32F) {
      data1 = srcData1;
      data2 = srcData2;
    } else if (format === PIXELFORMAT_RGBA16F) {
      data1 = convertToHalfFloat(srcData1);
      data2 = convertToHalfFloat(srcData2);
    } else {
      const o1 = [0.0, 0.2976, 0.01381, 0.0];
      const s1 = [0.999, 3.08737, 1.6546, 0.603249];
      const o2 = [-0.306897, 0.0, 0.0, 0.0];
      const s2 = [1.442787, 1.0, 1.0, 1.0];
      data1 = convertToUint(offsetScale(srcData1, o1, s1));
      data2 = convertToUint(offsetScale(srcData2, o2, s2));
    }

    const tex1 = buildTexture(device, data1, format);
    const tex2 = buildTexture(device, data2, format);

    AreaLightLuts.applyTextures(device, tex1, tex2);
  }
}

export { AreaLightLuts };
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiYXJlYS1saWdodC1sdXRzLmpzIiwic291cmNlcyI6WyIuLi8uLi8uLi9zcmMvc2NlbmUvYXJlYS1saWdodC1sdXRzLmpzIl0sInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IEZsb2F0UGFja2luZyB9IGZyb20gJy4uL2NvcmUvbWF0aC9mbG9hdC1wYWNraW5nLmpzJztcbmltcG9ydCB7IFRleHR1cmUgfSBmcm9tICcuLi9wbGF0Zm9ybS9ncmFwaGljcy90ZXh0dXJlLmpzJztcbmltcG9ydCB7IERldmljZUNhY2hlIH0gZnJvbSAnLi4vcGxhdGZvcm0vZ3JhcGhpY3MvZGV2aWNlLWNhY2hlLmpzJztcblxuaW1wb3J0IHtcbiAgICBBRERSRVNTX0NMQU1QX1RPX0VER0UsXG4gICAgRklMVEVSX0xJTkVBUiwgRklMVEVSX05FQVJFU1QsXG4gICAgUElYRUxGT1JNQVRfUjhfRzhfQjhfQTgsIFBJWEVMRk9STUFUX1JHQkExNkYsIFBJWEVMRk9STUFUX1JHQkEzMkYsXG4gICAgVEVYVFVSRVRZUEVfREVGQVVMVFxufSBmcm9tICcuLi9wbGF0Zm9ybS9ncmFwaGljcy9jb25zdGFudHMuanMnO1xuXG4vLyBjbGFzcyB1c2VkIHRvIGhvbGQgTFVUIHRleHR1cmVzIGluIHRoZSBkZXZpY2UgY2FjaGVcbmNsYXNzIEFyZWFMaWdodENhY2hlRW50cnkge1xuICAgIGNvbnN0cnVjdG9yKHRleHR1cmUwLCB0ZXh0dXJlMSkge1xuICAgICAgICB0aGlzLnRleHR1cmUwID0gdGV4dHVyZTA7XG4gICAgICAgIHRoaXMudGV4dHVyZTEgPSB0ZXh0dXJlMTtcbiAgICB9XG5cbiAgICBkZXN0cm95KCkge1xuICAgICAgICB0aGlzLnRleHR1cmUwPy5kZXN0cm95KCk7XG4gICAgICAgIHRoaXMudGV4dHVyZTE/LmRlc3Ryb3koKTtcbiAgICB9XG59XG5cbi8vIGRldmljZSBjYWNoZSBzdG9yaW5nIExVVCB0ZXh0dXJlcywgdGFraW5nIGNhcmUgb2YgdGhlaXIgcmVtb3ZhbCB3aGVuIHRoZSBkZXZpY2UgaXMgZGVzdHJveWVkXG5jb25zdCBkZXZpY2VDYWNoZSA9IG5ldyBEZXZpY2VDYWNoZSgpO1xuXG4vLyBzdGF0aWMgY2xhc3MgbWFuYWdpbmcgTFVUIHRhYmxlcyBmb3IgdGhlIGFyZWEgbGlnaHRzXG5jbGFzcyBBcmVhTGlnaHRMdXRzIHtcbiAgICBzdGF0aWMgY3JlYXRlVGV4dHVyZShkZXZpY2UsIGZvcm1hdCwgc2l6ZSwgcG9zdGZpeCA9ICcnKSB7XG4gICAgICAgIGNvbnN0IHRleCA9IG5ldyBUZXh0dXJlKGRldmljZSwge1xuICAgICAgICAgICAgd2lkdGg6IHNpemUsXG4gICAgICAgICAgICBoZWlnaHQ6IHNpemUsXG4gICAgICAgICAgICBmb3JtYXQ6IGZvcm1hdCxcbiAgICAgICAgICAgIGFkZHJlc3NVOiBBRERSRVNTX0NMQU1QX1RPX0VER0UsXG4gICAgICAgICAgICBhZGRyZXNzVjogQUREUkVTU19DTEFNUF9UT19FREdFLFxuICAgICAgICAgICAgdHlwZTogVEVYVFVSRVRZUEVfREVGQVVMVCxcbiAgICAgICAgICAgIG1hZ0ZpbHRlcjogRklMVEVSX0xJTkVBUixcbiAgICAgICAgICAgIG1pbkZpbHRlcjogRklMVEVSX05FQVJFU1QsXG4gICAgICAgICAgICBhbmlzb3Ryb3B5OiAxLFxuICAgICAgICAgICAgbmFtZTogYEFyZWFMaWdodExVVCR7cG9zdGZpeH1gXG4gICAgICAgIH0pO1xuICAgICAgICByZXR1cm4gdGV4O1xuICAgIH1cblxuICAgIHN0YXRpYyBhcHBseVRleHR1cmVzKGRldmljZSwgdGV4dHVyZTEsIHRleHR1cmUyKSB7XG4gICAgICAgIC8vIHJlbW92ZSBwcmV2aW91cyB0ZXh0dXJlcyBmcm9tIGNhY2hlXG4gICAgICAgIGRldmljZUNhY2hlLnJlbW92ZShkZXZpY2UpO1xuXG4gICAgICAgIC8vIGFkZCBuZXcgdGV4dHVyZXMgdG8gY2FjaGVcbiAgICAgICAgZGV2aWNlQ2FjaGUuZ2V0KGRldmljZSwgKCkgPT4ge1xuICAgICAgICAgICAgcmV0dXJuIG5ldyBBcmVhTGlnaHRDYWNoZUVudHJ5KHRleHR1cmUxLCB0ZXh0dXJlMSA9PT0gdGV4dHVyZTIgPyBudWxsIDogdGV4dHVyZTIpO1xuICAgICAgICB9KTtcblxuICAgICAgICAvLyBzZXQgdGhlbSBhcyB1bmlmb3Jtc1xuICAgICAgICBkZXZpY2Uuc2NvcGUucmVzb2x2ZSgnYXJlYUxpZ2h0c0x1dFRleDEnKS5zZXRWYWx1ZSh0ZXh0dXJlMSk7XG4gICAgICAgIGRldmljZS5zY29wZS5yZXNvbHZlKCdhcmVhTGlnaHRzTHV0VGV4MicpLnNldFZhbHVlKHRleHR1cmUyKTtcbiAgICB9XG5cbiAgICAvLyBwbGFjZWhvbGRlciBMVVQgdGV4dHVyZXMgZm9yIGFyZWEgbGlnaHRcbiAgICBzdGF0aWMgY3JlYXRlUGxhY2Vob2xkZXIoZGV2aWNlKSB7XG4gICAgICAgIGNvbnN0IHRleHR1cmUgPSBBcmVhTGlnaHRMdXRzLmNyZWF0ZVRleHR1cmUoZGV2aWNlLCBQSVhFTEZPUk1BVF9SOF9HOF9COF9BOCwgMiwgJ3BsYWNlaG9sZGVyJyk7XG5cbiAgICAgICAgY29uc3QgcGl4ZWxzID0gdGV4dHVyZS5sb2NrKCk7XG4gICAgICAgIHBpeGVscy5maWxsKDApO1xuICAgICAgICB0ZXh0dXJlLnVubG9jaygpO1xuXG4gICAgICAgIEFyZWFMaWdodEx1dHMuYXBwbHlUZXh0dXJlcyhkZXZpY2UsIHRleHR1cmUsIHRleHR1cmUpO1xuICAgIH1cblxuICAgIC8vIGNyZWF0ZXMgTFVUIHRleHR1cmUgdXNlZCBieSBhcmVhIGxpZ2h0c1xuICAgIHN0YXRpYyBzZXQoZGV2aWNlLCBsdGNNYXQxLCBsdGNNYXQyKSB7XG5cbiAgICAgICAgZnVuY3Rpb24gYnVpbGRUZXh0dXJlKGRldmljZSwgZGF0YSwgZm9ybWF0KSB7XG4gICAgICAgICAgICBjb25zdCB0ZXh0dXJlID0gQXJlYUxpZ2h0THV0cy5jcmVhdGVUZXh0dXJlKGRldmljZSwgZm9ybWF0LCA2NCk7XG5cbiAgICAgICAgICAgIHRleHR1cmUubG9jaygpLnNldChkYXRhKTtcbiAgICAgICAgICAgIHRleHR1cmUudW5sb2NrKCk7XG4gICAgICAgICAgICB0ZXh0dXJlLnVwbG9hZCgpO1xuXG4gICAgICAgICAgICByZXR1cm4gdGV4dHVyZTtcbiAgICAgICAgfVxuXG4gICAgICAgIGZ1bmN0aW9uIG9mZnNldFNjYWxlKGRhdGEsIG9mZnNldCwgc2NhbGUpIHtcblxuICAgICAgICAgICAgY29uc3QgY291bnQgPSBkYXRhLmxlbmd0aDtcbiAgICAgICAgICAgIGNvbnN0IHJldCA9IG5ldyBGbG9hdDMyQXJyYXkoY291bnQpO1xuICAgICAgICAgICAgZm9yIChsZXQgaSA9IDA7IGkgPCBjb3VudDsgaSsrKSB7XG4gICAgICAgICAgICAgICAgY29uc3QgbiA9IGkgJSA0O1xuICAgICAgICAgICAgICAgIHJldFtpXSA9IChkYXRhW2ldICsgb2Zmc2V0W25dKSAqIHNjYWxlW25dO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgcmV0dXJuIHJldDtcbiAgICAgICAgfVxuXG4gICAgICAgIGZ1bmN0aW9uIGNvbnZlcnRUb0hhbGZGbG9hdChkYXRhKSB7XG5cbiAgICAgICAgICAgIGNvbnN0IGNvdW50ID0gZGF0YS5sZW5ndGg7XG4gICAgICAgICAgICBjb25zdCByZXQgPSBuZXcgVWludDE2QXJyYXkoY291bnQpO1xuICAgICAgICAgICAgY29uc3QgZmxvYXQySGFsZiA9IEZsb2F0UGFja2luZy5mbG9hdDJIYWxmO1xuICAgICAgICAgICAgZm9yIChsZXQgaSA9IDA7IGkgPCBjb3VudDsgaSsrKSB7XG4gICAgICAgICAgICAgICAgcmV0W2ldID0gZmxvYXQySGFsZihkYXRhW2ldKTtcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgcmV0dXJuIHJldDtcbiAgICAgICAgfVxuXG4gICAgICAgIGZ1bmN0aW9uIGNvbnZlcnRUb1VpbnQoZGF0YSkge1xuXG4gICAgICAgICAgICBjb25zdCBjb3VudCA9IGRhdGEubGVuZ3RoO1xuICAgICAgICAgICAgY29uc3QgcmV0ID0gbmV3IFVpbnQ4Q2xhbXBlZEFycmF5KGNvdW50KTtcbiAgICAgICAgICAgIGZvciAobGV0IGkgPSAwOyBpIDwgY291bnQ7IGkrKykge1xuICAgICAgICAgICAgICAgIHJldFtpXSA9IGRhdGFbaV0gKiAyNTU7XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIHJldHVybiByZXQ7XG4gICAgICAgIH1cblxuICAgICAgICBjb25zdCBzcmNEYXRhMSA9IGx0Y01hdDE7XG4gICAgICAgIGNvbnN0IHNyY0RhdGEyID0gbHRjTWF0MjtcblxuICAgICAgICAvLyBwaWNrIGZvcm1hdCBmb3IgbHV0IHRleHR1cmVcbiAgICAgICAgbGV0IGRhdGExLCBkYXRhMjtcbiAgICAgICAgY29uc3QgZm9ybWF0ID0gZGV2aWNlLmFyZWFMaWdodEx1dEZvcm1hdDtcbiAgICAgICAgaWYgKGZvcm1hdCA9PT0gUElYRUxGT1JNQVRfUkdCQTMyRikge1xuXG4gICAgICAgICAgICAvLyBmbG9hdFxuICAgICAgICAgICAgZGF0YTEgPSBzcmNEYXRhMTtcbiAgICAgICAgICAgIGRhdGEyID0gc3JjRGF0YTI7XG5cbiAgICAgICAgfSBlbHNlIGlmIChmb3JtYXQgPT09IFBJWEVMRk9STUFUX1JHQkExNkYpIHtcblxuICAgICAgICAgICAgLy8gaGFsZiBmbG9hdFxuICAgICAgICAgICAgZGF0YTEgPSBjb252ZXJ0VG9IYWxmRmxvYXQoc3JjRGF0YTEpO1xuICAgICAgICAgICAgZGF0YTIgPSBjb252ZXJ0VG9IYWxmRmxvYXQoc3JjRGF0YTIpO1xuXG4gICAgICAgIH0gZWxzZSB7XG5cbiAgICAgICAgICAgIC8vIGxvdyBwcmVjaXNpb24gZm9ybWF0XG4gICAgICAgICAgICAvLyBvZmZzZXQgYW5kIHNjYWxlIHRvIGF2b2lkIGNsaXBwaW5nIGFuZCBpbmNyZWFzZSBwcmVjaXNpb24gLSB0aGlzIGlzIHVuZG9uZSBpbiB0aGUgc2hhZGVyXG4gICAgICAgICAgICBjb25zdCBvMSA9IFswLjAsIDAuMjk3NiwgMC4wMTM4MSwgMC4wXTtcbiAgICAgICAgICAgIGNvbnN0IHMxID0gWzAuOTk5LCAzLjA4NzM3LCAxLjY1NDYsIDAuNjAzMjQ5XTtcblxuICAgICAgICAgICAgY29uc3QgbzIgPSBbLTAuMzA2ODk3LCAwLjAsIDAuMCwgMC4wXTtcbiAgICAgICAgICAgIGNvbnN0IHMyID0gWzEuNDQyNzg3LCAxLjAsIDEuMCwgMS4wXTtcblxuICAgICAgICAgICAgZGF0YTEgPSBjb252ZXJ0VG9VaW50KG9mZnNldFNjYWxlKHNyY0RhdGExLCBvMSwgczEpKTtcbiAgICAgICAgICAgIGRhdGEyID0gY29udmVydFRvVWludChvZmZzZXRTY2FsZShzcmNEYXRhMiwgbzIsIHMyKSk7XG4gICAgICAgIH1cblxuICAgICAgICAvLyBjcmVhdGUgbHV0IHRleHR1cmVzXG4gICAgICAgIGNvbnN0IHRleDEgPSBidWlsZFRleHR1cmUoZGV2aWNlLCBkYXRhMSwgZm9ybWF0KTtcbiAgICAgICAgY29uc3QgdGV4MiA9IGJ1aWxkVGV4dHVyZShkZXZpY2UsIGRhdGEyLCBmb3JtYXQpO1xuXG4gICAgICAgIC8vIGFzc2lnbiB0byB1bmlmb3Jtc1xuICAgICAgICBBcmVhTGlnaHRMdXRzLmFwcGx5VGV4dHVyZXMoZGV2aWNlLCB0ZXgxLCB0ZXgyKTtcbiAgICB9XG59XG5cbmV4cG9ydCB7IEFyZWFMaWdodEx1dHMgfTtcbiJdLCJuYW1lcyI6WyJBcmVhTGlnaHRDYWNoZUVudHJ5IiwiY29uc3RydWN0b3IiLCJ0ZXh0dXJlMCIsInRleHR1cmUxIiwiZGVzdHJveSIsImRldmljZUNhY2hlIiwiRGV2aWNlQ2FjaGUiLCJBcmVhTGlnaHRMdXRzIiwiY3JlYXRlVGV4dHVyZSIsImRldmljZSIsImZvcm1hdCIsInNpemUiLCJwb3N0Zml4IiwidGV4IiwiVGV4dHVyZSIsIndpZHRoIiwiaGVpZ2h0IiwiYWRkcmVzc1UiLCJBRERSRVNTX0NMQU1QX1RPX0VER0UiLCJhZGRyZXNzViIsInR5cGUiLCJURVhUVVJFVFlQRV9ERUZBVUxUIiwibWFnRmlsdGVyIiwiRklMVEVSX0xJTkVBUiIsIm1pbkZpbHRlciIsIkZJTFRFUl9ORUFSRVNUIiwiYW5pc290cm9weSIsIm5hbWUiLCJhcHBseVRleHR1cmVzIiwidGV4dHVyZTIiLCJyZW1vdmUiLCJnZXQiLCJzY29wZSIsInJlc29sdmUiLCJzZXRWYWx1ZSIsImNyZWF0ZVBsYWNlaG9sZGVyIiwidGV4dHVyZSIsIlBJWEVMRk9STUFUX1I4X0c4X0I4X0E4IiwicGl4ZWxzIiwibG9jayIsImZpbGwiLCJ1bmxvY2siLCJzZXQiLCJsdGNNYXQxIiwibHRjTWF0MiIsImJ1aWxkVGV4dHVyZSIsImRhdGEiLCJ1cGxvYWQiLCJvZmZzZXRTY2FsZSIsIm9mZnNldCIsInNjYWxlIiwiY291bnQiLCJsZW5ndGgiLCJyZXQiLCJGbG9hdDMyQXJyYXkiLCJpIiwibiIsImNvbnZlcnRUb0hhbGZGbG9hdCIsIlVpbnQxNkFycmF5IiwiZmxvYXQySGFsZiIsIkZsb2F0UGFja2luZyIsImNvbnZlcnRUb1VpbnQiLCJVaW50OENsYW1wZWRBcnJheSIsInNyY0RhdGExIiwic3JjRGF0YTIiLCJkYXRhMSIsImRhdGEyIiwiYXJlYUxpZ2h0THV0Rm9ybWF0IiwiUElYRUxGT1JNQVRfUkdCQTMyRiIsIlBJWEVMRk9STUFUX1JHQkExNkYiLCJvMSIsInMxIiwibzIiLCJzMiIsInRleDEiLCJ0ZXgyIl0sIm1hcHBpbmdzIjoiOzs7Ozs7Ozs7O0FBWUEsTUFBTUEsbUJBQW1CLENBQUM7QUFDdEJDLEVBQUFBLFdBQVcsQ0FBQ0MsUUFBUSxFQUFFQyxRQUFRLEVBQUU7SUFDNUIsSUFBSSxDQUFDRCxRQUFRLEdBQUdBLFFBQVEsQ0FBQTtJQUN4QixJQUFJLENBQUNDLFFBQVEsR0FBR0EsUUFBUSxDQUFBO0FBQzVCLEdBQUE7QUFFQUMsRUFBQUEsT0FBTyxHQUFHO0FBQUEsSUFBQSxJQUFBLGFBQUEsRUFBQSxjQUFBLENBQUE7QUFDTixJQUFBLENBQUEsYUFBQSxHQUFBLElBQUksQ0FBQ0YsUUFBUSxLQUFiLElBQUEsR0FBQSxLQUFBLENBQUEsR0FBQSxhQUFBLENBQWVF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
