/**
 * @license
 * PlayCanvas Engine v1.58.0 revision 6672f604c (DEBUG PROFILER)
 * Copyright 2011-2022 PlayCanvas Ltd. All rights reserved.
 */
import { AnimTargetValue } from './anim-target-value.js';
import { AnimBlend } from './anim-blend.js';

class AnimEvaluator {
  constructor(binder) {
    this._binder = binder;
    this._clips = [];
    this._inputs = [];
    this._outputs = [];
    this._targets = {};
  }

  get clips() {
    return this._clips;
  }

  addClip(clip) {
    const targets = this._targets;
    const binder = this._binder;

    const curves = clip.track.curves;
    const snapshot = clip.snapshot;
    const inputs = [];
    const outputs = [];
    for (let i = 0; i < curves.length; ++i) {
      const curve = curves[i];
      const paths = curve.paths;
      for (let j = 0; j < paths.length; ++j) {
        const path = paths[j];
        const resolved = binder.resolve(path);
        let target = targets[resolved && resolved.targetPath || null];

        if (!target && resolved) {
          target = {
            target: resolved,
            value: [],
            curves: 0,
            blendCounter: 0
          };

          for (let k = 0; k < target.target.components; ++k) {
            target.value.push(0);
          }
          targets[resolved.targetPath] = target;
          if (binder.animComponent) {
            if (!binder.animComponent.targets[resolved.targetPath]) {
              let type;
              if (resolved.targetPath.substring(resolved.targetPath.length - 13) === 'localRotation') {
                type = AnimTargetValue.TYPE_QUAT;
              } else {
                type = AnimTargetValue.TYPE_VEC3;
              }
              binder.animComponent.targets[resolved.targetPath] = new AnimTargetValue(binder.animComponent, type);
            }
            binder.animComponent.targets[resolved.targetPath].layerCounter++;
            binder.animComponent.targets[resolved.targetPath].setMask(binder.layerIndex, 1);
          }
        }

        if (target) {
          target.curves++;
          inputs.push(snapshot._results[i]);
          outputs.push(target);
        }
      }
    }
    this._clips.push(clip);
    this._inputs.push(inputs);
    this._outputs.push(outputs);
  }

  removeClip(index) {
    const targets = this._targets;
    const binder = this._binder;
    const clips = this._clips;
    const clip = clips[index];
    const curves = clip.track.curves;
    for (let i = 0; i < curves.length; ++i) {
      const curve = curves[i];
      const paths = curve.paths;
      for (let j = 0; j < paths.length; ++j) {
        const path = paths[j];
        const target = this._binder.resolve(path);
        if (target) {
          target.curves--;
          if (target.curves === 0) {
            binder.unresolve(path);
            delete targets[target.targetPath];
            if (binder.animComponent) {
              binder.animComponent.targets[target.targetPath].layerCounter--;
            }
          }
        }
      }
    }
    clips.splice(index, 1);
    this._inputs.splice(index, 1);
    this._outputs.splice(index, 1);
  }

  removeClips() {
    while (this._clips.length > 0) {
      this.removeClip(0);
    }
  }

  findClip(name) {
    const clips = this._clips;
    for (let i = 0; i < clips.length; ++i) {
      const clip = clips[i];
      if (clip.name === name) {
        return clip;
      }
    }
    return null;
  }
  rebind() {
    this._binder.rebind();
    this._targets = {};
    const clips = [...this.clips];
    this.removeClips();
    clips.forEach(clip => {
      this.addClip(clip);
    });
  }
  assignMask(mask) {
    return this._binder.assignMask(mask);
  }

  update(deltaTime) {
    const clips = this._clips;

    const order = clips.map(function (c, i) {
      return i;
    });
    AnimBlend.stableSort(order, function (a, b) {
      return clips[a].blendOrder < clips[b].blendOrder;
    });
    for (let i = 0; i < order.length; ++i) {
      const index = order[i];
      const clip = clips[index];
      const inputs = this._inputs[index];
      const outputs = this._outputs[index];
      const blendWeight = clip.blendWeight;

      if (blendWeight > 0.0) {
        clip._update(deltaTime);
      }
      let input;
      let output;
      let value;
      if (blendWeight >= 1.0) {
        for (let j = 0; j < inputs.length; ++j) {
          input = inputs[j];
          output = outputs[j];
          value = output.value;
          AnimBlend.set(value, input, output.target.type);
          output.blendCounter++;
        }
      } else if (blendWeight > 0.0) {
        for (let j = 0; j < inputs.length; ++j) {
          input = inputs[j];
          output = outputs[j];
          value = output.value;
          if (output.blendCounter === 0) {
            AnimBlend.set(value, input, output.target.type);
          } else {
            AnimBlend.blend(value, input, blendWeight, output.target.type);
          }
          output.blendCounter++;
        }
      }
    }

    const targets = this._targets;
    const binder = this._binder;
    for (const path in targets) {
      if (targets.hasOwnProperty(path)) {
        const target = targets[path];
        if (binder.animComponent && target.target.isTransform) {
          const animTarget = binder.animComponent.targets[path];
          if (animTarget.counter === animTarget.layerCounter) {
            animTarget.counter = 0;
          }
          if (!animTarget.path) {
            animTarget.path = path;
            animTarget.baseValue = target.target.get();
            animTarget.setter = target.target.set;
          }
          animTarget.updateValue(binder.layerIndex, target.value);
          animTarget.counter++;
        } else {
          target.target.set(target.value);
        }
        target.blendCounter = 0;
      }
    }

    binder.update(deltaTime);
  }
}

export { AnimEvaluator };
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiYW5pbS1ldmFsdWF0b3IuanMiLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uLy4uL3NyYy9mcmFtZXdvcmsvYW5pbS9ldmFsdWF0b3IvYW5pbS1ldmFsdWF0b3IuanMiXSwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgQW5pbVRhcmdldFZhbHVlIH0gZnJvbSAnLi9hbmltLXRhcmdldC12YWx1ZS5qcyc7XG5pbXBvcnQgeyBBbmltQmxlbmQgfSBmcm9tICcuL2FuaW0tYmxlbmQuanMnO1xuXG4vKiogQHR5cGVkZWYge2ltcG9ydCgnLi4vYmluZGVyL2FuaW0tYmluZGVyLmpzJykuQW5pbUJpbmRlcn0gQW5pbUJpbmRlciAqL1xuLyoqIEB0eXBlZGVmIHtpbXBvcnQoJy4vYW5pbS1jbGlwLmpzJykuQW5pbUNsaXB9IEFuaW1DbGlwICovXG5cbi8qKlxuICogQW5pbUV2YWx1YXRvciBibGVuZHMgbXVsdGlwbGUgc2V0cyBvZiBhbmltYXRpb24gY2xpcHMgdG9nZXRoZXIuXG4gKlxuICogQGlnbm9yZVxuICovXG5jbGFzcyBBbmltRXZhbHVhdG9yIHtcbiAgICAvKipcbiAgICAgKiBDcmVhdGUgYSBuZXcgYW5pbWF0aW9uIGV2YWx1YXRvci5cbiAgICAgKlxuICAgICAqIEBwYXJhbSB7QW5pbUJpbmRlcn0gYmluZGVyIC0gaW50ZXJmYWNlIHJlc29sdmVzIGN1cnZlIHBhdGhzIHRvIGluc3RhbmNlcyBvZiB7QGxpbmsgQW5pbVRhcmdldH0uXG4gICAgICovXG4gICAgY29uc3RydWN0b3IoYmluZGVyKSB7XG4gICAgICAgIHRoaXMuX2JpbmRlciA9IGJpbmRlcjtcbiAgICAgICAgdGhpcy5fY2xpcHMgPSBbXTtcbiAgICAgICAgdGhpcy5faW5wdXRzID0gW107XG4gICAgICAgIHRoaXMuX291dHB1dHMgPSBbXTtcbiAgICAgICAgdGhpcy5fdGFyZ2V0cyA9IHt9O1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIFRoZSBsaXN0IG9mIGFuaW1hdGlvbiBjbGlwcy5cbiAgICAgKlxuICAgICAqIEB0eXBlIHtBbmltQ2xpcFtdfVxuICAgICAqL1xuICAgIGdldCBjbGlwcygpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuX2NsaXBzO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIEFkZCBhIGNsaXAgdG8gdGhlIGV2YWx1YXRvci5cbiAgICAgKlxuICAgICAqIEBwYXJhbSB7QW5pbUNsaXB9IGNsaXAgLSBUaGUgY2xpcCB0byBhZGQgdG8gdGhlIGV2YWx1YXRvci5cbiAgICAgKi9cbiAgICBhZGRDbGlwKGNsaXApIHtcbiAgICAgICAgY29uc3QgdGFyZ2V0cyA9IHRoaXMuX3RhcmdldHM7XG4gICAgICAgIGNvbnN0IGJpbmRlciA9IHRoaXMuX2JpbmRlcjtcblxuICAgICAgICAvLyBzdG9yZSBsaXN0IG9mIGlucHV0L291dHB1dCBhcnJheXNcbiAgICAgICAgY29uc3QgY3VydmVzID0gY2xpcC50cmFjay5jdXJ2ZXM7XG4gICAgICAgIGNvbnN0IHNuYXBzaG90ID0gY2xpcC5zbmFwc2hvdDtcbiAgICAgICAgY29uc3QgaW5wdXRzID0gW107XG4gICAgICAgIGNvbnN0IG91dHB1dHMgPSBbXTtcbiAgICAgICAgZm9yIChsZXQgaSA9IDA7IGkgPCBjdXJ2ZXMubGVuZ3RoOyArK2kpIHtcbiAgICAgICAgICAgIGNvbnN0IGN1cnZlID0gY3VydmVzW2ldO1xuICAgICAgICAgICAgY29uc3QgcGF0aHMgPSBjdXJ2ZS5wYXRocztcbiAgICAgICAgICAgIGZvciAobGV0IGogPSAwOyBqIDwgcGF0aHMubGVuZ3RoOyArK2opIHtcbiAgICAgICAgICAgICAgICBjb25zdCBwYXRoID0gcGF0aHNbal07XG4gICAgICAgICAgICAgICAgY29uc3QgcmVzb2x2ZWQgPSBiaW5kZXIucmVzb2x2ZShwYXRoKTtcbiAgICAgICAgICAgICAgICBsZXQgdGFyZ2V0ID0gdGFyZ2V0c1tyZXNvbHZlZCAmJiByZXNvbHZlZC50YXJnZXRQYXRoIHx8IG51bGxdO1xuXG4gICAgICAgICAgICAgICAgLy8gY3JlYXRlIG5ldyB0YXJnZXQgaWYgaXQgZG9lc24ndCBleGlzdCB5ZXRcbiAgICAgICAgICAgICAgICBpZiAoIXRhcmdldCAmJiByZXNvbHZlZCkge1xuICAgICAgICAgICAgICAgICAgICB0YXJnZXQgPSB7XG4gICAgICAgICAgICAgICAgICAgICAgICB0YXJnZXQ6IHJlc29sdmVkLCAgICAgICAgICAgLy8gcmVzb2x2ZWQgdGFyZ2V0IGluc3RhbmNlXG4gICAgICAgICAgICAgICAgICAgICAgICB2YWx1ZTogW10sICAgICAgICAgICAgICAgICAgLy8gc3RvcmFnZSBmb3IgY2FsY3VsYXRlZCB2YWx1ZVxuICAgICAgICAgICAgICAgICAgICAgICAgY3VydmVzOiAwLCAgICAgICAgICAgICAgICAgIC8vIG51bWJlciBvZiBjdXJ2ZXMgZHJpdmluZyB0aGlzIHRhcmdldFxuICAgICAgICAgICAgICAgICAgICAgICAgYmxlbmRDb3VudGVyOiAwICAgICAgICAgICAgIC8vIHBlci1mcmFtZSBudW1iZXIgb2YgYmxlbmRzICh1c2VkIHRvIGlkZW50aWZ5IGZpcnN0IGJsZW5kKVxuICAgICAgICAgICAgICAgICAgICB9O1xuXG4gICAgICAgICAgICAgICAgICAgIGZvciAobGV0IGsgPSAwOyBrIDwgdGFyZ2V0LnRhcmdldC5jb21wb25lbnRzOyArK2spIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHRhcmdldC52YWx1ZS5wdXNoKDApO1xuICAgICAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgICAgICAgdGFyZ2V0c1tyZXNvbHZlZC50YXJnZXRQYXRoXSA9IHRhcmdldDtcbiAgICAgICAgICAgICAgICAgICAgaWYgKGJpbmRlci5hbmltQ29tcG9uZW50KSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAoIWJpbmRlci5hbmltQ29tcG9uZW50LnRhcmdldHNbcmVzb2x2ZWQudGFyZ2V0UGF0aF0pIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBsZXQgdHlwZTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAocmVzb2x2ZWQudGFyZ2V0UGF0aC5zdWJzdHJpbmcocmVzb2x2ZWQudGFyZ2V0UGF0aC5sZW5ndGggLSAxMykgPT09ICdsb2NhbFJvdGF0aW9uJykge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB0eXBlID0gQW5pbVRhcmdldFZhbHVlLlRZUEVfUVVBVDtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB0eXBlID0gQW5pbVRhcmdldFZhbHVlLlRZUEVfVkVDMztcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgYmluZGVyLmFuaW1Db21wb25lbnQudGFyZ2V0c1tyZXNvbHZlZC50YXJnZXRQYXRoXSA9IG5ldyBBbmltVGFyZ2V0VmFsdWUoYmluZGVyLmFuaW1Db21wb25lbnQsIHR5cGUpO1xuICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgYmluZGVyLmFuaW1Db21wb25lbnQudGFyZ2V0c1tyZXNvbHZlZC50YXJnZXRQYXRoXS5sYXllckNvdW50ZXIrKztcbiAgICAgICAgICAgICAgICAgICAgICAgIGJpbmRlci5hbmltQ29tcG9uZW50LnRhcmdldHNbcmVzb2x2ZWQudGFyZ2V0UGF0aF0uc2V0TWFzayhiaW5kZXIubGF5ZXJJbmRleCwgMSk7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgICAvLyBiaW5kaW5nIG1heSBoYXZlIGZhaWxlZFxuICAgICAgICAgICAgICAgIC8vIFRPRE86IGl0IG1heSBiZSB3b3J0aCBzdG9yaW5nIHF1YXRlcm5pb25zIGFuZCB2ZWN0b3IgdGFyZ2V0cyBpbiBzZXBhcmF0ZVxuICAgICAgICAgICAgICAgIC8vIGxpc3RzLiB0aGlzIHdheSB0aGUgdXBkYXRlIGNvZGUgd29uJ3QgYmUgZm9yY2VkIHRvIGNoZWNrIHRhcmdldCB0eXBlIGJlZm9yZVxuICAgICAgICAgICAgICAgIC8vIHNldHRpbmcvYmxlbmRpbmcgZWFjaCB0YXJnZXQuXG4gICAgICAgICAgICAgICAgaWYgKHRhcmdldCkge1xuICAgICAgICAgICAgICAgICAgICB0YXJnZXQuY3VydmVzKys7XG4gICAgICAgICAgICAgICAgICAgIGlucHV0cy5wdXNoKHNuYXBzaG90Ll9yZXN1bHRzW2ldKTtcbiAgICAgICAgICAgICAgICAgICAgb3V0cHV0cy5wdXNoKHRhcmdldCk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICB9XG5cbiAgICAgICAgdGhpcy5fY2xpcHMucHVzaChjbGlwKTtcbiAgICAgICAgdGhpcy5faW5wdXRzLnB1c2goaW5wdXRzKTtcbiAgICAgICAgdGhpcy5fb3V0cHV0cy5wdXNoKG91dHB1dHMpO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIFJlbW92ZSBhIGNsaXAgZnJvbSB0aGUgZXZhbHVhdG9yLlxuICAgICAqXG4gICAgICogQHBhcmFtIHtudW1iZXJ9IGluZGV4IC0gSW5kZXggb2YgdGhlIGNsaXAgdG8gcmVtb3ZlLlxuICAgICAqL1xuICAgIHJlbW92ZUNsaXAoaW5kZXgpIHtcbiAgICAgICAgY29uc3QgdGFyZ2V0cyA9IHRoaXMuX3RhcmdldHM7XG4gICAgICAgIGNvbnN0IGJpbmRlciA9IHRoaXMuX2JpbmRlcjtcblxuICAgICAgICBjb25zdCBjbGlwcyA9IHRoaXMuX2NsaXBzO1xuICAgICAgICBjb25zdCBjbGlwID0gY2xpcHNbaW5kZXhdO1xuICAgICAgICBjb25zdCBjdXJ2ZXMgPSBjbGlwLnRyYWNrLmN1cnZlcztcblxuICAgICAgICBmb3IgKGxldCBpID0gMDsgaSA8IGN1cnZlcy5sZW5ndGg7ICsraSkge1xuICAgICAgICAgICAgY29uc3QgY3VydmUgPSBjdXJ2ZXNbaV07XG4gICAgICAgICAgICBjb25zdCBwYXRocyA9IGN1cnZlLnBhdGhzO1xuICAgICAgICAgICAgZm9yIChsZXQgaiA9IDA7IGogPCBwYXRocy5sZW5ndGg7ICsraikge1xuICAgICAgICAgICAgICAgIGNvbnN0IHBhdGggPSBwYXRoc1tqXTtcblxuICAgICAgICAgICAgICAgIGNvbnN0IHRhcmdldCA9IHRoaXMuX2JpbmRlci5yZXNvbHZlKHBhdGgpO1xuXG4gICAgICAgICAgICAgICAgaWYgKHRhcmdldCkge1xuICAgICAgICAgICAgICAgICAgICB0YXJnZXQuY3VydmVzLS07XG4gICAgICAgICAgICAgICAgICAgIGlmICh0YXJnZXQuY3VydmVzID09PSAwKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBiaW5kZXIudW5yZXNvbHZlKHBhdGgpO1xuICAgICAgICAgICAgICAgICAgICAgICAgZGVsZXRlIHRhcmdldHNbdGFyZ2V0LnRhcmdldFBhdGhdO1xuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKGJpbmRlci5hbmltQ29tcG9uZW50KSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgYmluZGVyLmFuaW1Db21wb25lbnQudGFyZ2V0c1t0YXJnZXQudGFyZ2V0UGF0aF0ubGF5ZXJDb3VudGVyLS07XG4gICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cblxuICAgICAgICBjbGlwcy5zcGxpY2UoaW5kZXgsIDEpO1xuICAgICAgICB0aGlzLl9pbnB1dHMuc3BsaWNlKGluZGV4LCAxKTtcbiAgICAgICAgdGhpcy5fb3V0cHV0cy5zcGxpY2UoaW5kZXgsIDEpO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIFJlbW92ZSBhbGwgY2xpcHMgZnJvbSB0aGUgZXZhbHVhdG9yLlxuICAgICAqL1xuICAgIHJlbW92ZUNsaXBzKCkge1xuICAgICAgICB3aGlsZSAodGhpcy5fY2xpcHMubGVuZ3RoID4gMCkge1xuICAgICAgICAgICAgdGhpcy5yZW1vdmVDbGlwKDApO1xuICAgICAgICB9XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogUmV0dXJucyB0aGUgZmlyc3QgY2xpcCB3aGljaCBtYXRjaGVzIHRoZSBnaXZlbiBuYW1lLCBvciBudWxsIGlmIG5vIHN1Y2ggY2xpcCB3YXMgZm91bmQuXG4gICAgICpcbiAgICAgKiBAcGFyYW0ge3N0cmluZ30gbmFtZSAtIE5hbWUgb2YgdGhlIGNsaXAgdG8gZmluZC5cbiAgICAgKiBAcmV0dXJucyB7QW5pbUNsaXB8bnVsbH0gLSBUaGUgY2xpcCB3aXRoIHRoZSBnaXZlbiBuYW1lIG9yIG51bGwgaWYgbm8gc3VjaCBjbGlwIHdhcyBmb3VuZC5cbiAgICAgKi9cbiAgICBmaW5kQ2xpcChuYW1lKSB7XG4gICAgICAgIGNvbnN0IGNsaXBzID0gdGhpcy5fY2xpcHM7XG4gICAgICAgIGZvciAobGV0IGkgPSAwOyBpIDwgY2xpcHMubGVuZ3RoOyArK2kpIHtcbiAgICAgICAgICAgIGNvbnN0IGNsaXAgPSBjbGlwc1tpXTtcbiAgICAgICAgICAgIGlmIChjbGlwLm5hbWUgPT09IG5hbWUpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gY2xpcDtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gbnVsbDtcbiAgICB9XG5cbiAgICByZWJpbmQoKSB7XG4gICAgICAgIHRoaXMuX2JpbmRlci5yZWJpbmQoKTtcbiAgICAgICAgdGhpcy5fdGFyZ2V0cyA9IHt9O1xuICAgICAgICBjb25zdCBjbGlwcyA9IFsuLi50aGlzLmNsaXBzXTtcbiAgICAgICAgdGhpcy5yZW1vdmVDbGlwcygpO1xuICAgICAgICBjbGlwcy5mb3JFYWNoKChjbGlwKSA9PiB7XG4gICAgICAgICAgICB0aGlzLmFkZENsaXAoY2xpcCk7XG4gICAgICAgIH0pO1xuICAgIH1cblxuICAgIGFzc2lnbk1hc2sobWFzaykge1xuICAgICAgICByZXR1cm4gdGhpcy5fYmluZGVyLmFzc2lnbk1hc2sobWFzayk7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogRXZhbHVhdG9yIGZyYW1lIHVwZGF0ZSBmdW5jdGlvbi4gQWxsIHRoZSBhdHRhY2hlZCB7QGxpbmsgQW5pbUNsaXB9cyBhcmUgZXZhbHVhdGVkLCBibGVuZGVkXG4gICAgICogYW5kIHRoZSByZXN1bHRzIHNldCBvbiB0aGUge0BsaW5rIEFuaW1UYXJnZXR9LlxuICAgICAqXG4gICAgICogQHBhcmFtIHtudW1iZXJ9IGRlbHRhVGltZSAtIFRoZSBhbW91bnQgb2YgdGltZSB0aGF0IGhhcyBwYXNzZWQgc2luY2UgdGhlIGxhc3QgdXBkYXRlLCBpblxuICAgICAqIHNlY29uZHMuXG4gICAgICovXG4gICAgdXBkYXRlKGRlbHRhVGltZSkge1xuICAgICAgICAvLyBjb3B5IGNsaXBzXG4gICAgICAgIGNvbnN0IGNsaXBzID0gdGhpcy5fY2xpcHM7XG5cbiAgICAgICAgLy8gc3RhYmxlIHNvcnQgb3JkZXJcbiAgICAgICAgY29uc3Qgb3JkZXIgPSBjbGlwcy5tYXAoZnVuY3Rpb24gKGMsIGkpIHtcbiAgICAgICAgICAgIHJldHVybiBpO1xuICAgICAgICB9KTtcbiAgICAgICAgQW5pbUJsZW5kLnN0YWJsZVNvcnQob3JkZXIsIGZ1bmN0aW9uIChhLCBiKSB7XG4gICAgICAgICAgICByZXR1cm4gY2xpcHNbYV0uYmxlbmRPcmRlciA8IGNsaXBzW2JdLmJsZW5kT3JkZXI7XG4gICAgICAgIH0pO1xuXG4gICAgICAgIGZvciAobGV0IGkgPSAwOyBpIDwgb3JkZXIubGVuZ3RoOyArK2kpIHtcbiAgICAgICAgICAgIGNvbnN0IGluZGV4ID0gb3JkZXJbaV07XG4gICAgICAgICAgICBjb25zdCBjbGlwID0gY2xpcHNbaW5kZXhdO1xuICAgICAgICAgICAgY29uc3QgaW5wdXRzID0gdGhpcy5faW5wdXRzW2luZGV4XTtcbiAgICAgICAgICAgIGNvbnN0IG91dHB1dHMgPSB0aGlzLl9vdXRwdXRzW2luZGV4XTtcbiAgICAgICAgICAgIGNvbnN0IGJsZW5kV2VpZ2h0ID0gY2xpcC5ibGVuZFdlaWdodDtcblxuICAgICAgICAgICAgLy8gdXBkYXRlIGNsaXBcbiAgICAgICAgICAgIGlmIChibGVuZFdlaWdodCA+IDAuMCkge1xuICAgICAgICAgICAgICAgIGNsaXAuX3VwZGF0ZShkZWx0YVRpbWUpO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICBsZXQgaW5wdXQ7XG4gICAgICAgICAgICBsZXQgb3V0cHV0O1xuICAgICAgICAgICAgbGV0IHZhbHVlO1xuXG4gICAgICAgICAgICBpZiAoYmxlbmRXZWlnaHQgPj0gMS4wKSB7XG4gICAgICAgICAgICAgICAgZm9yIChsZXQgaiA9IDA7IGogPCBpbnB1dHMubGVuZ3RoOyArK2opIHtcbiAgICAgICAgICAgICAgICAgICAgaW5wdXQgPSBpbnB1dHNbal07XG4gICAgICAgICAgICAgICAgICAgIG91dHB1dCA9IG91dHB1dHNbal07XG4gICAgICAgICAgICAgICAgICAgIHZhbHVlID0gb3V0cHV0LnZhbHVlO1xuXG4gICAgICAgICAgICAgICAgICAgIEFuaW1CbGVuZC5zZXQodmFsdWUsIGlucHV0LCBvdXRwdXQudGFyZ2V0LnR5cGUpO1xuXG4gICAgICAgICAgICAgICAgICAgIG91dHB1dC5ibGVuZENvdW50ZXIrKztcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9IGVsc2UgaWYgKGJsZW5kV2VpZ2h0ID4gMC4wKSB7XG4gICAgICAgICAgICAgICAgZm9yIChsZXQgaiA9IDA7IGogPCBpbnB1dHMubGVuZ3RoOyArK2opIHtcbiAgICAgICAgICAgICAgICAgICAgaW5wdXQgPSBpbnB1dHNbal07XG4gICAgICAgICAgICAgICAgICAgIG91dHB1dCA9IG91dHB1dHNbal07XG4gICAgICAgICAgICAgICAgICAgIHZhbHVlID0gb3V0cHV0LnZhbHVlO1xuXG4gICAgICAgICAgICAgICAgICAgIGlmIChvdXRwdXQuYmxlbmRDb3VudGVyID09PSAwKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBBbmltQmxlbmQuc2V0KHZhbHVlLCBpbnB1dCwgb3V0cHV0LnRhcmdldC50eXBlKTtcbiAgICAgICAgICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIEFuaW1CbGVuZC5ibGVuZCh2YWx1ZSwgaW5wdXQsIGJsZW5kV2VpZ2h0LCBvdXRwdXQudGFyZ2V0LnR5cGUpO1xuICAgICAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgICAgICAgb3V0cHV0LmJsZW5kQ291bnRlcisrO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuXG4gICAgICAgIC8vIGFwcGx5IHJlc3VsdCB0byBhbmltIHRhcmdldHNcbiAgICAgICAgY29uc3QgdGFyZ2V0cyA9IHRoaXMuX3RhcmdldHM7XG4gICAgICAgIGNvbnN0IGJpbmRlciA9IHRoaXMuX2JpbmRlcjtcbiAgICAgICAgZm9yIChjb25zdCBwYXRoIGluIHRhcmdldHMpIHtcbiAgICAgICAgICAgIGlmICh0YXJnZXRzLmhhc093blByb3BlcnR5KHBhdGgpKSB7XG4gICAgICAgICAgICAgICAgY29uc3QgdGFyZ2V0ID0gdGFyZ2V0c1twYXRoXTtcbiAgICAgICAgICAgICAgICAvLyBpZiB0aGlzIGV2YWx1YXRvciBpcyBhc3NvY2lhdGVkIHdpdGggYW4gYW5pbSBjb21wb25lbnQgdGhlbiB3ZSBzaG91bGQgYmxlbmQgdGhlIHJlc3VsdCBvZiB0aGlzIGV2YWx1YXRvciB3aXRoIGFsbCBvdGhlciBhbmltIGxheWVyJ3MgZXZhbHVhdG9yc1xuICAgICAgICAgICAgICAgIGlmIChiaW5kZXIuYW5pbUNvbXBvbmVudCAmJiB0YXJnZXQudGFyZ2V0LmlzVHJhbnNmb3JtKSB7XG4gICAgICAgICAgICAgICAgICAgIGNvbnN0IGFuaW1UYXJnZXQgPSBiaW5kZXIuYW5pbUNvbXBvbmVudC50YXJnZXRzW3BhdGhdO1xuICAgICAgICAgICAgICAgICAgICBpZiAoYW5pbVRhcmdldC5jb3VudGVyID09PSBhbmltVGFyZ2V0LmxheWVyQ291bnRlcikge1xuICAgICAgICAgICAgICAgICAgICAgICAgYW5pbVRhcmdldC5jb3VudGVyID0gMDtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICBpZiAoIWFuaW1UYXJnZXQucGF0aCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgYW5pbVRhcmdldC5wYXRoID0gcGF0aDtcbiAgICAgICAgICAgICAgICAgICAgICAgIGFuaW1UYXJnZXQuYmFzZVZhbHVlID0gdGFyZ2V0LnRhcmdldC5nZXQoKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIGFuaW1UYXJnZXQuc2V0dGVyID0gdGFyZ2V0LnRhcmdldC5zZXQ7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgLy8gQWRkIHRoaXMgbGF5ZXIncyB2YWx1ZSBvbnRvIHRoZSB0YXJnZXQgdmFsdWVcbiAgICAgICAgICAgICAgICAgICAgYW5pbVRhcmdldC51cGRhdGVWYWx1ZShiaW5kZXIubGF5ZXJJbmRleCwgdGFyZ2V0LnZhbHVlKTtcblxuICAgICAgICAgICAgICAgICAgICBhbmltVGFyZ2V0LmNvdW50ZXIrKztcbiAgICAgICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICB0YXJnZXQudGFyZ2V0LnNldCh0YXJnZXQudmFsdWUpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB0YXJnZXQuYmxlbmRDb3VudGVyID0gMDtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuXG4gICAgICAgIC8vIGdpdmUgdGhlIGJpbmRlciBhbiBvcHBvcnR1bml0eSB0byB1cGRhdGUgaXRzZWxmXG4gICAgICAgIC8vIFRPRE86IGlzIHRoaXMgZXZlbiBuZWNlc3Nhcnk/IGJpbmRlciBjb3VsZCBrbm93IHdoZW4gdG8gdXBkYXRlXG4gICAgICAgIC8vIGl0c2VsZiB3aXRob3V0IG91ciBoZWxwLlxuICAgICAgICBiaW5kZXIudXBkYXRlKGRlbHRhVGltZSk7XG4gICAgfVxufVxuXG5leHBvcnQgeyBBbmltRXZhbHVhdG9yIH07XG4iXSwibmFtZXMiOlsiQW5pbUV2YWx1YXRvciIsImNvbnN0cnVjdG9yIiwiYmluZGVyIiwiX2JpbmRlciIsIl9jbGlwcyIsIl9pbnB1dHMiLCJfb3V0cHV0cyIsIl90YXJnZXRzIiwiY2xpcHMiLCJhZGRDbGlwIiwiY2xpcCIsInRhcmdldHMiLCJjdXJ2ZXMiLCJ0cmFjayIsInNuYXBzaG90IiwiaW5wdXRzIiwib3V0cHV0cyIsImkiLCJsZW5ndGgiLCJjdXJ2ZSIsInBhdGhzIiwiaiIsInBhdGgiLCJyZXNvbHZlZCIsInJlc29sdmUiLCJ0YXJnZXQiLCJ0YXJnZXRQYXRoIiwidmFsdWUiLCJibGVuZENvdW50ZXIiLCJrIiwiY29tcG9uZW50cyIsInB1c2giLCJhbmltQ29tcG9uZW50IiwidHlwZSIsInN1YnN0cmluZyIsIkFuaW1UYXJnZXRWYWx1ZSIsIlRZUEVfUVVBVCIsIlRZUEVfVkVDMyIsImxheWVyQ291bnRlciIsInNldE1hc2siLCJsYXllckluZGV4IiwiX3Jlc3VsdHMiLCJyZW1vdmVDbGlwIiwiaW5kZXgiLCJ1bnJlc29sdmUiLCJzcGxpY2UiLCJyZW1vdmVDbGlwcyIsImZpbmRDbGlwIiwibmFtZSIsInJlYmluZCIsImZvckVhY2giLCJhc3NpZ25NYXNrIiwibWFzayIsInVwZGF0ZSIsImRlbHRhVGltZSIsIm9yZGVyIiwibWFwIiwiYyIsIkFuaW1CbGVuZCIsInN0YWJsZVNvcnQiLCJhIiwiYiIsImJsZW5kT3JkZXIiLCJibGVuZFdlaWdodCIsIl91cGRhdGUiLCJpbnB1dCIsIm91dHB1dCIsInNldCIsImJsZW5kIiwiaGFzT3duUHJvcGVydHkiLCJpc1RyYW5zZm9ybSIsImFuaW1UYXJnZXQiLCJjb3VudGVyIiwiYmFzZVZhbHVlIiwiZ2V0Iiwic2V0dGVyIiwidXBkYXRlVmFsdWUiXSwibWFwcGluZ3MiOiI7Ozs7Ozs7O0FBV0EsTUFBTUEsYUFBYSxDQUFDO0VBTWhCQyxXQUFXLENBQUNDLE1BQU0sRUFBRTtJQUNoQixJ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
