/**
 * @license
 * PlayCanvas Engine v1.58.0 revision 6672f604c (DEBUG PROFILER)
 * Copyright 2011-2022 PlayCanvas Ltd. All rights reserved.
 */
import { AnimEvents } from './anim-events.js';

class AnimTrack {
  constructor(name, duration, inputs, outputs, curves, animEvents = new AnimEvents([])) {
    this._name = name;
    this._duration = duration;
    this._inputs = inputs;
    this._outputs = outputs;
    this._curves = curves;
    this._animEvents = animEvents;
  }

  get name() {
    return this._name;
  }

  get duration() {
    return this._duration;
  }

  get inputs() {
    return this._inputs;
  }

  get outputs() {
    return this._outputs;
  }

  get curves() {
    return this._curves;
  }

  set events(animEvents) {
    this._animEvents = animEvents;
  }
  get events() {
    return this._animEvents.events;
  }

  eval(time, snapshot) {
    snapshot._time = time;
    const inputs = this._inputs;
    const outputs = this._outputs;
    const curves = this._curves;
    const cache = snapshot._cache;
    const results = snapshot._results;

    for (let i = 0; i < inputs.length; ++i) {
      cache[i].update(time, inputs[i]._data);
    }

    for (let i = 0; i < curves.length; ++i) {
      const curve = curves[i];
      const output = outputs[curve._output];
      const result = results[i];
      cache[curve._input].eval(result, curve._interpolation, output);
    }
  }
}

export { AnimTrack };
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiYW5pbS10cmFjay5qcyIsInNvdXJjZXMiOlsiLi4vLi4vLi4vLi4vLi4vc3JjL2ZyYW1ld29yay9hbmltL2V2YWx1YXRvci9hbmltLXRyYWNrLmpzIl0sInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IEFuaW1FdmVudHMgfSBmcm9tICcuL2FuaW0tZXZlbnRzLmpzJztcblxuLyoqIEB0eXBlZGVmIHtpbXBvcnQoJy4vYW5pbS1jdXJ2ZS5qcycpLkFuaW1DdXJ2ZX0gQW5pbUN1cnZlICovXG4vKiogQHR5cGVkZWYge2ltcG9ydCgnLi9hbmltLWRhdGEuanMnKS5BbmltRGF0YX0gQW5pbURhdGEgKi9cblxuLyoqXG4gKiBBbiBBbmltVHJhY2sgc3RvcmVzIHRoZSBjdXJ2ZSBkYXRhIG5lY2Vzc2FyeSB0byBhbmltYXRlIGEgc2V0IG9mIHRhcmdldCBub2Rlcy4gSXQgY2FuIGJlIGxpbmtlZFxuICogdG8gdGhlIG5vZGVzIGl0IHNob3VsZCBhbmltYXRlIHVzaW5nIHRoZSB7QGxpbmsgQW5pbUNvbXBvbmVudCNhc3NpZ25BbmltYXRpb259IG1ldGhvZC5cbiAqL1xuY2xhc3MgQW5pbVRyYWNrIHtcbiAgICAvKipcbiAgICAgKiBDcmVhdGUgYSBuZXcgQW5pbVRyYWNrIGluc3RhbmNlLlxuICAgICAqXG4gICAgICogQHBhcmFtIHtzdHJpbmd9IG5hbWUgLSBUaGUgdHJhY2sgbmFtZS5cbiAgICAgKiBAcGFyYW0ge251bWJlcn0gZHVyYXRpb24gLSBUaGUgZHVyYXRpb24gb2YgdGhlIHRyYWNrIGluIHNlY29uZHMuXG4gICAgICogQHBhcmFtIHtBbmltRGF0YVtdfSBpbnB1dHMgLSBMaXN0IG9mIGN1cnZlIGtleSBkYXRhLlxuICAgICAqIEBwYXJhbSB7QW5pbURhdGFbXX0gb3V0cHV0cyAtIExpc3Qgb2YgY3VydmUgdmFsdWUgZGF0YS5cbiAgICAgKiBAcGFyYW0ge0FuaW1DdXJ2ZVtdfSBjdXJ2ZXMgLSBUaGUgbGlzdCBvZiBjdXJ2ZXMuXG4gICAgICogQHBhcmFtIHtBbmltRXZlbnRzfSBhbmltRXZlbnRzIC0gQSBzZXF1ZW5jZSBvZiBhbmltYXRpb24gZXZlbnRzLlxuICAgICAqIEBoaWRlY29uc3RydWN0b3JcbiAgICAgKi9cbiAgICBjb25zdHJ1Y3RvcihuYW1lLCBkdXJhdGlvbiwgaW5wdXRzLCBvdXRwdXRzLCBjdXJ2ZXMsIGFuaW1FdmVudHMgPSBuZXcgQW5pbUV2ZW50cyhbXSkpIHtcbiAgICAgICAgdGhpcy5fbmFtZSA9IG5hbWU7XG4gICAgICAgIHRoaXMuX2R1cmF0aW9uID0gZHVyYXRpb247XG4gICAgICAgIHRoaXMuX2lucHV0cyA9IGlucHV0cztcbiAgICAgICAgdGhpcy5fb3V0cHV0cyA9IG91dHB1dHM7XG4gICAgICAgIHRoaXMuX2N1cnZlcyA9IGN1cnZlcztcbiAgICAgICAgdGhpcy5fYW5pbUV2ZW50cyA9IGFuaW1FdmVudHM7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogR2V0cyB0aGUgbmFtZSBvZiB0aGUgQW5pbVRyYWNrLlxuICAgICAqXG4gICAgICogQHR5cGUge3N0cmluZ31cbiAgICAgKi9cbiAgICBnZXQgbmFtZSgpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuX25hbWU7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogR2V0cyB0aGUgZHVyYXRpb24gb2YgdGhlIEFuaW1UcmFjay5cbiAgICAgKlxuICAgICAqIEB0eXBlIHtudW1iZXJ9XG4gICAgICovXG4gICAgZ2V0IGR1cmF0aW9uKCkge1xuICAgICAgICByZXR1cm4gdGhpcy5fZHVyYXRpb247XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogR2V0cyB0aGUgbGlzdCBvZiBjdXJ2ZSBrZXkgZGF0YSBjb250YWluZWQgaW4gdGhlIEFuaW1UcmFjay5cbiAgICAgKlxuICAgICAqIEB0eXBlIHtBbmltRGF0YVtdfVxuICAgICAqL1xuICAgIGdldCBpbnB1dHMoKSB7XG4gICAgICAgIHJldHVybiB0aGlzLl9pbnB1dHM7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogR2V0cyB0aGUgbGlzdCBvZiBjdXJ2ZSB2YWx1ZXMgY29udGFpbmVkIGluIHRoZSBBbmltVHJhY2suXG4gICAgICpcbiAgICAgKiBAdHlwZSB7QW5pbURhdGFbXX1cbiAgICAgKi9cbiAgICBnZXQgb3V0cHV0cygpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuX291dHB1dHM7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogR2V0cyB0aGUgbGlzdCBvZiBjdXJ2ZXMgY29udGFpbmVkIGluIHRoZSBBbmltVHJhY2suXG4gICAgICpcbiAgICAgKiBAdHlwZSB7QW5pbUN1cnZlW119XG4gICAgICovXG4gICAgZ2V0IGN1cnZlcygpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuX2N1cnZlcztcbiAgICB9XG5cblxuICAgIC8qKlxuICAgICAqIFRoZSBhbmltYXRpb24gZXZlbnRzIHRoYXQgd2lsbCBmaXJlIGR1cmluZyB0aGUgcGxheWJhY2sgb2YgdGhpcyBhbmltIHRyYWNrLlxuICAgICAqXG4gICAgICogQHR5cGUge0FuaW1FdmVudHN9XG4gICAgICovXG4gICAgc2V0IGV2ZW50cyhhbmltRXZlbnRzKSB7XG4gICAgICAgIHRoaXMuX2FuaW1FdmVudHMgPSBhbmltRXZlbnRzO1xuICAgIH1cblxuICAgIGdldCBldmVudHMoKSB7XG4gICAgICAgIHJldHVybiB0aGlzLl9hbmltRXZlbnRzLmV2ZW50cztcbiAgICB9XG5cbiAgICAvLyBldmFsdWF0ZSBhbGwgdHJhY2sgY3VydmVzIGF0IHRoZSBzcGVjaWZpZWQgdGltZSBhbmQgc3RvcmUgcmVzdWx0c1xuICAgIC8vIGluIHRoZSBwcm92aWRlZCBzbmFwc2hvdC5cbiAgICBldmFsKHRpbWUsIHNuYXBzaG90KSB7XG4gICAgICAgIHNuYXBzaG90Ll90aW1lID0gdGltZTtcblxuICAgICAgICBjb25zdCBpbnB1dHMgPSB0aGlzLl9pbnB1dHM7XG4gICAgICAgIGNvbnN0IG91dHB1dHMgPSB0aGlzLl9vdXRwdXRzO1xuICAgICAgICBjb25zdCBjdXJ2ZXMgPSB0aGlzLl9jdXJ2ZXM7XG4gICAgICAgIGNvbnN0IGNhY2hlID0gc25hcHNob3QuX2NhY2hlO1xuICAgICAgICBjb25zdCByZXN1bHRzID0gc25hcHNob3QuX3Jlc3VsdHM7XG5cbiAgICAgICAgLy8gZXZhbHVhdGUgaW5wdXRzXG4gICAgICAgIGZvciAobGV0IGkgPSAwOyBpIDwgaW5wdXRzLmxlbmd0aDsgKytpKSB7XG4gICAgICAgICAgICBjYWNoZVtpXS51cGRhdGUodGltZSwgaW5wdXRzW2ldLl9kYXRhKTtcbiAgICAgICAgfVxuXG4gICAgICAgIC8vIGV2YWx1YXRlIG91dHB1dHNcbiAgICAgICAgZm9yIChsZXQgaSA9IDA7IGkgPCBjdXJ2ZXMubGVuZ3RoOyArK2kpIHtcbiAgICAgICAgICAgIGNvbnN0IGN1cnZlID0gY3VydmVzW2ldO1xuICAgICAgICAgICAgY29uc3Qgb3V0cHV0ID0gb3V0cHV0c1tjdXJ2ZS5fb3V0cHV0XTtcbiAgICAgICAgICAgIGNvbnN0IHJlc3VsdCA9IHJlc3VsdHNbaV07XG4gICAgICAgICAgICBjYWNoZVtjdXJ2ZS5faW5wdXRdLmV2YWwocmVzdWx0LCBjdXJ2ZS5faW50ZXJwb2xhdGlvbiwgb3V0cHV0KTtcbiAgICAgICAgfVxuICAgIH1cbn1cblxuZXhwb3J0IHsgQW5pbVRyYWNrIH07XG4iXSwibmFtZXMiOlsiQW5pbVRyYWNrIiwiY29uc3RydWN0b3IiLCJuYW1lIiwiZHVyYXRpb24iLCJpbnB1dHMiLCJvdXRwdXRzIiwiY3VydmVzIiwiYW5pbUV2ZW50cyIsIkFuaW1FdmVudHMiLCJfbmFtZSIsIl9kdXJhdGlvbiIsIl9pbnB1dHMiLCJfb3V0cHV0cyIsIl9jdXJ2ZXMiLCJfYW5pbUV2ZW50cyIsImV2ZW50cyIsImV2YWwiLCJ0aW1lIiwic25hcHNob3QiLCJfdGltZSIsImNhY2hlIiwiX2NhY2hlIiwicmVzdWx0cyIsIl9yZXN1bHRzIiwiaSIsImxlbmd0aCIsInVwZGF0ZSIsIl9kYXRhIiwiY3VydmUiLCJvdXRwdXQiLCJfb3V0cHV0IiwicmVzdWx0IiwiX2lucHV0Iiwi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
