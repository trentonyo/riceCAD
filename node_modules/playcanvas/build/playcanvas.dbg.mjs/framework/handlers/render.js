/**
 * @license
 * PlayCanvas Engine v1.58.0 revision 6672f604c (DEBUG PROFILER)
 * Copyright 2011-2022 PlayCanvas Ltd. All rights reserved.
 */
import { Render } from '../../scene/render.js';

function onContainerAssetLoaded(containerAsset) {
  const renderAsset = this;
  if (!renderAsset.resource) return;
  const containerResource = containerAsset.resource;
  const render = containerResource.renders && containerResource.renders[renderAsset.data.renderIndex];
  if (render) {
    renderAsset.resource.meshes = render.resource.meshes;
  }
}

function onContainerAssetAdded(containerAsset) {
  const renderAsset = this;
  renderAsset.registry.off('load:' + containerAsset.id, onContainerAssetLoaded, renderAsset);
  renderAsset.registry.on('load:' + containerAsset.id, onContainerAssetLoaded, renderAsset);
  renderAsset.registry.off('remove:' + containerAsset.id, onContainerAssetRemoved, renderAsset);
  renderAsset.registry.once('remove:' + containerAsset.id, onContainerAssetRemoved, renderAsset);
  if (!containerAsset.resource) {
    renderAsset.registry.load(containerAsset);
  } else {
    onContainerAssetLoaded.call(renderAsset, containerAsset);
  }
}
function onContainerAssetRemoved(containerAsset) {
  const renderAsset = this;
  renderAsset.registry.off('load:' + containerAsset.id, onContainerAssetLoaded, renderAsset);
  if (renderAsset.resource) {
    renderAsset.resource.destroy();
  }
}

class RenderHandler {

  constructor(app) {
    this.handlerType = "render";
    this._registry = app.assets;
  }
  load(url, callback, asset) {}
  open(url, data) {
    return new Render();
  }
  patch(asset, registry) {
    if (!asset.data.containerAsset) return;
    const containerAsset = registry.get(asset.data.containerAsset);
    if (!containerAsset) {
      registry.once('add:' + asset.data.containerAsset, onContainerAssetAdded, asset);
      return;
    }
    onContainerAssetAdded.call(asset, containerAsset);
  }
}

export { RenderHandler };
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoicmVuZGVyLmpzIiwic291cmNlcyI6WyIuLi8uLi8uLi8uLi9zcmMvZnJhbWV3b3JrL2hhbmRsZXJzL3JlbmRlci5qcyJdLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBSZW5kZXIgfSBmcm9tICcuLi8uLi9zY2VuZS9yZW5kZXIuanMnO1xuXG4vKiogQHR5cGVkZWYge2ltcG9ydCgnLi4vYXBwLWJhc2UuanMnKS5BcHBCYXNlfSBBcHBCYXNlICovXG4vKiogQHR5cGVkZWYge2ltcG9ydCgnLi9oYW5kbGVyLmpzJykuUmVzb3VyY2VIYW5kbGVyfSBSZXNvdXJjZUhhbmRsZXIgKi9cblxuLy8gVGhlIHNjb3BlIG9mIHRoaXMgZnVuY3Rpb24gaXMgdGhlIHJlbmRlciBhc3NldFxuZnVuY3Rpb24gb25Db250YWluZXJBc3NldExvYWRlZChjb250YWluZXJBc3NldCkge1xuICAgIGNvbnN0IHJlbmRlckFzc2V0ID0gdGhpcztcbiAgICBpZiAoIXJlbmRlckFzc2V0LnJlc291cmNlKSByZXR1cm47XG5cbiAgICBjb25zdCBjb250YWluZXJSZXNvdXJjZSA9IGNvbnRhaW5lckFzc2V0LnJlc291cmNlO1xuXG4gICAgY29uc3QgcmVuZGVyID0gY29udGFpbmVyUmVzb3VyY2UucmVuZGVycyAmJiBjb250YWluZXJSZXNvdXJjZS5yZW5kZXJzW3JlbmRlckFzc2V0LmRhdGEucmVuZGVySW5kZXhdO1xuICAgIGlmIChyZW5kZXIpIHtcbiAgICAgICAgcmVuZGVyQXNzZXQucmVzb3VyY2UubWVzaGVzID0gcmVuZGVyLnJlc291cmNlLm1lc2hlcztcbiAgICB9XG59XG5cbi8vIFRoZSBzY29wZSBvZiB0aGlzIGZ1bmN0aW9uIGlzIHRoZSByZW5kZXIgYXNzZXRcbmZ1bmN0aW9uIG9uQ29udGFpbmVyQXNzZXRBZGRlZChjb250YWluZXJBc3NldCkge1xuICAgIGNvbnN0IHJlbmRlckFzc2V0ID0gdGhpcztcblxuICAgIHJlbmRlckFzc2V0LnJlZ2lzdHJ5Lm9mZignbG9hZDonICsgY29udGFpbmVyQXNzZXQuaWQsIG9uQ29udGFpbmVyQXNzZXRMb2FkZWQsIHJlbmRlckFzc2V0KTtcbiAgICByZW5kZXJBc3NldC5yZWdpc3RyeS5vbignbG9hZDonICsgY29udGFpbmVyQXNzZXQuaWQsIG9uQ29udGFpbmVyQXNzZXRMb2FkZWQsIHJlbmRlckFzc2V0KTtcbiAgICByZW5kZXJBc3NldC5yZWdpc3RyeS5vZmYoJ3JlbW92ZTonICsgY29udGFpbmVyQXNzZXQuaWQsIG9uQ29udGFpbmVyQXNzZXRSZW1vdmVkLCByZW5kZXJBc3NldCk7XG4gICAgcmVuZGVyQXNzZXQucmVnaXN0cnkub25jZSgncmVtb3ZlOicgKyBjb250YWluZXJBc3NldC5pZCwgb25Db250YWluZXJBc3NldFJlbW92ZWQsIHJlbmRlckFzc2V0KTtcblxuICAgIGlmICghY29udGFpbmVyQXNzZXQucmVzb3VyY2UpIHtcbiAgICAgICAgcmVuZGVyQXNzZXQucmVnaXN0cnkubG9hZChjb250YWluZXJBc3NldCk7XG4gICAgfSBlbHNlIHtcbiAgICAgICAgb25Db250YWluZXJBc3NldExvYWRlZC5jYWxsKHJlbmRlckFzc2V0LCBjb250YWluZXJBc3NldCk7XG4gICAgfVxufVxuXG5mdW5jdGlvbiBvbkNvbnRhaW5lckFzc2V0UmVtb3ZlZChjb250YWluZXJBc3NldCkge1xuICAgIGNvbnN0IHJlbmRlckFzc2V0ID0gdGhpcztcblxuICAgIHJlbmRlckFzc2V0LnJlZ2lzdHJ5Lm9mZignbG9hZDonICsgY29udGFpbmVyQXNzZXQuaWQsIG9uQ29udGFpbmVyQXNzZXRMb2FkZWQsIHJlbmRlckFzc2V0KTtcblxuICAgIGlmIChyZW5kZXJBc3NldC5yZXNvdXJjZSkge1xuICAgICAgICByZW5kZXJBc3NldC5yZXNvdXJjZS5kZXN0cm95KCk7XG4gICAgfVxufVxuXG4vKipcbiAqIFJlc291cmNlIGhhbmRsZXIgdXNlZCBmb3IgbG9hZGluZyB7QGxpbmsgUmVuZGVyfSByZXNvdXJjZXMuXG4gKlxuICogQGltcGxlbWVudHMge1Jlc291cmNlSGFuZGxlcn1cbiAqL1xuY2xhc3MgUmVuZGVySGFuZGxlciB7XG4gICAgLyoqXG4gICAgICogVHlwZSBvZiB0aGUgcmVzb3VyY2UgdGhlIGhhbmRsZXIgaGFuZGxlcy5cbiAgICAgKlxuICAgICAqIEB0eXBlIHtzdHJpbmd9XG4gICAgICovXG4gICAgaGFuZGxlclR5cGUgPSBcInJlbmRlclwiO1xuXG4gICAgLyoqXG4gICAgICogQ3JlYXRlIGEgbmV3IFJlbmRlckhhbmRsZXIgaW5zdGFuY2UuXG4gICAgICpcbiAgICAgKiBAcGFyYW0ge0FwcEJhc2V9IGFwcCAtIFRoZSBydW5uaW5nIHtAbGluayBBcHBCYXNlfS5cbiAgICAgKiBAaGlkZWNvbnN0cnVjdG9yXG4gICAgICovXG4gICAgY29uc3RydWN0b3IoYXBwKSB7XG4gICAgICAgIHRoaXMuX3JlZ2lzdHJ5ID0gYXBwLmFzc2V0cztcbiAgICB9XG5cbiAgICBsb2FkKHVybCwgY2FsbGJhY2ssIGFzc2V0KSB7XG4gICAgfVxuXG4gICAgb3Blbih1cmwsIGRhdGEpIHtcbiAgICAgICAgcmV0dXJuIG5ldyBSZW5kZXIoKTtcbiAgICB9XG5cbiAgICBwYXRjaChhc3NldCwgcmVnaXN0cnkpIHtcbiAgICAgICAgaWYgKCFhc3NldC5kYXRhLmNvbnRhaW5lckFzc2V0KVxuICAgICAgICAgICAgcmV0dXJuO1xuXG4gICAgICAgIGNvbnN0IGNvbnRhaW5lckFzc2V0ID0gcmVnaXN0cnkuZ2V0KGFzc2V0LmRhdGEuY29udGFpbmVyQXNzZXQpO1xuICAgICAgICBpZiAoIWNvbnRhaW5lckFzc2V0KSB7XG4gICAgICAgICAgICByZWdpc3RyeS5vbmNlKCdhZGQ6JyArIGFzc2V0LmRhdGEuY29udGFpbmVyQXNzZXQsIG9uQ29udGFpbmVyQXNzZXRBZGRlZCwgYXNzZXQpO1xuICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICB9XG5cbiAgICAgICAgb25Db250YWluZXJBc3NldEFkZGVkLmNhbGwoYXNzZXQsIGNvbnRhaW5lckFzc2V0KTtcbiAgICB9XG59XG5cbmV4cG9ydCB7IFJlbmRlckhhbmRsZXIgfTtcbiJdLCJuYW1lcyI6WyJvbkNvbnRhaW5lckFzc2V0TG9hZGVkIiwiY29udGFpbmVyQXNzZXQiLCJyZW5kZXJBc3NldCIsInJlc291cmNlIiwiY29udGFpbmVyUmVzb3VyY2UiLCJyZW5kZXIiLCJyZW5kZXJzIiwiZGF0YSIsInJlbmRlckluZGV4IiwibWVzaGVzIiwib25Db250YWluZXJBc3NldEFkZGVkIiwicmVnaXN0cnkiLCJvZmYiLCJpZCIsIm9uIiwib25Db250YWluZXJBc3NldFJlbW92ZWQiLCJvbmNlIiwibG9hZCIsImNhbGwiLCJkZXN0cm95IiwiUmVuZGVySGFuZGxlciIsImNvbnN0cnVjdG9yIiwiYXBwIiwiaGFuZGxlclR5cGUiLCJfcmVnaXN0cnkiLCJhc3NldHMiLCJ1cmwiLCJjYWxsYmFjayIsImFzc2V0Iiwib3BlbiIsIlJlbmRlciIsInBhdGNoIiwiZ2V0Il0sIm1hcHBpbmdzIjoiOzs7Ozs7O0FBTUEsU0FBU0Esc0JBQXNCLENBQUNDLGNBQWMsRUFBRTtFQUM1QyxNQUFNQyxXQUFXLEdBQUcsSUFBSSxDQUFBO0FBQ3hCLEVBQUEsSUFBSSxDQUFDQSxXQUFXLENBQUNDLFFBQVEsRUFBRSxPQUFBO0FBRTNCLEVBQUEsTUFBTUMsaUJBQWlCLEdBQUdILGNBQWMsQ0FBQ0UsUUFBUSxDQUFBO0FBRWpELEVBQUEsTUFBTUUsTUFBTSxHQUFHRCxpQkFBaUIsQ0FBQ0UsT0FBTyxJQUFJRixpQkFBaUIsQ0FBQ0UsT0FBTyxDQUFDSixXQUFXLENBQUNLLElBQUksQ0FBQ0MsV0FBVyxDQUFDLENBQUE7QUFDbkcsRUFBQSxJQUFJSCxNQUFNLEVBQUU7SUFDUkgsV0FBVyxDQUFDQyxRQUFRLENBQUNNLE1BQU0sR0FBR0osTUFBTSxDQUFDRixRQUFRLENBQUNNLE1BQU0sQ0FBQTtBQUN4RCxHQUFBO0FBQ0osQ0FBQTs7QUFHQSxTQUFTQyxxQkFBcUIsQ0FBQ1QsY0FBYyxFQUFFO0VBQzNDLE1BQU1DLFdBQVcsR0FBRyxJQUFJLENB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
