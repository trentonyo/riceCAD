/**
 * @license
 * PlayCanvas Engine v1.58.0 revision 6672f604c (DEBUG PROFILER)
 * Copyright 2011-2022 PlayCanvas Ltd. All rights reserved.
 */
import { Asset } from '../../asset/asset.js';
import { Channel3d } from '../../../platform/audio/channel3d.js';
import { Component } from '../component.js';

class AudioSourceComponent extends Component {
  constructor(system, entity) {
    super(system, entity);
    this.on('set_assets', this.onSetAssets, this);
    this.on('set_loop', this.onSetLoop, this);
    this.on('set_volume', this.onSetVolume, this);
    this.on('set_pitch', this.onSetPitch, this);
    this.on('set_minDistance', this.onSetMinDistance, this);
    this.on('set_maxDistance', this.onSetMaxDistance, this);
    this.on('set_rollOffFactor', this.onSetRollOffFactor, this);
    this.on('set_distanceModel', this.onSetDistanceModel, this);
    this.on('set_3d', this.onSet3d, this);
  }

  play(name) {
    if (!this.enabled || !this.entity.enabled) {
      return;
    }
    if (this.channel) {
      this.stop();
    }
    let channel;
    const componentData = this.data;
    if (componentData.sources[name]) {
      if (!componentData['3d']) {
        channel = this.system.manager.playSound(componentData.sources[name], componentData);
        componentData.currentSource = name;
        componentData.channel = channel;
      } else {
        const pos = this.entity.getPosition();
        channel = this.system.manager.playSound3d(componentData.sources[name], pos, componentData);
        componentData.currentSource = name;
        componentData.channel = channel;
      }
    }
  }

  pause() {
    if (this.channel) {
      this.channel.pause();
    }
  }

  unpause() {
    if (this.channel && this.channel.paused) {
      this.channel.unpause();
    }
  }

  stop() {
    if (this.channel) {
      this.channel.stop();
      this.channel = null;
    }
  }
  onSetAssets(name, oldValue, newValue) {
    const newAssets = [];
    const len = newValue.length;
    if (oldValue && oldValue.length) {
      for (let i = 0; i < oldValue.length; i++) {
        if (oldValue[i]) {
          const asset = this.system.app.assets.get(oldValue[i]);
          if (asset) {
            asset.off('change', this.onAssetChanged, this);
            asset.off('remove', this.onAssetRemoved, this);
            if (this.currentSource === asset.name) {
              this.stop();
            }
          }
        }
      }
    }
    if (len) {
      for (let i = 0; i < len; i++) {
        if (oldValue.indexOf(newValue[i]) < 0) {
          if (newValue[i] instanceof Asset) {
            newAssets.push(newValue[i].id);
          } else {
            newAssets.push(newValue[i]);
          }
        }
      }
    }

    if (!this.system._inTools && newAssets.length) {
      this.loadAudioSourceAssets(newAssets);
    }
  }
  onAssetChanged(asset, attribute, newValue, oldValue) {
    if (attribute === 'resource') {
      const sources = this.data.sources;
      if (sources) {
        this.data.sources[asset.name] = newValue;
        if (this.data.currentSource === asset.name) {
          if (this.channel) {
            if (this.channel.paused) {
              this.play(asset.name);
              this.pause();
            } else {
              this.play(asset.name);
            }
          }
        }
      }
    }
  }
  onAssetRemoved(asset) {
    asset.off('remove', this.onAssetRemoved, this);
    if (this.data.sources[asset.name]) {
      delete this.data.sources[asset.name];
      if (this.data.currentSource === asset.name) {
        this.stop();
        this.data.currentSource = null;
      }
    }
  }
  onSetLoop(name, oldValue, newValue) {
    if (oldValue !== newValue) {
      if (this.channel) {
        this.channel.setLoop(newValue);
      }
    }
  }
  onSetVolume(name, oldValue, newValue) {
    if (oldValue !== newValue) {
      if (this.channel) {
        this.channel.setVolume(newValue);
      }
    }
  }
  onSetPitch(name, oldValue, newValue) {
    if (oldValue !== newValue) {
      if (this.channel) {
        this.channel.setPitch(newValue);
      }
    }
  }
  onSetMaxDistance(name, oldValue, newValue) {
    if (oldValue !== newValue) {
      if (this.channel instanceof Channel3d) {
        this.channel.setMaxDistance(newValue);
      }
    }
  }
  onSetMinDistance(name, oldValue, newValue) {
    if (oldValue !== newValue) {
      if (this.channel instanceof Channel3d) {
        this.channel.setMinDistance(newValue);
      }
    }
  }
  onSetRollOffFactor(name, oldValue, newValue) {
    if (oldValue !== newValue) {
      if (this.channel instanceof Channel3d) {
        this.channel.setRollOffFactor(newValue);
      }
    }
  }
  onSetDistanceModel(name, oldValue, newValue) {
    if (oldValue !== newValue) {
      if (this.channel instanceof Channel3d) {
        this.channel.setDistanceModel(newValue);
      }
    }
  }
  onSet3d(name, oldValue, newValue) {
    if (oldValue !== newValue) {
      if (this.system.initialized && this.currentSource) {
        let paused = false;
        let suspended = false;
        if (this.channel) {
          paused = this.channel.paused;
          suspended = this.channel.suspended;
        }
        this.play(this.currentSource);
        if (this.channel) {
          this.channel.paused = paused;
          this.channel.suspended = suspended;
        }
      }
    }
  }
  onEnable() {
    const assets = this.data.assets;
    if (assets) {
      const registry = this.system.app.assets;
      for (let i = 0, len = assets.length; i < len; i++) {
        let asset = assets[i];
        if (!(asset instanceof Asset)) asset = registry.get(asset);
        if (asset && !asset.resource) {
          registry.load(asset);
        }
      }
    }
    if (this.system.initialized) {
      if (this.data.activate && !this.channel) {
        this.play(this.currentSource);
      } else {
        this.unpause();
      }
    }
  }
  onDisable() {
    this.pause();
  }
  loadAudioSourceAssets(ids) {
    const assets = ids.map(id => {
      return this.system.app.assets.get(id);
    });
    const sources = {};
    let currentSource = null;
    let count = assets.length;

    const _error = e => {
      count--;
    };

    const _done = () => {
      this.data.sources = sources;
      this.data.currentSource = currentSource;
      if (this.enabled && this.activate && currentSource) {
        this.onEnable();
      }
    };
    assets.forEach((asset, index) => {
      if (asset) {
        currentSource = currentSource || asset.name;

        asset.off('change', this.onAssetChanged, this);
        asset.on('change', this.onAssetChanged, this);
        asset.off('remove', this.onAssetRemoved, this);
        asset.on('remove', this.onAssetRemoved, this);
        asset.off('error', _error, this);
        asset.on('error', _error, this);
        asset.ready(asset => {
          sources[asset.name] = asset.resource;
          count--;
          if (count === 0) {
            _done();
          }
        });
        if (!asset.resource && this.enabled && this.entity.enabled) this.system.app.assets.load(asset);
      } else {
        count--;
        if (count === 0) {
          _done();
        }
        this.system.app.assets.on('add:' + ids[index], asset => {
          asset.ready(asset => {
            this.data.sources[asset.name] = asset.resource;
          });
          if (!asset.resource) this.system.app.assets.load(asset);
        });
      }
    });
  }
}

export { AudioSourceComponent };
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiY29tcG9uZW50LmpzIiwic291cmNlcyI6WyIuLi8uLi8uLi8uLi8uLi9zcmMvZnJhbWV3b3JrL2NvbXBvbmVudHMvYXVkaW8tc291cmNlL2NvbXBvbmVudC5qcyJdLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBBc3NldCB9IGZyb20gJy4uLy4uL2Fzc2V0L2Fzc2V0LmpzJztcblxuaW1wb3J0IHsgQ2hhbm5lbDNkIH0gZnJvbSAnLi4vLi4vLi4vcGxhdGZvcm0vYXVkaW8vY2hhbm5lbDNkLmpzJztcblxuaW1wb3J0IHsgQ29tcG9uZW50IH0gZnJvbSAnLi4vY29tcG9uZW50LmpzJztcblxuLyoqIEB0eXBlZGVmIHtpbXBvcnQoJy4vc3lzdGVtLmpzJykuQXVkaW9Tb3VyY2VDb21wb25lbnRTeXN0ZW19IEF1ZGlvU291cmNlQ29tcG9uZW50U3lzdGVtICovXG4vKiogQHR5cGVkZWYge2ltcG9ydCgnLi4vLi4vZW50aXR5LmpzJykuRW50aXR5fSBFbnRpdHkgKi9cblxuLyoqXG4gKiBUaGUgQXVkaW9Tb3VyY2UgQ29tcG9uZW50IGNvbnRyb2xzIHBsYXliYWNrIG9mIGFuIGF1ZGlvIHNhbXBsZS4gVGhpcyBjbGFzcyB3aWxsIGJlIGRlcHJlY2F0ZWRcbiAqIGluIGZhdm9yIG9mIHtAbGluayBTb3VuZENvbXBvbmVudH0uXG4gKlxuICogQHByb3BlcnR5IHtBc3NldFtdfSBhc3NldHMgVGhlIGxpc3Qgb2YgYXVkaW8gYXNzZXRzIC0gY2FuIGFsc28gYmUgYW4gYXJyYXkgb2YgYXNzZXQgaWRzLlxuICogQHByb3BlcnR5IHtib29sZWFufSBhY3RpdmF0ZSBJZiB0cnVlIHRoZSBhdWRpbyB3aWxsIGJlZ2luIHBsYXlpbmcgYXMgc29vbiBhcyB0aGUgc2NlbmUgaXNcbiAqIGxvYWRlZC5cbiAqIEBwcm9wZXJ0eSB7bnVtYmVyfSB2b2x1bWUgVGhlIHZvbHVtZSBtb2RpZmllciB0byBwbGF5IHRoZSBhdWRpbyB3aXRoLiBJbiByYW5nZSAwLTEuXG4gKiBAcHJvcGVydHkge251bWJlcn0gcGl0Y2ggVGhlIHBpdGNoIG1vZGlmaWVyIHRvIHBsYXkgdGhlIGF1ZGlvIHdpdGguIE11c3QgYmUgbGFyZ2VyIHRoYW4gMC4wMS5cbiAqIEBwcm9wZXJ0eSB7Ym9vbGVhbn0gbG9vcCBJZiB0cnVlIHRoZSBhdWRpbyB3aWxsIHJlc3RhcnQgd2hlbiBpdCBmaW5pc2hlcyBwbGF5aW5nLlxuICogQHByb3BlcnR5IHtib29sZWFufSAzZCBJZiB0cnVlIHRoZSBhdWRpbyB3aWxsIHBsYXkgYmFjayBhdCB0aGUgbG9jYXRpb24gb2YgdGhlIGVudGl0eSBpbiBzcGFjZSxcbiAqIHNvIHRoZSBhdWRpbyB3aWxsIGJlIGFmZmVjdCBieSB0aGUgcG9zaXRpb24gb2YgdGhlIHtAbGluayBBdWRpb0xpc3RlbmVyQ29tcG9uZW50fS5cbiAqIEBwcm9wZXJ0eSB7c3RyaW5nfSBkaXN0YW5jZU1vZGVsIERldGVybWluZXMgd2hpY2ggYWxnb3JpdGhtIHRvIHVzZSB0byByZWR1Y2UgdGhlIHZvbHVtZSBvZiB0aGVcbiAqIGF1ZGlvIGFzIGl0IG1vdmVzIGF3YXkgZnJvbSB0aGUgbGlzdGVuZXIuIENhbiBiZTpcbiAqXG4gKiAtIFwibGluZWFyXCJcbiAqIC0gXCJpbnZlcnNlXCJcbiAqIC0gXCJleHBvbmVudGlhbFwiXG4gKlxuICogRGVmYXVsdCBpcyBcImludmVyc2VcIi5cbiAqIEBwcm9wZXJ0eSB7bnVtYmVyfSBtaW5EaXN0YW5jZSBUaGUgbWluaW11bSBkaXN0YW5jZSBmcm9tIHRoZSBsaXN0ZW5lciBhdCB3aGljaCBhdWRpbyBmYWxsb2ZmXG4gKiBiZWdpbnMuXG4gKiBAcHJvcGVydHkge251bWJlcn0gbWF4RGlzdGFuY2UgVGhlIG1heGltdW0gZGlzdGFuY2UgZnJvbSB0aGUgbGlzdGVuZXIgYXQgd2hpY2ggYXVkaW8gZmFsbG9mZlxuICogc3RvcHMuIE5vdGUgdGhlIHZvbHVtZSBvZiB0aGUgYXVkaW8gaXMgbm90IDAgYWZ0ZXIgdGhpcyBkaXN0YW5jZSwgYnV0IGp1c3QgZG9lc24ndCBmYWxsIG9mZlxuICogYW55bW9yZS5cbiAqIEBwcm9wZXJ0eSB7bnVtYmVyfSByb2xsT2ZmRmFjdG9yIFRoZSBmYWN0b3IgdXNlZCBpbiB0aGUgZmFsbG9mZiBlcXVhdGlvbi5cbiAqIEBhdWdtZW50cyBDb21wb25lbnRcbiAqIEBpZ25vcmVcbiAqL1xuY2xhc3MgQXVkaW9Tb3VyY2VDb21wb25lbnQgZXh0ZW5kcyBDb21wb25lbnQge1xuICAgIC8qKlxuICAgICAqIENyZWF0ZSBhIG5ldyBBdWRpb1NvdXJjZSBDb21wb25lbnQgaW5zdGFuY2UuXG4gICAgICpcbiAgICAgKiBAcGFyYW0ge0F1ZGlvU291cmNlQ29tcG9uZW50U3lzdGVtfSBzeXN0ZW0gLSBUaGUgQ29tcG9uZW50U3lzdGVtIHRoYXQgY3JlYXRlZFxuICAgICAqIHRoaXMgY29tcG9uZW50LlxuICAgICAqIEBwYXJhbSB7RW50aXR5fSBlbnRpdHkgLSBUaGUgZW50aXR5IHRoYXQgdGhlIENvbXBvbmVudCBpcyBhdHRhY2hlZCB0by5cbiAgICAgKi9cbiAgICBjb25zdHJ1Y3RvcihzeXN0ZW0sIGVudGl0eSkge1xuICAgICAgICBzdXBlcihzeXN0ZW0sIGVudGl0eSk7XG5cbiAgICAgICAgdGhpcy5vbignc2V0X2Fzc2V0cycsIHRoaXMub25TZXRBc3NldHMsIHRoaXMpO1xuICAgICAgICB0aGlzLm9uKCdzZXRfbG9vcCcsIHRoaXMub25TZXRMb29wLCB0aGlzKTtcbiAgICAgICAgdGhpcy5vbignc2V0X3ZvbHVtZScsIHRoaXMub25TZXRWb2x1bWUsIHRoaXMpO1xuICAgICAgICB0aGlzLm9uKCdzZXRfcGl0Y2gnLCB0aGlzLm9uU2V0UGl0Y2gsIHRoaXMpO1xuICAgICAgICB0aGlzLm9uKCdzZXRfbWluRGlzdGFuY2UnLCB0aGlzLm9uU2V0TWluRGlzdGFuY2UsIHRoaXMpO1xuICAgICAgICB0aGlzLm9uKCdzZXRfbWF4RGlzdGFuY2UnLCB0aGlzLm9uU2V0TWF4RGlzdGFuY2UsIHRoaXMpO1xuICAgICAgICB0aGlzLm9uKCdzZXRfcm9sbE9mZkZhY3RvcicsIHRoaXMub25TZXRSb2xsT2ZmRmFjdG9yLCB0aGlzKTtcbiAgICAgICAgdGhpcy5vbignc2V0X2Rpc3RhbmNlTW9kZWwnLCB0aGlzLm9uU2V0RGlzdGFuY2VNb2RlbCwgdGhpcyk7XG4gICAgICAgIHRoaXMub24oJ3NldF8zZCcsIHRoaXMub25TZXQzZCwgdGhpcyk7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogQmVnaW4gcGxheWJhY2sgb2YgYW4gYXVkaW8gYXNzZXQgaW4gdGhlIGNvbXBvbmVudCBhdHRhY2hlZCB0byBhbiBlbnRpdHkuXG4gICAgICpcbiAgICAgKiBAcGFyYW0ge3N0cmluZ30gbmFtZSAtIFRoZSBuYW1lIG9mIHRoZSBBc3NldCB0byBwbGF5LlxuICAgICAqL1xuICAgIHBsYXkobmFtZSkge1xuICAgICAgICBpZiAoIXRoaXMuZW5hYmxlZCB8fCAhdGhpcy5lbnRpdHkuZW5hYmxlZCkge1xuICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICB9XG5cbiAgICAgICAgaWYgKHRoaXMuY2hhbm5lbCkge1xuICAgICAgICAgICAgLy8gSWYgd2UgYXJlIGN1cnJlbnRseSBwbGF5aW5nIGEgY2hhbm5lbCwgc3RvcCBpdC5cbiAgICAgICAgICAgIHRoaXMuc3RvcCgpO1xuICAgICAgICB9XG5cbiAgICAgICAgbGV0IGNoYW5uZWw7XG4gICAgICAgIGNvbnN0IGNvbXBvbmVudERhdGEgPSB0aGlzLmRhdGE7XG4gICAgICAgIGlmIChjb21wb25lbnREYXRhLnNvdXJjZXNbbmFtZV0pIHtcbiAgICAgICAgICAgIGlmICghY29tcG9uZW50RGF0YVsnM2QnXSkge1xuICAgICAgICAgICAgICAgIGNoYW5uZWwgPSB0aGlzLnN5c3RlbS5tYW5hZ2VyLnBsYXlTb3VuZChjb21wb25lbnREYXRhLnNvdXJjZXNbbmFtZV0sIGNvbXBvbmVudERhdGEpO1xuICAgICAgICAgICAgICAgIGNvbXBvbmVudERhdGEuY3VycmVudFNvdXJjZSA9IG5hbWU7XG4gICAgICAgICAgICAgICAgY29tcG9uZW50RGF0YS5jaGFubmVsID0gY2hhbm5lbDtcbiAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgY29uc3QgcG9zID0gdGhpcy5lbnRpdHkuZ2V0UG9zaXRpb24oKTtcbiAgICAgICAgICAgICAgICBjaGFubmVsID0gdGhpcy5zeXN0ZW0ubWFuYWdlci5wbGF5U291bmQzZChjb21wb25lbnREYXRhLnNvdXJjZXNbbmFtZV0sIHBvcywgY29tcG9uZW50RGF0YSk7XG4gICAgICAgICAgICAgICAgY29tcG9uZW50RGF0YS5jdXJyZW50U291cmNlID0gbmFtZTtcbiAgICAgICAgICAgICAgICBjb21wb25lbnREYXRhLmNoYW5uZWwgPSBjaGFubmVsO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogUGF1c2UgcGxheWJhY2sgb2YgdGhlIGF1ZGlvIHRoYXQgaXMgcGxheWluZyBvbiB0aGUgRW50aXR5LiBQbGF5YmFjayBjYW4gYmUgcmVzdW1lZCBieVxuICAgICAqIGNhbGxpbmcge0BsaW5rIEF1ZGlvU291cmNlQ29tcG9uZW50I3VucGF1c2V9LlxuICAgICAqL1xuICAgIHBhdXNlKCkge1xuICAgICAgICBpZiAodGhpcy5jaGFubmVsKSB7XG4gICAgICAgICAgICB0aGlzLmNoYW5uZWwucGF1c2UoKTtcbiAgICAgICAgfVxuICAgIH1cblxuICAgIC8qKlxuICAgICAqIFJlc3VtZSBwbGF5YmFjayBvZiB0aGUgYXVkaW8gaWYgcGF1c2VkLiBQbGF5YmFjayBpcyByZXN1bWVkIGF0IHRoZSB0aW1lIGl0IHdhcyBwYXVzZWQuXG4gICAgICovXG4gICAgdW5wYXVzZSgpIHtcbiAgICAgICAgaWYgKHRoaXMuY2hhbm5lbCAmJiB0aGlzLmNoYW5uZWwucGF1c2VkKSB7XG4gICAgICAgICAgICB0aGlzLmNoYW5uZWwudW5wYXVzZSgpO1xuICAgICAgICB9XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogU3RvcCBwbGF5YmFjayBvbiBhbiBFbnRpdHkuIFBsYXliYWNrIGNhbiBub3QgYmUgcmVzdW1lZCBhZnRlciBiZWluZyBzdG9wcGVkLlxuICAgICAqL1xuICAgIHN0b3AoKSB7XG4gICAgICAgIGlmICh0aGlzLmNoYW5uZWwpIHtcbiAgICAgICAgICAgIHRoaXMuY2hhbm5lbC5zdG9wKCk7XG4gICAgICAgICAgICB0aGlzLmNoYW5uZWwgPSBudWxsO1xuICAgICAgICB9XG4gICAgfVxuXG4gICAgb25TZXRBc3NldHMobmFtZSwgb2xkVmFsdWUsIG5ld1ZhbHVlKSB7XG4gICAgICAgIGNvbnN0IG5ld0Fzc2V0cyA9IFtdO1xuICAgICAgICBjb25zdCBsZW4gPSBuZXdWYWx1ZS5sZW5ndGg7XG5cbiAgICAgICAgaWYgKG9sZFZhbHVlICYmIG9sZFZhbHVlLmxlbmd0aCkge1xuICAgICAgICAgICAgZm9yIChsZXQgaSA9IDA7IGkgPCBvbGRWYWx1ZS5sZW5ndGg7IGkrKykge1xuICAgICAgICAgICAgICAgIC8vIHVuc3Vic2NyaWJlIGZyb20gY2hhbmdlIGV2ZW50IGZvciBvbGQgYXNzZXRzXG4gICAgICAgICAgICAgICAgaWYgKG9sZFZhbHVlW2ldKSB7XG4gICAgICAgICAgICAgICAgICAgIGNvbnN0IGFzc2V0ID0gdGhpcy5zeXN0ZW0uYXBwLmFzc2V0cy5nZXQob2xkVmFsdWVbaV0pO1xuICAgICAgICAgICAgICAgICAgICBpZiAoYXNzZXQpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGFzc2V0Lm9mZignY2hhbmdlJywgdGhpcy5vbkFzc2V0Q2hhbmdlZCwgdGhpcyk7XG4gICAgICAgICAgICAgICAgICAgICAgICBhc3NldC5vZmYoJ3JlbW92ZScsIHRoaXMub25Bc3NldFJlbW92ZWQsIHRoaXMpO1xuXG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAodGhpcy5jdXJyZW50U291cmNlID09PSBhc3NldC5uYW1lKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5zdG9wKCk7XG4gICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cblxuICAgICAgICBpZiAobGVuKSB7XG4gICAgICAgICAgICBmb3IgKGxldCBpID0gMDsgaSA8IGxlbjsgaSsrKSB7XG4gICAgICAgICAgICAgICAgaWYgKG9sZFZhbHVlLmluZGV4T2YobmV3VmFsdWVbaV0pIDwgMCkge1xuICAgICAgICAgICAgICAgICAgICBpZiAobmV3VmFsdWVbaV0gaW5zdGFuY2VvZiBBc3NldCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgbmV3QXNzZXRzLnB1c2gobmV3VmFsdWVbaV0uaWQpO1xuICAgICAgICAgICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICAgICAgbmV3QXNzZXRzLnB1c2gobmV3VmFsdWVbaV0pO1xuICAgICAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cblxuICAgICAgICAgLy8gT25seSBsb2FkIGF1ZGlvIGRhdGEgaWYgd2UgYXJlIG5vdCBpbiB0aGUgdG9vbHMgYW5kIGlmIGNoYW5nZXMgaGF2ZSBiZWVuIG1hZGVcbiAgICAgICAgaWYgKCF0aGlzLnN5c3RlbS5faW5Ub29scyAmJiBuZXdBc3NldHMubGVuZ3RoKSB7XG4gICAgICAgICAgICB0aGlzLmxvYWRBdWRpb1NvdXJjZUFzc2V0cyhuZXdBc3NldHMpO1xuICAgICAgICB9XG4gICAgfVxuXG4gICAgb25Bc3NldENoYW5nZWQoYXNzZXQsIGF0dHJpYnV0ZSwgbmV3VmFsdWUsIG9sZFZhbHVlKSB7XG4gICAgICAgIGlmIChhdHRyaWJ1dGUgPT09ICdyZXNvdXJjZScpIHtcbiAgICAgICAgICAgIGNvbnN0IHNvdXJjZXMgPSB0aGlzLmRhdGEuc291cmNlcztcbiAgICAgICAgICAgIGlmIChzb3VyY2VzKSB7XG4gICAgICAgICAgICAgICAgdGhpcy5kYXRhLnNvdXJjZXNbYXNzZXQubmFtZV0gPSBuZXdWYWx1ZTtcbiAgICAgICAgICAgICAgICBpZiAodGhpcy5kYXRhLmN1cnJlbnRTb3VyY2UgPT09IGFzc2V0Lm5hbWUpIHtcbiAgICAgICAgICAgICAgICAgICAgLy8gcmVwbGFjZSBjdXJyZW50IHNvdW5kIGlmIG5lY2Vzc2FyeVxuICAgICAgICAgICAgICAgICAgICBpZiAodGhpcy5jaGFubmVsKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAodGhpcy5jaGFubmVsLnBhdXNlZCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMucGxheShhc3NldC5uYW1lKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB0aGlzLnBhdXNlKCk7XG4gICAgICAgICAgICAgICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMucGxheShhc3NldC5uYW1lKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgIH1cblxuICAgIG9uQXNzZXRSZW1vdmVkKGFzc2V0KSB7XG4gICAgICAgIGFzc2V0Lm9mZigncmVtb3ZlJywgdGhpcy5vbkFzc2V0UmVtb3ZlZCwgdGhpcyk7XG4gICAgICAgIGlmICh0aGlzLmRhdGEuc291cmNlc1thc3NldC5uYW1lXSkge1xuICAgICAgICAgICAgZGVsZXRlIHRoaXMuZGF0YS5zb3VyY2VzW2Fzc2V0Lm5hbWVdO1xuICAgICAgICAgICAgaWYgKHRoaXMuZGF0YS5jdXJyZW50U291cmNlID09PSBhc3NldC5uYW1lKSB7XG4gICAgICAgICAgICAgICAgdGhpcy5zdG9wKCk7XG4gICAgICAgICAgICAgICAgdGhpcy5kYXRhLmN1cnJlbnRTb3VyY2UgPSBudWxsO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgfVxuXG4gICAgb25TZXRMb29wKG5hbWUsIG9sZFZhbHVlLCBuZXdWYWx1ZSkge1xuICAgICAgICBpZiAob2xkVmFsdWUgIT09IG5ld1ZhbHVlKSB7XG4gICAgICAgICAgICBpZiAodGhpcy5jaGFubmVsKSB7XG4gICAgICAgICAgICAgICAgdGhpcy5jaGFubmVsLnNldExvb3AobmV3VmFsdWUpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgfVxuXG4gICAgb25TZXRWb2x1bWUobmFtZSwgb2xkVmFsdWUsIG5ld1ZhbHVlKSB7XG4gICAgICAgIGlmIChvbGRWYWx1ZSAhPT0gbmV3VmFsdWUpIHtcbiAgICAgICAgICAgIGlmICh0aGlzLmNoYW5uZWwpIHtcbiAgICAgICAgICAgICAgICB0aGlzLmNoYW5uZWwuc2V0Vm9sdW1lKG5ld1ZhbHVlKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgIH1cblxuICAgIG9uU2V0UGl0Y2gobmFtZSwgb2xkVmFsdWUsIG5ld1ZhbHVlKSB7XG4gICAgICAgIGlmIChvbGRWYWx1ZSAhPT0gbmV3VmFsdWUpIHtcbiAgICAgICAgICAgIGlmICh0aGlzLmNoYW5uZWwpIHtcbiAgICAgICAgICAgICAgICB0aGlzLmNoYW5uZWwuc2V0UGl0Y2gobmV3VmFsdWUpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgfVxuXG4gICAgb25TZXRNYXhEaXN0YW5jZShuYW1lLCBvbGRWYWx1ZSwgbmV3VmFsdWUpIHtcbiAgICAgICAgaWYgKG9sZFZhbHVlICE9PSBuZXdWYWx1ZSkge1xuICAgICAgICAgICAgaWYgKHRoaXMuY2hhbm5lbCBpbnN0YW5jZW9mIENoYW5uZWwzZCkge1xuICAgICAgICAgICAgICAgIHRoaXMuY2hhbm5lbC5zZXRNYXhEaXN0YW5jZShuZXdWYWx1ZSk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICB9XG5cbiAgICBvblNldE1pbkRpc3RhbmNlKG5hbWUsIG9sZFZhbHVlLCBuZXdWYWx1ZSkge1xuICAgICAgICBpZiAob2xkVmFsdWUgIT09IG5ld1ZhbHVlKSB7XG4gICAgICAgICAgICBpZiAodGhpcy5jaGFubmVsIGluc3RhbmNlb2YgQ2hhbm5lbDNkKSB7XG4gICAgICAgICAgICAgICAgdGhpcy5jaGFubmVsLnNldE1pbkRpc3RhbmNlKG5ld1ZhbHVlKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgIH1cblxuICAgIG9uU2V0Um9sbE9mZkZhY3RvcihuYW1lLCBvbGRWYWx1ZSwgbmV3VmFsdWUpIHtcbiAgICAgICAgaWYgKG9sZFZhbHVlICE9PSBuZXdWYWx1ZSkge1xuICAgICAgICAgICAgaWYgKHRoaXMuY2hhbm5lbCBpbnN0YW5jZW9mIENoYW5uZWwzZCkge1xuICAgICAgICAgICAgICAgIHRoaXMuY2hhbm5lbC5zZXRSb2xsT2ZmRmFjdG9yKG5ld1ZhbHVlKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgIH1cblxuICAgIG9uU2V0RGlzdGFuY2VNb2RlbChuYW1lLCBvbGRWYWx1ZSwgbmV3VmFsdWUpIHtcbiAgICAgICAgaWYgKG9sZFZhbHVlICE9PSBuZXdWYWx1ZSkge1xuICAgICAgICAgICAgaWYgKHRoaXMuY2hhbm5lbCBpbnN0YW5jZW9mIENoYW5uZWwzZCkge1xuICAgICAgICAgICAgICAgIHRoaXMuY2hhbm5lbC5zZXREaXN0YW5jZU1vZGVsKG5ld1ZhbHVlKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgIH1cblxuICAgIG9uU2V0M2QobmFtZSwgb2xkVmFsdWUsIG5ld1ZhbHVlKSB7XG4gICAgICAgIGlmIChvbGRWYWx1ZSAhPT0gbmV3VmFsdWUpIHtcbiAgICAgICAgICAgIGlmICh0aGlzLnN5c3RlbS5pbml0aWFsaXplZCAmJiB0aGlzLmN1cnJlbnRTb3VyY2UpIHtcbiAgICAgICAgICAgICAgICBsZXQgcGF1c2VkID0gZmFsc2U7XG4gICAgICAgICAgICAgICAgbGV0IHN1c3BlbmRlZCA9IGZhbHNlO1xuICAgICAgICAgICAgICAgIGlmICh0aGlzLmNoYW5uZWwpIHtcbiAgICAgICAgICAgICAgICAgICAgcGF1c2VkID0gdGhpcy5jaGFubmVsLnBhdXNlZDtcbiAgICAgICAgICAgICAgICAgICAgc3VzcGVuZGVkID0gdGhpcy5jaGFubmVsLnN1c3BlbmRlZDtcbiAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgICB0aGlzLnBsYXkodGhpcy5jdXJyZW50U291cmNlKTtcblxuICAgICAgICAgICAgICAgIGlmICh0aGlzLmNoYW5uZWwpIHtcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5jaGFubmVsLnBhdXNlZCA9IHBhdXNlZDtcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5jaGFubmVsLnN1c3BlbmRlZCA9IHN1c3BlbmRlZDtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICB9XG5cbiAgICBvbkVuYWJsZSgpIHtcbiAgICAgICAgLy8gbG9hZCBhc3NldHMgdGhhdCBoYXZlbid0IGJlZW4gbG9hZGVkIHlldFxuICAgICAgICBjb25zdCBhc3NldHMgPSB0aGlzLmRhdGEuYXNzZXRzO1xuICAgICAgICBpZiAoYXNzZXRzKSB7XG4gICAgICAgICAgICBjb25zdCByZWdpc3RyeSA9IHRoaXMuc3lzdGVtLmFwcC5hc3NldHM7XG5cbiAgICAgICAgICAgIGZvciAobGV0IGkgPSAwLCBsZW4gPSBhc3NldHMubGVuZ3RoOyBpIDwgbGVuOyBpKyspIHtcbiAgICAgICAgICAgICAgICBsZXQgYXNzZXQgPSBhc3NldHNbaV07XG4gICAgICAgICAgICAgICAgaWYgKCEoYXNzZXQgaW5zdGFuY2VvZiBBc3NldCkpXG4gICAgICAgICAgICAgICAgICAgIGFzc2V0ID0gcmVnaXN0cnkuZ2V0KGFzc2V0KTtcblxuICAgICAgICAgICAgICAgIGlmIChhc3NldCAmJiAhYXNzZXQucmVzb3VyY2UpIHtcbiAgICAgICAgICAgICAgICAgICAgcmVnaXN0cnkubG9hZChhc3NldCk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICB9XG5cbiAgICAgICAgaWYgKHRoaXMuc3lzdGVtLmluaXRpYWxpemVkKSB7XG4gICAgICAgICAgICBpZiAodGhpcy5kYXRhLmFjdGl2YXRlICYmICF0aGlzLmNoYW5uZWwpIHtcbiAgICAgICAgICAgICAgICB0aGlzLnBsYXkodGhpcy5jdXJyZW50U291cmNlKTtcbiAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgdGhpcy51bnBhdXNlKCk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICB9XG5cbiAgICBvbkRpc2FibGUoKSB7XG4gICAgICAgIHRoaXMucGF1c2UoKTtcbiAgICB9XG5cbiAgICBsb2FkQXVkaW9Tb3VyY2VBc3NldHMoaWRzKSB7XG4gICAgICAgIGNvbnN0IGFzc2V0cyA9IGlkcy5tYXAoKGlkKSA9PiB7XG4gICAgICAgICAgICByZXR1cm4gdGhpcy5zeXN0ZW0uYXBwLmFzc2V0cy5nZXQoaWQpO1xuICAgICAgICB9KTtcblxuICAgICAgICBjb25zdCBzb3VyY2VzID0ge307XG4gICAgICAgIGxldCBjdXJyZW50U291cmNlID0gbnVsbDtcblxuICAgICAgICBsZXQgY291bnQgPSBhc3NldHMubGVuZ3RoO1xuXG4gICAgICAgIC8vIG1ha2Ugc3VyZSBwcm9ncmVzcyBjb250aW51ZXMgZXZlbiBpZiBzb21lIGF1ZGlvIGRvZXNuJ3QgbG9hZFxuICAgICAgICBjb25zdCBfZXJyb3IgPSAoZSkgPT4ge1xuICAgICAgICAgICAgY291bnQtLTtcbiAgICAgICAgfTtcblxuICAgICAgICAvLyBvbmNlIGFsbCBhc3NldHMgYXJlIGFjY291bnRlZCBmb3IgY29udGludWVcbiAgICAgICAgY29uc3QgX2RvbmUgPSAoKSA9PiB7XG4gICAgICAgICAgICB0aGlzLmRhdGEuc291cmNlcyA9IHNvdXJjZXM7XG4gICAgICAgICAgICB0aGlzLmRhdGEuY3VycmVudFNvdXJjZSA9IGN1cnJlbnRTb3VyY2U7XG5cbiAgICAgICAgICAgIGlmICh0aGlzLmVuYWJsZWQgJiYgdGhpcy5hY3RpdmF0ZSAmJiBjdXJyZW50U291cmNlKSB7XG4gICAgICAgICAgICAgICAgdGhpcy5vbkVuYWJsZSgpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9O1xuXG4gICAgICAgIGFzc2V0cy5mb3JFYWNoKChhc3NldCwgaW5kZXgpID0+IHtcbiAgICAgICAgICAgIGlmIChhc3NldCkge1xuICAgICAgICAgICAgICAgIC8vIHNldCB0aGUgY3VycmVudCBzb3VyY2UgdG8gdGhlIGZpcnN0IGVudHJ5IChiZWZvcmUgY2FsbGluZyBzZXQsIHNvIHRoYXQgaXQgY2FuIHBsYXkgaWYgbmVlZGVkKVxuICAgICAgICAgICAgICAgIGN1cnJlbnRTb3VyY2UgPSBjdXJyZW50U291cmNlIHx8IGFzc2V0Lm5hbWU7XG5cbiAgICAgICAgICAgICAgICAvLyBzdWJzY3JpYmUgdG8gY2hhbmdlIGV2ZW50cyB0byByZWxvYWQgc291bmRzIGlmIG5lY2Vzc2FyeVxuICAgICAgICAgICAgICAgIGFzc2V0Lm9mZignY2hhbmdlJywgdGhpcy5vbkFzc2V0Q2hhbmdlZCwgdGhpcyk7XG4gICAgICAgICAgICAgICAgYXNzZXQub24oJ2NoYW5nZScsIHRoaXMub25Bc3NldENoYW5nZWQsIHRoaXMpO1xuXG4gICAgICAgICAgICAgICAgYXNzZXQub2ZmKCdyZW1vdmUnLCB0aGlzLm9uQXNzZXRSZW1vdmVkLCB0aGlzKTtcbiAgICAgICAgICAgICAgICBhc3NldC5vbigncmVtb3ZlJywgdGhpcy5vbkFzc2V0UmVtb3ZlZCwgdGhpcyk7XG5cbiAgICAgICAgICAgICAgICBhc3NldC5vZmYoJ2Vycm9yJywgX2Vycm9yLCB0aGlzKTtcbiAgICAgICAgICAgICAgICBhc3NldC5vbignZXJyb3InLCBfZXJyb3IsIHRoaXMpO1xuICAgICAgICAgICAgICAgIGFzc2V0LnJlYWR5KChhc3NldCkgPT4ge1xuICAgICAgICAgICAgICAgICAgICBzb3VyY2VzW2Fzc2V0Lm5hbWVdID0gYXNzZXQucmVzb3VyY2U7XG4gICAgICAgICAgICAgICAgICAgIGNvdW50LS07XG4gICAgICAgICAgICAgICAgICAgIGlmIChjb3VudCA9PT0gMCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgX2RvbmUoKTtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIH0pO1xuXG4gICAgICAgICAgICAgICAgaWYgKCFhc3NldC5yZXNvdXJjZSAmJiB0aGlzLmVuYWJsZWQgJiYgdGhpcy5lbnRpdHkuZW5hYmxlZClcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5zeXN0ZW0uYXBwLmFzc2V0cy5sb2FkKGFzc2V0KTtcbiAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgLy8gZG9uJ3Qgd2FpdCBmb3IgYXNzZXRzIHRoYXQgYXJlbid0IGluIHRoZSByZWdpc3RyeVxuICAgICAgICAgICAgICAgIGNvdW50LS07XG4gICAgICAgICAgICAgICAgaWYgKGNvdW50ID09PSAwKSB7XG4gICAgICAgICAgICAgICAgICAgIF9kb25lKCk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIC8vIGJ1dCBpZiB0aGV5IGFyZSBhZGRlZCBpbnNlcnQgdGhlbSBpbnRvIHNvdXJjZSBsaXN0XG4gICAgICAgICAgICAgICAgdGhpcy5zeXN0ZW0uYXBwLmFzc2V0cy5vbignYWRkOicgKyBpZHNbaW5kZXhdLCAoYXNzZXQpID0+IHtcbiAgICAgICAgICAgICAgICAgICAgYXNzZXQucmVhZHkoKGFzc2V0KSA9PiB7XG4gICAgICAgICAgICAgICAgICAgICAgICB0aGlzLmRhdGEuc291cmNlc1thc3NldC5uYW1lXSA9IGFzc2V0LnJlc291cmNlO1xuICAgICAgICAgICAgICAgICAgICB9KTtcblxuICAgICAgICAgICAgICAgICAgICBpZiAoIWFzc2V0LnJlc291cmNlKVxuICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5zeXN0ZW0uYXBwLmFzc2V0cy5sb2FkKGFzc2V0KTtcbiAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfSk7XG4gICAgfVxufVxuXG5leHBvcnQgeyBBdWRpb1NvdXJjZUNvbXBvbmVudCB9O1xuIl0sIm5hbWVzIjpbIkF1ZGlvU291cmNlQ29tcG9uZW50IiwiQ29tcG9uZW50IiwiY29uc3RydWN0b3IiLCJzeXN0ZW0iLCJlbnRpdHkiLCJvbiIsIm9uU2V0QXNzZXRzIiwib25TZXRMb29wIiwib25TZXRWb2x1bWUiLCJvblNldFBpdGNoIiwib25TZXRNaW5EaXN0YW5jZSIsIm9uU2V0TWF4RGlzdGFuY2UiLCJvblNldFJvbGxPZmZGYWN0b3IiLCJvblNldERpc3RhbmNlTW9kZWwiLCJvblNldDNkIiwicGxheSIsIm5hbWUiLCJlbmFibGVkIiwiY2hhbm5lbCIsInN0b3AiLCJjb21wb25lbnREYXRhIiwiZGF0YSIsInNvdXJjZXMiLCJtYW5hZ2VyIiwicGxheVNvdW5kIiwiY3VycmVudFNvdXJjZSIsInBvcyIsImdldFBvc2l0aW9uIiwicGxheVNvdW5kM2QiLCJwYXVzZSIsInVucGF1c2UiLCJwYXVzZWQiLCJvbGRWYWx1ZSIsIm5ld1ZhbHVlIiwibmV3QXNzZXRzIiwibGVuIiwibGVuZ3RoIiwiaSIsImFzc2V0IiwiYXBwIiwiYXNzZXRzIiwiZ2V0Iiwib2ZmIiwib25Bc3NldENoYW5nZWQiLCJvbkFzc2V0UmVtb3ZlZCIsImluZGV4T2YiLCJBc3NldCIsInB1c2giLCJpZCIsIl9pblRvb2xzIiwibG9hZEF1ZGlvU291cmNlQXNzZXRzIiwiYXR0cmlidXRlIiwic2V0TG9vcCIsInNldFZvbHVtZSIsInNldFBpdGNoIiwiQ2hhbm5lbDNkIiwic2V0TWF4RGlzdGFuY2UiLCJzZXRNaW5EaXN0YW5jZSIsInNldFJvbGxPZmZGYWN0b3IiLCJzZXREaXN0YW5jZU1vZGVsIiwiaW5pdGlhbGl6ZWQiLCJzdXNwZW5kZWQiLCJvbkVuYWJsZSIsInJlZ2lzdHJ5IiwicmVzb3VyY2UiLCJsb2FkIiwiYWN0aXZhdGUiLCJvbkRpc2FibGUiLCJpZHMiLCJtYXAiLCJjb3VudCIsIl9lcnJvciIsImUiLCJfZG9uZSIs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
