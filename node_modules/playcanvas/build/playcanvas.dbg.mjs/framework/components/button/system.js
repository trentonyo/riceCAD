/**
 * @license
 * PlayCanvas Engine v1.58.0 revision 6672f604c (DEBUG PROFILER)
 * Copyright 2011-2022 PlayCanvas Ltd. All rights reserved.
 */
import { Component } from '../component.js';
import { ComponentSystem } from '../system.js';
import { ButtonComponent } from './component.js';
import { ButtonComponentData } from './data.js';

const _schema = ['enabled', 'active', {
  name: 'imageEntity',
  type: 'entity'
}, {
  name: 'hitPadding',
  type: 'vec4'
}, 'transitionMode', {
  name: 'hoverTint',
  type: 'rgba'
}, {
  name: 'pressedTint',
  type: 'rgba'
}, {
  name: 'inactiveTint',
  type: 'rgba'
}, 'fadeDuration', 'hoverSpriteAsset', 'hoverSpriteFrame', 'pressedSpriteAsset', 'pressedSpriteFrame', 'inactiveSpriteAsset', 'inactiveSpriteFrame'];

class ButtonComponentSystem extends ComponentSystem {
  constructor(app) {
    super(app);
    this.id = 'button';
    this.ComponentType = ButtonComponent;
    this.DataType = ButtonComponentData;
    this.schema = _schema;
    this.on('beforeremove', this._onRemoveComponent, this);
    this.app.systems.on('update', this.onUpdate, this);
  }
  initializeComponentData(component, data, properties) {
    super.initializeComponentData(component, data, _schema);
  }
  onUpdate(dt) {
    const components = this.store;
    for (const id in components) {
      const entity = components[id].entity;
      const component = entity.button;
      if (component.enabled && entity.enabled) {
        component.onUpdate();
      }
    }
  }
  _onRemoveComponent(entity, component) {
    component.onRemove();
  }
  destroy() {
    super.destroy();
    this.app.systems.off('update', this.onUpdate, this);
  }
}
Component._buildAccessors(ButtonComponent.prototype, _schema);

export { ButtonComponentSystem };
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoic3lzdGVtLmpzIiwic291cmNlcyI6WyIuLi8uLi8uLi8uLi8uLi9zcmMvZnJhbWV3b3JrL2NvbXBvbmVudHMvYnV0dG9uL3N5c3RlbS5qcyJdLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBDb21wb25lbnQgfSBmcm9tICcuLi9jb21wb25lbnQuanMnO1xuaW1wb3J0IHsgQ29tcG9uZW50U3lzdGVtIH0gZnJvbSAnLi4vc3lzdGVtLmpzJztcblxuaW1wb3J0IHsgQnV0dG9uQ29tcG9uZW50IH0gZnJvbSAnLi9jb21wb25lbnQuanMnO1xuaW1wb3J0IHsgQnV0dG9uQ29tcG9uZW50RGF0YSB9IGZyb20gJy4vZGF0YS5qcyc7XG5cbi8qKiBAdHlwZWRlZiB7aW1wb3J0KCcuLi8uLi9hcHAtYmFzZS5qcycpLkFwcEJhc2V9IEFwcEJhc2UgKi9cblxuY29uc3QgX3NjaGVtYSA9IFtcbiAgICAnZW5hYmxlZCcsXG4gICAgJ2FjdGl2ZScsXG4gICAgeyBuYW1lOiAnaW1hZ2VFbnRpdHknLCB0eXBlOiAnZW50aXR5JyB9LFxuICAgIHsgbmFtZTogJ2hpdFBhZGRpbmcnLCB0eXBlOiAndmVjNCcgfSxcbiAgICAndHJhbnNpdGlvbk1vZGUnLFxuICAgIHsgbmFtZTogJ2hvdmVyVGludCcsIHR5cGU6ICdyZ2JhJyB9LFxuICAgIHsgbmFtZTogJ3ByZXNzZWRUaW50JywgdHlwZTogJ3JnYmEnIH0sXG4gICAgeyBuYW1lOiAnaW5hY3RpdmVUaW50JywgdHlwZTogJ3JnYmEnIH0sXG4gICAgJ2ZhZGVEdXJhdGlvbicsXG4gICAgJ2hvdmVyU3ByaXRlQXNzZXQnLFxuICAgICdob3ZlclNwcml0ZUZyYW1lJyxcbiAgICAncHJlc3NlZFNwcml0ZUFzc2V0JyxcbiAgICAncHJlc3NlZFNwcml0ZUZyYW1lJyxcbiAgICAnaW5hY3RpdmVTcHJpdGVBc3NldCcsXG4gICAgJ2luYWN0aXZlU3ByaXRlRnJhbWUnXG5dO1xuXG4vKipcbiAqIE1hbmFnZXMgY3JlYXRpb24gb2Yge0BsaW5rIEJ1dHRvbkNvbXBvbmVudH1zLlxuICpcbiAqIEBhdWdtZW50cyBDb21wb25lbnRTeXN0ZW1cbiAqL1xuY2xhc3MgQnV0dG9uQ29tcG9uZW50U3lzdGVtIGV4dGVuZHMgQ29tcG9uZW50U3lzdGVtIHtcbiAgICAvKipcbiAgICAgKiBDcmVhdGUgYSBuZXcgQnV0dG9uQ29tcG9uZW50U3lzdGVtLlxuICAgICAqXG4gICAgICogQHBhcmFtIHtBcHBCYXNlfSBhcHAgLSBUaGUgYXBwbGljYXRpb24uXG4gICAgICogQGhpZGVjb25zdHJ1Y3RvclxuICAgICAqL1xuICAgIGNvbnN0cnVjdG9yKGFwcCkge1xuICAgICAgICBzdXBlcihhcHApO1xuXG4gICAgICAgIHRoaXMuaWQgPSAnYnV0dG9uJztcblxuICAgICAgICB0aGlzLkNvbXBvbmVudFR5cGUgPSBCdXR0b25Db21wb25lbnQ7XG4gICAgICAgIHRoaXMuRGF0YVR5cGUgPSBCdXR0b25Db21wb25lbnREYXRhO1xuXG4gICAgICAgIHRoaXMuc2NoZW1hID0gX3NjaGVtYTtcblxuICAgICAgICB0aGlzLm9uKCdiZWZvcmVyZW1vdmUnLCB0aGlzLl9vblJlbW92ZUNvbXBvbmVudCwgdGhpcyk7XG5cbiAgICAgICAgdGhpcy5hcHAuc3lzdGVtcy5vbigndXBkYXRlJywgdGhpcy5vblVwZGF0ZSwgdGhpcyk7XG4gICAgfVxuXG4gICAgaW5pdGlhbGl6ZUNvbXBvbmVudERhdGEoY29tcG9uZW50LCBkYXRhLCBwcm9wZXJ0aWVzKSB7XG4gICAgICAgIHN1cGVyLmluaXRpYWxpemVDb21wb25lbnREYXRhKGNvbXBvbmVudCwgZGF0YSwgX3NjaGVtYSk7XG4gICAgfVxuXG4gICAgb25VcGRhdGUoZHQpIHtcbiAgICAgICAgY29uc3QgY29tcG9uZW50cyA9IHRoaXMuc3RvcmU7XG5cbiAgICAgICAgZm9yIChjb25zdCBpZCBpbiBjb21wb25lbnRzKSB7XG4gICAgICAgICAgICBjb25zdCBlbnRpdHkgPSBjb21wb25lbnRzW2lkXS5lbnRpdHk7XG4gICAgICAgICAgICBjb25zdCBjb21wb25lbnQgPSBlbnRpdHkuYnV0dG9uO1xuICAgICAgICAgICAgaWYgKGNvbXBvbmVudC5lbmFibGVkICYmIGVudGl0eS5lbmFibGVkKSB7XG4gICAgICAgICAgICAgICAgY29tcG9uZW50Lm9uVXBkYXRlKCk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICB9XG5cbiAgICBfb25SZW1vdmVDb21wb25lbnQoZW50aXR5LCBjb21wb25lbnQpIHtcbiAgICAgICAgY29tcG9uZW50Lm9uUmVtb3ZlKCk7XG4gICAgfVxuXG4gICAgZGVzdHJveSgpIHtcbiAgICAgICAgc3VwZXIuZGVzdHJveSgpO1xuXG4gICAgICAgIHRoaXMuYXBwLnN5c3RlbXMub2ZmKCd1cGRhdGUnLCB0aGlzLm9uVXBkYXRlLCB0aGlzKTtcbiAgICB9XG59XG5cbkNvbXBvbmVudC5fYnVpbGRBY2Nlc3NvcnMoQnV0dG9uQ29tcG9uZW50LnByb3RvdHlwZSwgX3NjaGVtYSk7XG5cbmV4cG9ydCB7IEJ1dHRvbkNvbXBvbmVudFN5c3RlbSB9O1xuIl0sIm5hbWVzIjpbIl9zY2hlbWEiLCJuYW1lIiwidHlwZSIsIkJ1dHRvbkNvbXBvbmVudFN5c3RlbSIsIkNvbXBvbmVudFN5c3RlbSIsImNvbnN0cnVjdG9yIiwiYXBwIiwiaWQiLCJDb21wb25lbnRUeXBlIiwiQnV0dG9uQ29tcG9uZW50IiwiRGF0YVR5cGUiLCJCdXR0b25Db21wb25lbnREYXRhIiwic2NoZW1hIiwib24iLCJfb25SZW1vdmVDb21wb25lbnQiLCJzeXN0ZW1zIiwib25VcGRhdGUiLCJpbml0aWFsaXplQ29tcG9uZW50RGF0YSIsImNvbXBvbmVudCIsImRhdGEiLCJwcm9wZXJ0aWVzIiwiZHQiLCJjb21wb25lbnRzIiwic3RvcmUiLCJlbnRpdHkiLCJidXR0b24iLCJlbmFibGVkIiwib25SZW1vdmUiLCJkZXN0cm95Iiwib2ZmIiwiQ29tcG9uZW50IiwiX2J1aWxkQWNjZXNzb3JzIiwicHJvdG90eXBlIl0sIm1hcHBpbmdzIjoiOzs7Ozs7Ozs7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
