/**
 * @license
 * PlayCanvas Engine v1.58.0 revision 6672f604c (DEBUG PROFILER)
 * Copyright 2011-2022 PlayCanvas Ltd. All rights reserved.
 */
import { Asset } from '../asset/asset.js';
import { Entity } from '../entity.js';
import { MeshInstance } from '../../scene/mesh-instance.js';
import { MorphInstance } from '../../scene/morph-instance.js';
import { SkinInstance } from '../../scene/skin-instance.js';
import { SkinInstanceCache } from '../../scene/skin-instance-cache.js';
import { Model } from '../../scene/model.js';
import { Debug } from '../../core/debug.js';

class GlbContainerResource {
  constructor(data, asset, assets, defaultMaterial) {
    const createAsset = function createAsset(type, resource, index) {
      const subAsset = GlbContainerResource.createAsset(asset.name, type, resource, index);
      assets.add(subAsset);
      return subAsset;
    };

    const renders = [];
    for (let i = 0; i < data.renders.length; ++i) {
      renders.push(createAsset('render', data.renders[i], i));
    }

    const materials = [];
    for (let i = 0; i < data.materials.length; ++i) {
      materials.push(createAsset('material', data.materials[i], i));
    }

    const animations = [];
    for (let i = 0; i < data.animations.length; ++i) {
      animations.push(createAsset('animation', data.animations[i], i));
    }
    this.data = data;
    this._model = null;
    this._assetName = asset.name;
    this._assets = assets;
    this._defaultMaterial = defaultMaterial;
    this.renders = renders;
    this.materials = materials;
    this.textures = data.textures;
    this.animations = animations;
  }
  get model() {
    if (!this._model) {
      const model = GlbContainerResource.createModel(this.data, this._defaultMaterial);
      const modelAsset = GlbContainerResource.createAsset(this._assetName, 'model', model, 0);
      this._assets.add(modelAsset);
      this._model = modelAsset;
    }
    return this._model;
  }
  static createAsset(assetName, type, resource, index) {
    const subAsset = new Asset(assetName + '/' + type + '/' + index, type, {
      url: ''
    });
    subAsset.resource = resource;
    subAsset.loaded = true;
    return subAsset;
  }
  instantiateModelEntity(options) {
    const entity = new Entity();
    entity.addComponent('model', Object.assign({
      type: 'asset',
      asset: this.model
    }, options));
    return entity;
  }
  instantiateRenderEntity(options) {
    const defaultMaterial = this._defaultMaterial;
    const skinnedMeshInstances = [];
    const createMeshInstance = function createMeshInstance(root, entity, mesh, materials, meshDefaultMaterials, skins, gltfNode) {
      const materialIndex = meshDefaultMaterials[mesh.id];
      const material = materialIndex === undefined ? defaultMaterial : materials[materialIndex];
      const meshInstance = new MeshInstance(mesh, material);

      if (mesh.morph) {
        meshInstance.morphInstance = new MorphInstance(mesh.morph);
      }

      if (gltfNode.hasOwnProperty('skin')) {
        skinnedMeshInstances.push({
          meshInstance: meshInstance,
          rootBone: root,
          entity: entity
        });
      }
      return meshInstance;
    };

    const cloneHierarchy = (root, node, glb) => {
      const entity = new Entity();
      node._cloneInternal(entity);

      if (!root) root = entity;

      let attachedMi = null;
      let renderAsset = null;
      for (let i = 0; i < glb.nodes.length; i++) {
        const glbNode = glb.nodes[i];
        if (glbNode === node) {
          const gltfNode = glb.gltf.nodes[i];

          if (gltfNode.hasOwnProperty('mesh')) {
            const meshGroup = glb.renders[gltfNode.mesh].meshes;
            renderAsset = this.renders[gltfNode.mesh];
            for (var mi = 0; mi < meshGroup.length; mi++) {
              const mesh = meshGroup[mi];
              if (mesh) {
                const cloneMi = createMeshInstance(root, entity, mesh, glb.materials, glb.meshDefaultMaterials, glb.skins, gltfNode);

                if (!attachedMi) {
                  attachedMi = [];
                }
                attachedMi.push(cloneMi);
              }
            }
          }

          if (glb.lights) {
            const lightEntity = glb.lights.get(gltfNode);
            if (lightEntity) {
              entity.addChild(lightEntity.clone());
            }
          }

          if (glb.cameras) {
            const cameraEntity = glb.cameras.get(gltfNode);
            if (cameraEntity) {
              cameraEntity.camera.system.cloneComponent(cameraEntity, entity);
            }
          }
        }
      }

      if (attachedMi) {
        entity.addComponent('render', Object.assign({
          type: 'asset',
          meshInstances: attachedMi,
          rootBone: root
        }, options));

        entity.render.assignAsset(renderAsset);
      }

      const children = node.children;
      for (let i = 0; i < children.length; i++) {
        const childClone = cloneHierarchy(root, children[i], glb);
        entity.addChild(childClone);
      }
      return entity;
    };

    const sceneClones = [];
    for (const scene of this.data.scenes) {
      sceneClones.push(cloneHierarchy(null, scene, this.data));
    }

    skinnedMeshInstances.forEach(data => {
      data.meshInstance.skinInstance = SkinInstanceCache.createCachedSkinInstance(data.meshInstance.mesh.skin, data.rootBone, data.entity);
    });

    return GlbContainerResource.createSceneHierarchy(sceneClones, 'Entity');
  }

  getMaterialVariants() {
    return this.data.variants ? Object.keys(this.data.variants) : [];
  }

  applyMaterialVariant(entity, name) {
    const variant = name ? this.data.variants[name] : null;
    if (variant === undefined) {
      Debug.warn(`No variant named ${name} exists in resource`);
      return;
    }
    const renders = entity.findComponents("render");
    for (let i = 0; i < renders.length; i++) {
      const renderComponent = renders[i];
      this._applyMaterialVariant(variant, renderComponent.meshInstances);
    }
  }

  applyMaterialVariantInstances(instances, name) {
    const variant = name ? this.data.variants[name] : null;
    if (variant === undefined) {
      Debug.warn(`No variant named ${name} exists in resource`);
      return;
    }
    this._applyMaterialVariant(variant, instances);
  }

  _applyMaterialVariant(variant, instances) {
    instances.forEach(instance => {
      if (variant === null) {
        instance.material = this._defaultMaterial;
      } else {
        const meshVariants = this.data.meshVariants[instance.mesh.id];
        if (meshVariants) {
          instance.material = this.data.materials[meshVariants[variant]];
        }
      }
      Debug.assert(instance.material);
    });
  }

  static createSceneHierarchy(sceneNodes, nodeType) {
    let root = null;
    if (sceneNodes.length === 1) {
      root = sceneNodes[0];
    } else {
      root = new nodeType('SceneGroup');
      for (const scene of sceneNodes) {
        root.addChild(scene);
      }
    }
    return root;
  }

  static createModel(glb, defaultMaterial) {
    const createMeshInstance = function createMeshInstance(model, mesh, skins, skinInstances, materials, node, gltfNode) {
      const materialIndex = glb.meshDefaultMaterials[mesh.id];
      const material = materialIndex === undefined ? defaultMaterial : materials[materialIndex];
      const meshInstance = new MeshInstance(mesh, material, node);
      if (mesh.morph) {
        const morphInstance = new MorphInstance(mesh.morph);
        meshInstance.morphInstance = morphInstance;
        model.morphInstances.push(morphInstance);
      }
      if (gltfNode.hasOwnProperty('skin')) {
        const skinIndex = gltfNode.skin;
        const skin = skins[skinIndex];
        mesh.skin = skin;
        const skinInstance = skinInstances[skinIndex];
        meshInstance.skinInstance = skinInstance;
        model.skinInstances.push(skinInstance);
      }
      model.meshInstances.push(meshInstance);
    };
    const model = new Model();

    const skinInstances = [];
    for (const skin of glb.skins) {
      const skinInstance = new SkinInstance(skin);
      skinInstance.bones = skin.bones;
      skinInstances.push(skinInstance);
    }

    model.graph = GlbContainerResource.createSceneHierarchy(glb.scenes, 'GraphNode');

    for (let i = 0; i < glb.nodes.length; i++) {
      const node = glb.nodes[i];
      if (node.root === model.graph) {
        const gltfNode = glb.gltf.nodes[i];
        if (gltfNode.hasOwnProperty('mesh')) {
          const meshGroup = glb.renders[gltfNode.mesh].meshes;
          for (var mi = 0; mi < meshGroup.length; mi++) {
            const mesh = meshGroup[mi];
            if (mesh) {
              createMeshInstance(model, mesh, glb.skins, skinInstances, glb.materials, node, gltfNode);
            }
          }
        }
      }
    }
    return model;
  }
  destroy() {
    const registry = this._assets;
    const destroyAsset = function destroyAsset(asset) {
      registry.remove(asset);
      asset.unload();
    };
    const destroyAssets = function destroyAssets(assets) {
      assets.forEach(function (asset) {
        destroyAsset(asset);
      });
    };

    if (this.animations) {
      destroyAssets(this.animations);
      this.animations = null;
    }
    if (this.textures) {
      destroyAssets(this.textures);
      this.textures = null;
    }
    if (this.materials) {
      destroyAssets(this.materials);
      this.materials = null;
    }
    if (this.renders) {
      destroyAssets(this.renders);
      this.renders = null;
    }
    if (this._model) {
      destroyAsset(this._model);
      this._model = null;
    }
    this.data = null;
    this.assets = null;
  }
}

export { GlbContainerResource };
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZ2xiLWNvbnRhaW5lci1yZXNvdXJjZS5qcyIsInNvdXJjZXMiOlsiLi4vLi4vLi4vLi4vc3JjL2ZyYW1ld29yay9wYXJzZXJzL2dsYi1jb250YWluZXItcmVzb3VyY2UuanMiXSwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgQXNzZXQgfSBmcm9tICcuLi8uLi9mcmFtZXdvcmsvYXNzZXQvYXNzZXQuanMnO1xuaW1wb3J0IHsgRW50aXR5IH0gZnJvbSAnLi4vLi4vZnJhbWV3b3JrL2VudGl0eS5qcyc7XG5pbXBvcnQgeyBNZXNoSW5zdGFuY2UgfSBmcm9tICcuLi8uLi9zY2VuZS9tZXNoLWluc3RhbmNlLmpzJztcbmltcG9ydCB7IE1vcnBoSW5zdGFuY2UgfSBmcm9tICcuLi8uLi9zY2VuZS9tb3JwaC1pbnN0YW5jZS5qcyc7XG5pbXBvcnQgeyBTa2luSW5zdGFuY2UgfSBmcm9tICcuLi8uLi9zY2VuZS9za2luLWluc3RhbmNlLmpzJztcbmltcG9ydCB7IFNraW5JbnN0YW5jZUNhY2hlIH0gZnJvbSAnLi4vLi4vc2NlbmUvc2tpbi1pbnN0YW5jZS1jYWNoZS5qcyc7XG5pbXBvcnQgeyBNb2RlbCB9IGZyb20gJy4uLy4uL3NjZW5lL21vZGVsLmpzJztcbmltcG9ydCB7IERlYnVnIH0gZnJvbSAnLi4vLi4vY29yZS9kZWJ1Zy5qcyc7XG5cbi8vIENvbnRhaW5lciByZXNvdXJjZSByZXR1cm5lZCBieSB0aGUgR2xiUGFyc2VyLiBJbXBsZW1lbnRzIHRoZSBDb250YWluZXJSZXNvdXJjZSBpbnRlcmZhY2UuXG5jbGFzcyBHbGJDb250YWluZXJSZXNvdXJjZSB7XG4gICAgY29uc3RydWN0b3IoZGF0YSwgYXNzZXQsIGFzc2V0cywgZGVmYXVsdE1hdGVyaWFsKSB7XG4gICAgICAgIGNvbnN0IGNyZWF0ZUFzc2V0ID0gZnVuY3Rpb24gKHR5cGUsIHJlc291cmNlLCBpbmRleCkge1xuICAgICAgICAgICAgY29uc3Qgc3ViQXNzZXQgPSBHbGJDb250YWluZXJSZXNvdXJjZS5jcmVhdGVBc3NldChhc3NldC5uYW1lLCB0eXBlLCByZXNvdXJjZSwgaW5kZXgpO1xuICAgICAgICAgICAgYXNzZXRzLmFkZChzdWJBc3NldCk7XG4gICAgICAgICAgICByZXR1cm4gc3ViQXNzZXQ7XG4gICAgICAgIH07XG5cbiAgICAgICAgLy8gcmVuZGVyIGFzc2V0c1xuICAgICAgICBjb25zdCByZW5kZXJzID0gW107XG4gICAgICAgIGZvciAobGV0IGkgPSAwOyBpIDwgZGF0YS5yZW5kZXJzLmxlbmd0aDsgKytpKSB7XG4gICAgICAgICAgICByZW5kZXJzLnB1c2goY3JlYXRlQXNzZXQoJ3JlbmRlcicsIGRhdGEucmVuZGVyc1tpXSwgaSkpO1xuICAgICAgICB9XG5cbiAgICAgICAgLy8gY3JlYXRlIG1hdGVyaWFsIGFzc2V0c1xuICAgICAgICBjb25zdCBtYXRlcmlhbHMgPSBbXTtcbiAgICAgICAgZm9yIChsZXQgaSA9IDA7IGkgPCBkYXRhLm1hdGVyaWFscy5sZW5ndGg7ICsraSkge1xuICAgICAgICAgICAgbWF0ZXJpYWxzLnB1c2goY3JlYXRlQXNzZXQoJ21hdGVyaWFsJywgZGF0YS5tYXRlcmlhbHNbaV0sIGkpKTtcbiAgICAgICAgfVxuXG4gICAgICAgIC8vIGNyZWF0ZSBhbmltYXRpb24gYXNzZXRzXG4gICAgICAgIGNvbnN0IGFuaW1hdGlvbnMgPSBbXTtcbiAgICAgICAgZm9yIChsZXQgaSA9IDA7IGkgPCBkYXRhLmFuaW1hdGlvbnMubGVuZ3RoOyArK2kpIHtcbiAgICAgICAgICAgIGFuaW1hdGlvbnMucHVzaChjcmVhdGVBc3NldCgnYW5pbWF0aW9uJywgZGF0YS5hbmltYXRpb25zW2ldLCBpKSk7XG4gICAgICAgIH1cblxuICAgICAgICB0aGlzLmRhdGEgPSBkYXRhO1xuICAgICAgICB0aGlzLl9tb2RlbCA9IG51bGw7XG4gICAgICAgIHRoaXMuX2Fzc2V0TmFtZSA9IGFzc2V0Lm5hbWU7XG4gICAgICAgIHRoaXMuX2Fzc2V0cyA9IGFzc2V0cztcbiAgICAgICAgdGhpcy5fZGVmYXVsdE1hdGVyaWFsID0gZGVmYXVsdE1hdGVyaWFsO1xuICAgICAgICB0aGlzLnJlbmRlcnMgPSByZW5kZXJzO1xuICAgICAgICB0aGlzLm1hdGVyaWFscyA9IG1hdGVyaWFscztcbiAgICAgICAgdGhpcy50ZXh0dXJlcyA9IGRhdGEudGV4dHVyZXM7IC8vIHRleHR1cmUgYXNzZXRzIGFyZSBjcmVhdGVkIGRpcmVjdGx5XG4gICAgICAgIHRoaXMuYW5pbWF0aW9ucyA9IGFuaW1hdGlvbnM7XG4gICAgfVxuXG4gICAgZ2V0IG1vZGVsKCkge1xuICAgICAgICBpZiAoIXRoaXMuX21vZGVsKSB7XG4gICAgICAgICAgICAvLyBjcmVhdGUgbW9kZWwgb25seSB3aGVuIG5lZWRlZFxuICAgICAgICAgICAgY29uc3QgbW9kZWwgPSBHbGJDb250YWluZXJSZXNvdXJjZS5jcmVhdGVNb2RlbCh0aGlzLmRhdGEsIHRoaXMuX2RlZmF1bHRNYXRlcmlhbCk7XG4gICAgICAgICAgICBjb25zdCBtb2RlbEFzc2V0ID0gR2xiQ29udGFpbmVyUmVzb3VyY2UuY3JlYXRlQXNzZXQodGhpcy5fYXNzZXROYW1lLCAnbW9kZWwnLCBtb2RlbCwgMCk7XG4gICAgICAgICAgICB0aGlzLl9hc3NldHMuYWRkKG1vZGVsQXNzZXQpO1xuICAgICAgICAgICAgdGhpcy5fbW9kZWwgPSBtb2RlbEFzc2V0O1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiB0aGlzLl9tb2RlbDtcbiAgICB9XG5cbiAgICBzdGF0aWMgY3JlYXRlQXNzZXQoYXNzZXROYW1lLCB0eXBlLCByZXNvdXJjZSwgaW5kZXgpIHtcbiAgICAgICAgY29uc3Qgc3ViQXNzZXQgPSBuZXcgQXNzZXQoYXNzZXROYW1lICsgJy8nICsgdHlwZSArICcvJyArIGluZGV4LCB0eXBlLCB7XG4gICAgICAgICAgICB1cmw6ICcnXG4gICAgICAgIH0pO1xuICAgICAgICBzdWJBc3NldC5yZXNvdXJjZSA9IHJlc291cmNlO1xuICAgICAgICBzdWJBc3NldC5sb2FkZWQgPSB0cnVlO1xuICAgICAgICByZXR1cm4gc3ViQXNzZXQ7XG4gICAgfVxuXG4gICAgaW5zdGFudGlhdGVNb2RlbEVudGl0eShvcHRpb25zKSB7XG4gICAgICAgIGNvbnN0IGVudGl0eSA9IG5ldyBFbnRpdHkoKTtcbiAgICAgICAgZW50aXR5LmFkZENvbXBvbmVudCgnbW9kZWwnLCBPYmplY3QuYXNzaWduKHsgdHlwZTogJ2Fzc2V0JywgYXNzZXQ6IHRoaXMubW9kZWwgfSwgb3B0aW9ucykpO1xuICAgICAgICByZXR1cm4gZW50aXR5O1xuICAgIH1cblxuICAgIGluc3RhbnRpYXRlUmVuZGVyRW50aXR5KG9wdGlvbnMpIHtcblxuICAgICAgICBjb25zdCBkZWZhdWx0TWF0ZXJpYWwgPSB0aGlzLl9kZWZhdWx0TWF0ZXJpYWw7XG4gICAgICAgIGNvbnN0IHNraW5uZWRNZXNoSW5zdGFuY2VzID0gW107XG5cbiAgICAgICAgY29uc3QgY3JlYXRlTWVzaEluc3RhbmNlID0gZnVuY3Rpb24gKHJvb3QsIGVudGl0eSwgbWVzaCwgbWF0ZXJpYWxzLCBtZXNoRGVmYXVsdE1hdGVyaWFscywgc2tpbnMsIGdsdGZOb2RlKSB7XG5cbiAgICAgICAgICAgIC8vIGNsb25lIG1lc2ggaW5zdGFuY2VcbiAgICAgICAgICAgIGNvbnN0IG1hdGVyaWFsSW5kZXggPSBtZXNoRGVmYXVsdE1hdGVyaWFsc1ttZXNoLmlkXTtcbiAgICAgICAgICAgIGNvbnN0IG1hdGVyaWFsID0gKG1hdGVyaWFsSW5kZXggPT09IHVuZGVmaW5lZCkgPyBkZWZhdWx0TWF0ZXJpYWwgOiBtYXRlcmlhbHNbbWF0ZXJpYWxJbmRleF07XG4gICAgICAgICAgICBjb25zdCBtZXNoSW5zdGFuY2UgPSBuZXcgTWVzaEluc3RhbmNlKG1lc2gsIG1hdGVyaWFsKTtcblxuICAgICAgICAgICAgLy8gY3JlYXRlIG1vcnBoIGluc3RhbmNlXG4gICAgICAgICAgICBpZiAobWVzaC5tb3JwaCkge1xuICAgICAgICAgICAgICAgIG1lc2hJbnN0YW5jZS5tb3JwaEluc3RhbmNlID0gbmV3IE1vcnBoSW5zdGFuY2UobWVzaC5tb3JwaCk7XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIC8vIHN0b3JlIGRhdGEgdG8gY3JlYXRlIHNraW4gaW5zdGFuY2UgYWZ0ZXIgdGhlIGhpZXJhcmNoeSBpcyBjcmVhdGVkXG4gICAgICAgICAgICBpZiAoZ2x0Zk5vZGUuaGFzT3duUHJvcGVydHkoJ3NraW4nKSkge1xuICAgICAgICAgICAgICAgIHNraW5uZWRNZXNoSW5zdGFuY2VzLnB1c2goe1xuICAgICAgICAgICAgICAgICAgICBtZXNoSW5zdGFuY2U6IG1lc2hJbnN0YW5jZSxcbiAgICAgICAgICAgICAgICAgICAgcm9vdEJvbmU6IHJvb3QsXG4gICAgICAgICAgICAgICAgICAgIGVudGl0eTogZW50aXR5XG4gICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIHJldHVybiBtZXNoSW5zdGFuY2U7XG4gICAgICAgIH07XG5cbiAgICAgICAgLy8gaGVscGVyIGZ1bmN0aW9uIHRvIHJlY3Vyc2l2ZWx5IGNsb25lIGEgaGllcmFyY2h5IG9mIEdyYXBoTm9kZXMgdG8gRW50aXRpZXNcbiAgICAgICAgY29uc3QgY2xvbmVIaWVyYXJjaHkgPSAocm9vdCwgbm9kZSwgZ2xiKSA9PiB7XG5cbiAgICAgICAgICAgIGNvbnN0IGVudGl0eSA9IG5ldyBFbnRpdHkoKTtcbiAgICAgICAgICAgIG5vZGUuX2Nsb25lSW50ZXJuYWwoZW50aXR5KTtcblxuICAgICAgICAgICAgLy8gZmlyc3QgZW50aXR5IGJlY29tZXMgdGhlIHJvb3RcbiAgICAgICAgICAgIGlmICghcm9vdCkgcm9vdCA9IGVudGl0eTtcblxuICAgICAgICAgICAgLy8gZmluZCBhbGwgY29tcG9uZW50cyBuZWVkZWQgZm9yIHRoaXMgbm9kZVxuICAgICAgICAgICAgbGV0IGF0dGFjaGVkTWkgPSBudWxsO1xuICAgICAgICAgICAgbGV0IHJlbmRlckFzc2V0ID0gbnVsbDtcbiAgICAgICAgICAgIGZvciAobGV0IGkgPSAwOyBpIDwgZ2xiLm5vZGVzLmxlbmd0aDsgaSsrKSB7XG4gICAgICAgICAgICAgICAgY29uc3QgZ2xiTm9kZSA9IGdsYi5ub2Rlc1tpXTtcbiAgICAgICAgICAgICAgICBpZiAoZ2xiTm9kZSA9PT0gbm9kZSkge1xuICAgICAgICAgICAgICAgICAgICBjb25zdCBnbHRmTm9kZSA9IGdsYi5nbHRmLm5vZGVzW2ldO1xuXG4gICAgICAgICAgICAgICAgICAgIC8vIG1lc2hcbiAgICAgICAgICAgICAgICAgICAgaWYgKGdsdGZOb2RlLmhhc093blByb3BlcnR5KCdtZXNoJykpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGNvbnN0IG1lc2hHcm91cCA9IGdsYi5yZW5kZXJzW2dsdGZOb2RlLm1lc2hdLm1lc2hlcztcbiAgICAgICAgICAgICAgICAgICAgICAgIHJlbmRlckFzc2V0ID0gdGhpcy5yZW5kZXJzW2dsdGZOb2RlLm1lc2hdO1xuICAgICAgICAgICAgICAgICAgICAgICAgZm9yICh2YXIgbWkgPSAwOyBtaSA8IG1lc2hHcm91cC5sZW5ndGg7IG1pKyspIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBjb25zdCBtZXNoID0gbWVzaEdyb3VwW21pXTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAobWVzaCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBjb25zdCBjbG9uZU1pID0gY3JlYXRlTWVzaEluc3RhbmNlKHJvb3QsIGVudGl0eSwgbWVzaCwgZ2xiLm1hdGVyaWFscywgZ2xiLm1lc2hEZWZhdWx0TWF0ZXJpYWxzLCBnbGIuc2tpbnMsIGdsdGZOb2RlKTtcblxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAvLyBhZGQgaXQgdG8gbGlzdFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAoIWF0dGFjaGVkTWkpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGF0dGFjaGVkTWkgPSBbXTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBhdHRhY2hlZE1pLnB1c2goY2xvbmVNaSk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgICAgICAgLy8gbGlnaHQgLSBjbG9uZSAoYWRkaXRpb25hbCBjaGlsZCkgZW50aXR5IHdpdGggdGhlIGxpZ2h0IGNvbXBvbmVudFxuICAgICAgICAgICAgICAgICAgICAvLyBjYW5ub3QgY2xvbmUgdGhlIGNvbXBvbmVudCBhcyBhZGRpdGlvbmFsIGVudGl0eSBoYXMgYSByb3RhdGlvbiB0byBoYW5kbGUgZGlmZmVyZW50IGxpZ2h0IGRpcmVjdGlvblxuICAgICAgICAgICAgICAgICAgICBpZiAoZ2xiLmxpZ2h0cykge1xuICAgICAgICAgICAgICAgICAgICAgICAgY29uc3QgbGlnaHRFbnRpdHkgPSBnbGIubGlnaHRzLmdldChnbHRmTm9kZSk7XG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAobGlnaHRFbnRpdHkpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBlbnRpdHkuYWRkQ2hpbGQobGlnaHRFbnRpdHkuY2xvbmUoKSk7XG4gICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAgICAgICAvLyBjYW1lcmFcbiAgICAgICAgICAgICAgICAgICAgaWYgKGdsYi5jYW1lcmFzKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBjb25zdCBjYW1lcmFFbnRpdHkgPSBnbGIuY2FtZXJhcy5nZXQoZ2x0Zk5vZGUpO1xuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKGNhbWVyYUVudGl0eSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIC8vIGNsb25lIGNhbWVyYSBjb21wb25lbnQgaW50byB0aGUgZW50aXR5XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgY2FtZXJhRW50aXR5LmNhbWVyYS5zeXN0ZW0uY2xvbmVDb21wb25lbnQoY2FtZXJhRW50aXR5LCBlbnRpdHkpO1xuICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAvLyBjcmVhdGUgcmVuZGVyIGNvbXBvbmVudHMgZm9yIG1lc2ggaW5zdGFuY2VzXG4gICAgICAgICAgICBpZiAoYXR0YWNoZWRNaSkge1xuICAgICAgICAgICAgICAgIGVudGl0eS5hZGRDb21wb25lbnQoJ3JlbmRlcicsIE9iamVjdC5hc3NpZ24oe1xuICAgICAgICAgICAgICAgICAgICB0eXBlOiAnYXNzZXQnLFxuICAgICAgICAgICAgICAgICAgICBtZXNoSW5zdGFuY2VzOiBhdHRhY2hlZE1pLFxuICAgICAgICAgICAgICAgICAgICByb290Qm9uZTogcm9vdFxuICAgICAgICAgICAgICAgIH0sIG9wdGlvbnMpKTtcblxuICAgICAgICAgICAgICAgIC8vIGFzc2lnbiBhc3NldCBpZCB3aXRob3V0IHJlY3JlYXRpbmcgbWVzaCBpbnN0YW5jZXMgd2hpY2ggYXJlIGFscmVhZHkgc2V0IHVwIHdpdGggbWF0ZXJpYWxzXG4gICAgICAgICAgICAgICAgZW50aXR5LnJlbmRlci5hc3NpZ25Bc3NldChyZW5kZXJBc3NldCk7XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIC8vIHJlY3Vyc2l2ZWx5IGNsb25lIGNoaWxkcmVuXG4gICAgICAgICAgICBjb25zdCBjaGlsZHJlbiA9IG5vZGUuY2hpbGRyZW47XG4gICAgICAgICAgICBmb3IgKGxldCBpID0gMDsgaSA8IGNoaWxkcmVuLmxlbmd0aDsgaSsrKSB7XG4gICAgICAgICAgICAgICAgY29uc3QgY2hpbGRDbG9uZSA9IGNsb25lSGllcmFyY2h5KHJvb3QsIGNoaWxkcmVuW2ldLCBnbGIpO1xuICAgICAgICAgICAgICAgIGVudGl0eS5hZGRDaGlsZChjaGlsZENsb25lKTtcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgcmV0dXJuIGVudGl0eTtcbiAgICAgICAgfTtcblxuICAgICAgICAvLyBjbG9uZSBzY2VuZXMgaGllcmFyY2hpZXNcbiAgICAgICAgY29uc3Qgc2NlbmVDbG9uZXMgPSBbXTtcbiAgICAgICAgZm9yIChjb25zdCBzY2VuZSBvZiB0aGlzLmRhdGEuc2NlbmVzKSB7XG4gICAgICAgICAgICBzY2VuZUNsb25lcy5wdXNoKGNsb25lSGllcmFyY2h5KG51bGwsIHNjZW5lLCB0aGlzLmRhdGEpKTtcbiAgICAgICAgfVxuXG4gICAgICAgIC8vIG5vdyB0aGF0IHRoZSBoaWVyYXJjaHkgaXMgY3JlYXRlZCwgY3JlYXRlIHNraW4gaW5zdGFuY2VzIGFuZCByZXNvbHZlIGJvbmVzIHVzaW5nIHRoZSBoaWVyYXJjaHlcbiAgICAgICAgc2tpbm5lZE1lc2hJbnN0YW5jZXMuZm9yRWFjaCgoZGF0YSkgPT4ge1xuICAgICAgICAgICAgZGF0YS5tZXNoSW5zdGFuY2Uuc2tpbkluc3RhbmNlID0gU2tpbkluc3RhbmNlQ2FjaGUuY3JlYXRlQ2FjaGVkU2tpbkluc3RhbmNlKGRhdGEubWVzaEluc3RhbmNlLm1lc2guc2tpbiwgZGF0YS5yb290Qm9uZSwgZGF0YS5lbnRpdHkpO1xuICAgICAgICB9KTtcblxuICAgICAgICAvLyByZXR1cm4gdGhlIHNjZW5lIGhpZXJhcmNoeSBjcmVhdGVkIGZyb20gc2NlbmUgY2xvbmVzXG4gICAgICAgIHJldHVybiBHbGJDb250YWluZXJSZXNvdXJjZS5jcmVhdGVTY2VuZUhpZXJhcmNoeShzY2VuZUNsb25lcywgJ0VudGl0eScpO1xuICAgIH1cblxuICAgIC8vIGdldCBtYXRlcmlhbCB2YXJpYW50c1xuICAgIGdldE1hdGVyaWFsVmFyaWFudHMoKSB7XG4gICAgICAgIHJldHVybiB0aGlzLmRhdGEudmFyaWFudHMgPyBPYmplY3Qua2V5cyh0aGlzLmRhdGEudmFyaWFudHMpIDogW107XG4gICAgfVxuXG4gICAgLy8gYXBwbHkgbWF0ZXJpYWwgdmFyaWFudCB0byBlbnRpdHlcbiAgICBhcHBseU1hdGVyaWFsVmFyaWFudChlbnRpdHksIG5hbWUpIHtcbiAgICAgICAgY29uc3QgdmFyaWFudCA9IG5hbWUgPyB0aGlzLmRhdGEudmFyaWFudHNbbmFtZV0gOiBudWxsO1xuICAgICAgICBpZiAodmFyaWFudCA9PT0gdW5kZWZpbmVkKSB7XG4gICAgICAgICAgICBEZWJ1Zy53YXJuKGBObyB2YXJpYW50IG5hbWVkICR7bmFtZX0gZXhpc3RzIGluIHJlc291cmNlYCk7XG4gICAgICAgICAgICByZXR1cm47XG4gICAgICAgIH1cbiAgICAgICAgY29uc3QgcmVuZGVycyA9IGVudGl0eS5maW5kQ29tcG9uZW50cyhcInJlbmRlclwiKTtcbiAgICAgICAgZm9yIChsZXQgaSA9IDA7IGkgPCByZW5kZXJzLmxlbmd0aDsgaSsrKSB7XG4gICAgICAgICAgICBjb25zdCByZW5kZXJDb21wb25lbnQgPSByZW5kZXJzW2ldO1xuICAgICAgICAgICAgdGhpcy5fYXBwbHlNYXRlcmlhbFZhcmlhbnQodmFyaWFudCwgcmVuZGVyQ29tcG9uZW50Lm1lc2hJbnN0YW5jZXMpO1xuICAgICAgICB9XG4gICAgfVxuXG4gICAgLy8gYXBwbHkgbWF0ZXJpYWwgdmFyaWFudCB0byBtZXNoIGluc3RhbmNlc1xuICAgIGFwcGx5TWF0ZXJpYWxWYXJpYW50SW5zdGFuY2VzKGluc3RhbmNlcywgbmFtZSkge1xuICAgICAgICBjb25zdCB2YXJpYW50ID0gbmFtZSA/IHRoaXMuZGF0YS52YXJpYW50c1tuYW1lXSA6IG51bGw7XG4gICAgICAgIGlmICh2YXJpYW50ID09PSB1bmRlZmluZWQpIHtcbiAgICAgICAgICAgIERlYnVnLndhcm4oYE5vIHZhcmlhbnQgbmFtZWQgJHtuYW1lfSBleGlzdHMgaW4gcmVzb3VyY2VgKTtcbiAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgfVxuICAgICAgICB0aGlzLl9hcHBseU1hdGVyaWFsVmFyaWFudCh2YXJpYW50LCBpbnN0YW5jZXMpO1xuICAgIH1cblxuICAgIC8vIGludGVybmFsbHkgYXBwbHkgdmFyaWFudCB0byBpbnN0YW5jZXNcbiAgICBfYXBwbHlNYXRlcmlhbFZhcmlhbnQodmFyaWFudCwgaW5zdGFuY2VzKSB7XG4gICAgICAgIGluc3RhbmNlcy5mb3JFYWNoKChpbnN0YW5jZSkgPT4ge1xuICAgICAgICAgICAgaWYgKHZhcmlhbnQgPT09IG51bGwpIHtcbiAgICAgICAgICAgICAgICBpbnN0YW5jZS5tYXRlcmlhbCA9IHRoaXMuX2RlZmF1bHRNYXRlcmlhbDtcbiAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgY29uc3QgbWVzaFZhcmlhbnRzID0gdGhpcy5kYXRhLm1lc2hWYXJpYW50c1tpbnN0YW5jZS5tZXNoLmlkXTtcbiAgICAgICAgICAgICAgICBpZiAobWVzaFZhcmlhbnRzKSB7XG4gICAgICAgICAgICAgICAgICAgIGluc3RhbmNlLm1hdGVyaWFsID0gdGhpcy5kYXRhLm1hdGVyaWFsc1ttZXNoVmFyaWFudHNbdmFyaWFudF1dO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIERlYnVnLmFzc2VydChpbnN0YW5jZS5tYXRlcmlhbCk7XG4gICAgICAgIH0pO1xuICAgIH1cblxuICAgIC8vIGhlbHBlciBmdW5jdGlvbiB0byBjcmVhdGUgYSBzaW5nbGUgaGllcmFyY2h5IGZyb20gYW4gYXJyYXkgb2Ygbm9kZXNcbiAgICBzdGF0aWMgY3JlYXRlU2NlbmVIaWVyYXJjaHkoc2NlbmVOb2Rlcywgbm9kZVR5cGUpIHtcblxuICAgICAgICAvLyBjcmVhdGUgYSBzaW5nbGUgcm9vdCBvZiB0aGUgaGllcmFyY2h5IC0gZWl0aGVyIHRoZSBzaW5nbGUgc2NlbmUsIG9yIGEgbmV3IEVudGl0eSBwYXJlbnQgaWYgbXVsdGlwbGUgc2NlbmVzXG4gICAgICAgIGxldCByb290ID0gbnVsbDtcbiAgICAgICAgaWYgKHNjZW5lTm9kZXMubGVuZ3RoID09PSAxKSB7XG4gICAgICAgICAgICAvLyB1c2Ugc2NlbmUgaWYgb25seSBvbmVcbiAgICAgICAgICAgIHJvb3QgPSBzY2VuZU5vZGVzWzBdO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgLy8gY3JlYXRlIGdyb3VwIG5vZGUgZm9yIGFsbCBzY2VuZXNcbiAgICAgICAgICAgIHJvb3QgPSBuZXcgbm9kZVR5cGUoJ1NjZW5lR3JvdXAnKTtcbiAgICAgICAgICAgIGZvciAoY29uc3Qgc2NlbmUgb2Ygc2NlbmVOb2Rlcykge1xuICAgICAgICAgICAgICAgIHJvb3QuYWRkQ2hpbGQoc2NlbmUpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG5cbiAgICAgICAgcmV0dXJuIHJvb3Q7XG4gICAgfVxuXG4gICAgLy8gY3JlYXRlIGEgcGMuTW9kZWwgZnJvbSB0aGUgcGFyc2VkIEdMQiBkYXRhIHN0cnVjdHVyZXNcbiAgICBzdGF0aWMgY3JlYXRlTW9kZWwoZ2xiLCBkZWZhdWx0TWF0ZXJpYWwpIHtcblxuICAgICAgICBjb25zdCBjcmVhdGVNZXNoSW5zdGFuY2UgPSBmdW5jdGlvbiAobW9kZWwsIG1lc2gsIHNraW5zLCBza2luSW5zdGFuY2VzLCBtYXRlcmlhbHMsIG5vZGUsIGdsdGZOb2RlKSB7XG4gICAgICAgICAgICBjb25zdCBtYXRlcmlhbEluZGV4ID0gZ2xiLm1lc2hEZWZhdWx0TWF0ZXJpYWxzW21lc2guaWRdO1xuICAgICAgICAgICAgY29uc3QgbWF0ZXJpYWwgPSAobWF0ZXJpYWxJbmRleCA9PT0gdW5kZWZpbmVkKSA/IGRlZmF1bHRNYXRlcmlhbCA6IG1hdGVyaWFsc1ttYXRlcmlhbEluZGV4XTtcbiAgICAgICAgICAgIGNvbnN0IG1lc2hJbnN0YW5jZSA9IG5ldyBNZXNoSW5zdGFuY2UobWVzaCwgbWF0ZXJpYWwsIG5vZGUpO1xuXG4gICAgICAgICAgICBpZiAobWVzaC5tb3JwaCkge1xuICAgICAgICAgICAgICAgIGNvbnN0IG1vcnBoSW5zdGFuY2UgPSBuZXcgTW9ycGhJbnN0YW5jZShtZXNoLm1vcnBoKTtcbiAgICAgICAgICAgICAgICBtZXNoSW5zdGFuY2UubW9ycGhJbnN0YW5jZSA9IG1vcnBoSW5zdGFuY2U7XG4gICAgICAgICAgICAgICAgbW9kZWwubW9ycGhJbnN0YW5jZXMucHVzaChtb3JwaEluc3RhbmNlKTtcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgaWYgKGdsdGZOb2RlLmhhc093blByb3BlcnR5KCdza2luJykpIHtcbiAgICAgICAgICAgICAgICBjb25zdCBza2luSW5kZXggPSBnbHRmTm9kZS5za2luO1xuICAgICAgICAgICAgICAgIGNvbnN0IHNraW4gPSBza2luc1tza2luSW5kZXhdO1xuICAgICAgICAgICAgICAgIG1lc2guc2tpbiA9IHNraW47XG5cbiAgICAgICAgICAgICAgICBjb25zdCBza2luSW5zdGFuY2UgPSBza2luSW5zdGFuY2VzW3NraW5JbmRleF07XG4gICAgICAgICAgICAgICAgbWVzaEluc3RhbmNlLnNraW5JbnN0YW5jZSA9IHNraW5JbnN0YW5jZTtcbiAgICAgICAgICAgICAgICBtb2RlbC5za2luSW5zdGFuY2VzLnB1c2goc2tpbkluc3RhbmNlKTtcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgbW9kZWwubWVzaEluc3RhbmNlcy5wdXNoKG1lc2hJbnN0YW5jZSk7XG4gICAgICAgIH07XG5cbiAgICAgICAgY29uc3QgbW9kZWwgPSBuZXcgTW9kZWwoKTtcblxuICAgICAgICAvLyBjcmVhdGUgc2tpbkluc3RhbmNlIGZvciBlYWNoIHNraW5cbiAgICAgICAgY29uc3Qgc2tpbkluc3RhbmNlcyA9IFtdO1xuICAgICAgICBmb3IgKGNvbnN0IHNraW4gb2YgZ2xiLnNraW5zKSB7XG4gICAgICAgICAgICBjb25zdCBza2luSW5zdGFuY2UgPSBuZXcgU2tpbkluc3RhbmNlKHNraW4pO1xuICAgICAgICAgICAgc2tpbkluc3RhbmNlLmJvbmVzID0gc2tpbi5ib25lcztcbiAgICAgICAgICAgIHNraW5JbnN0YW5jZXMucHVzaChza2luSW5zdGFuY2UpO1xuICAgICAgICB9XG5cbiAgICAgICAgLy8gbm9kZSBoaWVyYXJjaHkgZm9yIHRoZSBtb2RlbFxuICAgICAgICBtb2RlbC5ncmFwaCA9IEdsYkNvbnRhaW5lclJlc291cmNlLmNyZWF0ZVNjZW5lSGllcmFyY2h5KGdsYi5zY2VuZXMsICdHcmFwaE5vZGUnKTtcblxuICAgICAgICAvLyBjcmVhdGUgbWVzaCBpbnN0YW5jZSBmb3IgbWVzaGVzIG9uIG5vZGVzIHRoYXQgYXJlIHBhcnQgb2YgaGllcmFyY2h5XG4gICAgICAgIGZvciAobGV0IGkgPSAwOyBpIDwgZ2xiLm5vZGVzLmxlbmd0aDsgaSsrKSB7XG4gICAgICAgICAgICBjb25zdCBub2RlID0gZ2xiLm5vZGVzW2ldO1xuICAgICAgICAgICAgaWYgKG5vZGUucm9vdCA9PT0gbW9kZWwuZ3JhcGgpIHtcbiAgICAgICAgICAgICAgICBjb25zdCBnbHRmTm9kZSA9IGdsYi5nbHRmLm5vZGVzW2ldO1xuICAgICAgICAgICAgICAgIGlmIChnbHRmTm9kZS5oYXNPd25Qcm9wZXJ0eSgnbWVzaCcpKSB7XG4gICAgICAgICAgICAgICAgICAgIGNvbnN0IG1lc2hHcm91cCA9IGdsYi5yZW5kZXJzW2dsdGZOb2RlLm1lc2hdLm1lc2hlcztcbiAgICAgICAgICAgICAgICAgICAgZm9yICh2YXIgbWkgPSAwOyBtaSA8IG1lc2hHcm91cC5sZW5ndGg7IG1pKyspIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGNvbnN0IG1lc2ggPSBtZXNoR3JvdXBbbWldO1xuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKG1lc2gpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBjcmVhdGVNZXNoSW5zdGFuY2UobW9kZWwsIG1lc2gsIGdsYi5za2lucywgc2tpbkluc3RhbmNlcywgZ2xiLm1hdGVyaWFscywgbm9kZSwgZ2x0Zk5vZGUpO1xuICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICB9XG5cbiAgICAgICAgcmV0dXJuIG1vZGVsO1xuICAgIH1cblxuICAgIGRlc3Ryb3koKSB7XG4gICAgICAgIGNvbnN0IHJlZ2lzdHJ5ID0gdGhpcy5fYXNzZXRzO1xuXG4gICAgICAgIGNvbnN0IGRlc3Ryb3lBc3NldCA9IGZ1bmN0aW9uIChhc3NldCkge1xuICAgICAgICAgICAgcmVnaXN0cnkucmVtb3ZlKGFzc2V0KTtcbiAgICAgICAgICAgIGFzc2V0LnVubG9hZCgpO1xuICAgICAgICB9O1xuXG4gICAgICAgIGNvbnN0IGRlc3Ryb3lBc3NldHMgPSBmdW5jdGlvbiAoYXNzZXRzKSB7XG4gICAgICAgICAgICBhc3NldHMuZm9yRWFjaChmdW5jdGlvbiAoYXNzZXQpIHtcbiAgICAgICAgICAgICAgICBkZXN0cm95QXNzZXQoYXNzZXQpO1xuICAgICAgICAgICAgfSk7XG4gICAgICAgIH07XG5cbiAgICAgICAgLy8gdW5sb2FkIGFuZCBkZXN0cm95IGFzc2V0c1xuICAgICAgICBpZiAodGhpcy5hbmltYXRpb25zKSB7XG4gICAgICAgICAgICBkZXN0cm95QXNzZXRzKHRoaXMuYW5pbWF0aW9ucyk7XG4gICAgICAgICAgICB0aGlzLmFuaW1hdGlvbnMgPSBudWxsO1xuICAgICAgICB9XG5cbiAgICAgICAgaWYgKHRoaXMudGV4dHVyZXMpIHtcbiAgICAgICAgICAgIGRlc3Ryb3lBc3NldHModGhpcy50ZXh0dXJlcyk7XG4gICAgICAgICAgICB0aGlzLnRleHR1cmVzID0gbnVsbDtcbiAgICAgICAgfVxuXG4gICAgICAgIGlmICh0aGlzLm1hdGVyaWFscykge1xuICAgICAgICAgICAgZGVzdHJveUFzc2V0cyh0aGlzLm1hdGVyaWFscyk7XG4gICAgICAgICAgICB0aGlzLm1hdGVyaWFscyA9IG51bGw7XG4gICAgICAgIH1cblxuICAgICAgICBpZiAodGhpcy5yZW5kZXJzKSB7XG4gICAgICAgICAgICBkZXN0cm95QXNzZXRzKHRoaXMucmVuZGVycyk7XG4gICAgICAgICAgICB0aGlzLnJlbmRlcnMgPSBudWxsO1xuICAgICAgICB9XG5cbiAgICAgICAgaWYgKHRoaXMuX21vZGVsKSB7XG4gICAgICAgICAgICBkZXN0cm95QXNzZXQodGhpcy5fbW9kZWwpO1xuICAgICAgICAgICAgdGhpcy5fbW9kZWwgPSBudWxsO1xuICAgICAgICB9XG5cbiAgICAgICAgdGhpcy5kYXRhID0gbnVsbDtcbiAgICAgICAgdGhpcy5hc3NldHMgPSBudWxsO1xuICAgIH1cbn1cblxuZXhwb3J0IHsgR2xiQ29udGFpbmVyUmVzb3VyY2UgfTtcbiJdLCJuYW1lcyI6WyJHbGJDb250YWluZXJSZXNvdXJjZSIsImNvbnN0cnVjdG9yIiwiZGF0YSIsImFzc2V0IiwiYXNzZXRzIiwiZGVmYXVsdE1hdGVyaWFsIiwiY3JlYXRlQXNzZXQiLCJ0eXBlIiwicmVzb3VyY2UiLCJpbmRleCIsInN1YkFzc2V0IiwibmFtZSIsImFkZCIsInJlbmRlcnMiLCJpIiwibGVuZ3RoIiwicHVzaCIsIm1hdGVyaWFscyIsImFuaW1hdGlvbnMiLCJfbW9kZWwiLCJfYXNzZXROYW1lIiwiX2Fzc2V0cyIsIl9kZWZhdWx0TWF0ZXJpYWwiLCJ0ZXh0dXJlcyIsIm1vZGVsIiwiY3JlYXRlTW9kZWwiLCJtb2RlbEFzc2V0IiwiYXNzZXROYW1lIiwiQXNzZXQiLCJ1cmwiLCJsb2FkZWQiLCJpbnN0YW50aWF0ZU1vZGVsRW50aXR5Iiwib3B0aW9ucyIsImVudGl0eSIsIkVudGl0eSIsImFkZENvbXBvbmVudCIsIk9iamVjdCIsImFzc2lnbiIsImluc3RhbnRpYXRlUmVuZGVyRW50aXR5Iiwic2tpbm5lZE1lc2hJbnN0YW5jZXMiLCJjcmVhdGVNZXNoSW5zdGFuY2UiLCJyb290IiwibWVzaCIsIm1lc2hEZWZhdWx0TWF0ZXJpYWxzIiwic2tpbnMiLCJnbHRmTm9kZSIsIm1hdGVyaWFsSW5kZXgiLCJpZCIsIm1hdGVyaWFsIiwidW5kZWZpbmVkIiwibWVzaEluc3RhbmNlIiwiTWVzaEluc3RhbmNlIiwibW9ycGgiLCJtb3JwaEluc3RhbmNlIiwiTW9ycGhJbnN0YW5jZSIsImhhc093blByb3BlcnR5Iiwicm9vdEJvbmUiLCJjbG9uZUhpZXJhcmNoeSIsIm5vZGUiLCJnbGIiLCJfY2xvbmVJbnRlcm5hbCIsImF0dGFjaGVkTWkiLCJyZW5kZXJBc3NldCIsIm5vZGVzIiwiZ2xiTm9kZSIsImdsdGYiLCJtZXNoR3JvdXAiLCJtZXNoZXMiLCJtaSIsImNsb25lTWkiLCJsaWdodHMiLCJsaWdodEVudGl0eSIsImdldCIsImFkZENoaWxkIiwiY2xvbmUiLCJjYW1lcmFzIiwiY2FtZXJhRW50aXR5IiwiY2FtZXJhIiwic3lzdGVtIiwiY2xvbmVDb21wb25lbnQiLCJtZXNoSW5zdGFuY2VzIiwicmVuZGVyIiwiYXNzaWduQXNzZXQiLCJjaGlsZHJlbiIsImNoaWxkQ2xvbmUiLCJzY2VuZUNsb25lcyIsInNjZW5lIiwic2NlbmVzIiwiZm9yRWFjaCIsInNraW5JbnN0YW5jZSIsIlNraW5JbnN0YW5jZUNhY2hlIiwiY3JlYXRlQ2FjaGVkU2tpbkluc3RhbmNlIiwic2tpbiIsImNyZWF0ZVNjZW5lSGllcmFyY2h5IiwiZ2V0TWF0ZXJpYWxWYXJpYW50cyIsInZhcmlhbnRzIiwia2V5cyIsImFwcGx5TWF0ZXJpYWxWYXJpYW50IiwidmFyaWFudCIsIkRlYnVnIiwid2FybiIsImZpbmRDb21wb25lbnRzIiwicmVuZGVyQ29tcG9uZW50IiwiX2FwcGx5TWF0ZXJpYWxWYXJpYW50IiwiYXBwbHlNYXRlcmlhbFZhcmlhbnRJbnN0YW5jZXMiLCJpbnN0YW5jZXMiLCJpbnN0YW5jZSIsIm1lc2hWYXJpYW50cyIsImFzc2VydCIsInNjZW5lTm9kZXMiLCJub2RlVHlwZSIsInNraW5JbnN0YW5jZXMiLCJtb3JwaEluc3RhbmNlcyIsInNraW5JbmRleCIsIk1vZGVsIiwiU2tpbkluc3RhbmNlIiwiYm9uZXMiLCJncmFwaCIsImRlc3Ryb3kiLCJy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
