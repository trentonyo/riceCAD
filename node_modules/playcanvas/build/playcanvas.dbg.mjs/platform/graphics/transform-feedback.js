/**
 * @license
 * PlayCanvas Engine v1.58.0 revision 6672f604c (DEBUG PROFILER)
 * Copyright 2011-2022 PlayCanvas Ltd. All rights reserved.
 */
import { Debug } from '../../core/debug.js';
import { BUFFER_GPUDYNAMIC, PRIMITIVE_POINTS } from './constants.js';
import { VertexBuffer } from './vertex-buffer.js';
import { DebugGraphics } from './debug-graphics.js';
import { Shader } from './shader.js';
import { ShaderUtils } from './shader-utils.js';

class TransformFeedback {
  constructor(inputBuffer, usage = BUFFER_GPUDYNAMIC) {
    this.device = inputBuffer.device;
    const gl = this.device.gl;
    Debug.assert(inputBuffer.format.interleaved || inputBuffer.format.elements.length <= 1, "Vertex buffer used by TransformFeedback needs to be interleaved.");
    this._inputBuffer = inputBuffer;
    if (usage === BUFFER_GPUDYNAMIC && inputBuffer.usage !== usage) {
      gl.bindBuffer(gl.ARRAY_BUFFER, inputBuffer.impl.bufferId);
      gl.bufferData(gl.ARRAY_BUFFER, inputBuffer.storage, gl.DYNAMIC_COPY);
    }
    this._outputBuffer = new VertexBuffer(inputBuffer.device, inputBuffer.format, inputBuffer.numVertices, usage, inputBuffer.storage);
  }

  static createShader(graphicsDevice, vertexCode, name) {
    return new Shader(graphicsDevice, ShaderUtils.createDefinition(graphicsDevice, {
      name,
      vertexCode,
      useTransformFeedback: true
    }));
  }

  destroy() {
    this._outputBuffer.destroy();
  }

  process(shader, swap = true) {
    const device = this.device;
    DebugGraphics.pushGpuMarker(device, "TransformFeedback");
    const oldRt = device.getRenderTarget();
    device.setRenderTarget(null);
    device.updateBegin();
    device.setVertexBuffer(this._inputBuffer, 0);
    device.setRaster(false);
    device.setTransformFeedbackBuffer(this._outputBuffer);
    device.setShader(shader);
    device.draw({
      type: PRIMITIVE_POINTS,
      base: 0,
      count: this._inputBuffer.numVertices,
      indexed: false
    });
    device.setTransformFeedbackBuffer(null);
    device.setRaster(true);
    device.updateEnd();
    device.setRenderTarget(oldRt);
    DebugGraphics.popGpuMarker(device);

    if (swap) {
      let tmp = this._inputBuffer.impl.bufferId;
      this._inputBuffer.impl.bufferId = this._outputBuffer.impl.bufferId;
      this._outputBuffer.impl.bufferId = tmp;

      tmp = this._inputBuffer.impl.vao;
      this._inputBuffer.impl.vao = this._outputBuffer.impl.vao;
      this._outputBuffer.impl.vao = tmp;
    }
  }

  get inputBuffer() {
    return this._inputBuffer;
  }

  get outputBuffer() {
    return this._outputBuffer;
  }
}

export { TransformFeedback };
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoidHJhbnNmb3JtLWZlZWRiYWNrLmpzIiwic291cmNlcyI6WyIuLi8uLi8uLi8uLi9zcmMvcGxhdGZvcm0vZ3JhcGhpY3MvdHJhbnNmb3JtLWZlZWRiYWNrLmpzIl0sInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IERlYnVnIH0gZnJvbSAnLi4vLi4vY29yZS9kZWJ1Zy5qcyc7XG5cbmltcG9ydCB7IEJVRkZFUl9HUFVEWU5BTUlDLCBQUklNSVRJVkVfUE9JTlRTIH0gZnJvbSAnLi9jb25zdGFudHMuanMnO1xuaW1wb3J0IHsgVmVydGV4QnVmZmVyIH0gZnJvbSAnLi92ZXJ0ZXgtYnVmZmVyLmpzJztcbmltcG9ydCB7IERlYnVnR3JhcGhpY3MgfSBmcm9tICcuL2RlYnVnLWdyYXBoaWNzLmpzJztcbmltcG9ydCB7IFNoYWRlciB9IGZyb20gJy4vc2hhZGVyLmpzJztcbmltcG9ydCB7IFNoYWRlclV0aWxzIH0gZnJvbSAnLi9zaGFkZXItdXRpbHMuanMnO1xuXG4vKiogQHR5cGVkZWYge2ltcG9ydCgnLi9ncmFwaGljcy1kZXZpY2UuanMnKS5HcmFwaGljc0RldmljZX0gR3JhcGhpY3NEZXZpY2UgKi9cblxuLyoqXG4gKiBUaGlzIG9iamVjdCBhbGxvd3MgeW91IHRvIGNvbmZpZ3VyZSBhbmQgdXNlIHRoZSB0cmFuc2Zvcm0gZmVlZGJhY2sgZmVhdHVyZSAoV2ViR0wyIG9ubHkpLiBIb3cgdG9cbiAqIHVzZTpcbiAqXG4gKiAxLiBGaXJzdCwgY2hlY2sgdGhhdCB5b3UncmUgb24gV2ViR0wyLCBieSBsb29raW5nIGF0IHRoZSBgYXBwLmdyYXBoaWNzRGV2aWNlLndlYmdsMmBgIHZhbHVlLlxuICogMi4gRGVmaW5lIHRoZSBvdXRwdXRzIGluIHlvdXIgdmVydGV4IHNoYWRlci4gVGhlIHN5bnRheCBpcyBgb3V0IHZlYzMgb3V0X3ZlcnRleF9wb3NpdGlvbmAsXG4gKiBub3RlIHRoYXQgdGhlcmUgbXVzdCBiZSBvdXRfIGluIHRoZSBuYW1lLiBZb3UgY2FuIHRoZW4gc2ltcGx5IGFzc2lnbiB2YWx1ZXMgdG8gdGhlc2Ugb3V0cHV0cyBpblxuICogVlMuIFRoZSBvcmRlciBhbmQgc2l6ZSBvZiBzaGFkZXIgb3V0cHV0cyBtdXN0IG1hdGNoIHRoZSBvdXRwdXQgYnVmZmVyIGxheW91dC5cbiAqIDMuIENyZWF0ZSB0aGUgc2hhZGVyIHVzaW5nIGBUcmFuc2Zvcm1GZWVkYmFjay5jcmVhdGVTaGFkZXIoZGV2aWNlLCB2c0NvZGUsIHlvdXJTaGFkZXJOYW1lKWAuXG4gKiA0LiBDcmVhdGUvYWNxdWlyZSB0aGUgaW5wdXQgdmVydGV4IGJ1ZmZlci4gQ2FuIGJlIGFueSBWZXJ0ZXhCdWZmZXIsIGVpdGhlciBtYW51YWxseSBjcmVhdGVkLCBvclxuICogZnJvbSBhIE1lc2guXG4gKiA1LiBDcmVhdGUgdGhlIFRyYW5zZm9ybUZlZWRiYWNrIG9iamVjdDogYHZhciB0ZiA9IG5ldyBUcmFuc2Zvcm1GZWVkYmFjayhpbnB1dEJ1ZmZlcilgLiBUaGlzXG4gKiBvYmplY3Qgd2lsbCBpbnRlcm5hbGx5IGNyZWF0ZSBhbiBvdXRwdXQgYnVmZmVyLlxuICogNi4gUnVuIHRoZSBzaGFkZXI6IGB0Zi5wcm9jZXNzKHNoYWRlcilgLiBTaGFkZXIgd2lsbCB0YWtlIHRoZSBpbnB1dCBidWZmZXIsIHByb2Nlc3MgaXQgYW5kIHdyaXRlXG4gKiB0byB0aGUgb3V0cHV0IGJ1ZmZlciwgdGhlbiB0aGUgaW5wdXQvb3V0cHV0IGJ1ZmZlcnMgd2lsbCBiZSBhdXRvbWF0aWNhbGx5IHN3YXBwZWQsIHNvIHlvdSdsbFxuICogaW1tZWRpYXRlbHkgc2VlIHRoZSByZXN1bHQuXG4gKlxuICogYGBgamF2YXNjcmlwdFxuICogLy8gKioqIHNoYWRlciBhc3NldCAqKipcbiAqIGF0dHJpYnV0ZSB2ZWMzIHZlcnRleF9wb3NpdGlvbjtcbiAqIGF0dHJpYnV0ZSB2ZWMzIHZlcnRleF9ub3JtYWw7XG4gKiBhdHRyaWJ1dGUgdmVjMiB2ZXJ0ZXhfdGV4Q29vcmQwO1xuICogb3V0IHZlYzMgb3V0X3ZlcnRleF9wb3NpdGlvbjtcbiAqIG91dCB2ZWMzIG91dF92ZXJ0ZXhfbm9ybWFsO1xuICogb3V0IHZlYzIgb3V0X3ZlcnRleF90ZXhDb29yZDA7XG4gKiB2b2lkIG1haW4odm9pZCkge1xuICogICAgIC8vIHJlYWQgcG9zaXRpb24gYW5kIG5vcm1hbCwgd3JpdGUgbmV3IHBvc2l0aW9uIChwdXNoIGF3YXkpXG4gKiAgICAgb3V0X3ZlcnRleF9wb3NpdGlvbiA9IHZlcnRleF9wb3NpdGlvbiArIHZlcnRleF9ub3JtYWwgKiAwLjAxO1xuICogICAgIC8vIHBhc3Mgb3RoZXIgYXR0cmlidXRlcyB1bmNoYW5nZWRcbiAqICAgICBvdXRfdmVydGV4X25vcm1hbCA9IHZlcnRleF9ub3JtYWw7XG4gKiAgICAgb3V0X3ZlcnRleF90ZXhDb29yZDAgPSB2ZXJ0ZXhfdGV4Q29vcmQwO1xuICogfVxuICogYGBgXG4gKlxuICogYGBgamF2YXNjcmlwdFxuICogLy8gKioqIHNjcmlwdCBhc3NldCAqKipcbiAqIHZhciBUcmFuc2Zvcm1FeGFtcGxlID0gcGMuY3JlYXRlU2NyaXB0KCd0cmFuc2Zvcm1FeGFtcGxlJyk7XG4gKlxuICogLy8gYXR0cmlidXRlIHRoYXQgcmVmZXJlbmNlcyBzaGFkZXIgYXNzZXQgYW5kIG1hdGVyaWFsXG4gKiBUcmFuc2Zvcm1FeGFtcGxlLmF0dHJpYnV0ZXMuYWRkKCdzaGFkZXJDb2RlJywgeyB0eXBlOiAnYXNzZXQnLCBhc3NldFR5cGU6ICdzaGFkZXInIH0pO1xuICogVHJhbnNmb3JtRXhhbXBsZS5hdHRyaWJ1dGVzLmFkZCgnbWF0ZXJpYWwnLCB7IHR5cGU6ICdhc3NldCcsIGFzc2V0VHlwZTogJ21hdGVyaWFsJyB9KTtcbiAqXG4gKiBUcmFuc2Zvcm1FeGFtcGxlLnByb3RvdHlwZS5pbml0aWFsaXplID0gZnVuY3Rpb24oKSB7XG4gKiAgICAgdmFyIGRldmljZSA9IHRoaXMuYXBwLmdyYXBoaWNzRGV2aWNlO1xuICogICAgIHZhciBtZXNoID0gcGMuY3JlYXRlVG9ydXMoZGV2aWNlLCB7IHR1YmVSYWRpdXM6IDAuMDEsIHJpbmdSYWRpdXM6IDMgfSk7XG4gKiAgICAgdmFyIG1lc2hJbnN0YW5jZSA9IG5ldyBwYy5NZXNoSW5zdGFuY2UobWVzaCwgdGhpcy5tYXRlcmlhbC5yZXNvdXJjZSk7XG4gKiAgICAgdmFyIGVudGl0eSA9IG5ldyBwYy5FbnRpdHkoKTtcbiAqICAgICBlbnRpdHkuYWRkQ29tcG9uZW50KCdyZW5kZXInLCB7XG4gKiAgICAgICAgIHR5cGU6ICdhc3NldCcsXG4gKiAgICAgICAgIG1lc2hJbnN0YW5jZXM6IFttZXNoSW5zdGFuY2VdXG4gKiAgICAgfSk7XG4gKiAgICAgYXBwLnJvb3QuYWRkQ2hpbGQoZW50aXR5KTtcbiAqXG4gKiAgICAgLy8gaWYgd2ViZ2wyIGlzIG5vdCBzdXBwb3J0ZWQsIHRyYW5zZm9ybS1mZWVkYmFjayBpcyBub3QgYXZhaWxhYmxlXG4gKiAgICAgaWYgKCFkZXZpY2Uud2ViZ2wyKSByZXR1cm47XG4gKiAgICAgdmFyIGlucHV0QnVmZmVyID0gbWVzaC52ZXJ0ZXhCdWZmZXI7XG4gKiAgICAgdGhpcy50ZiA9IG5ldyBwYy5UcmFuc2Zvcm1GZWVkYmFjayhpbnB1dEJ1ZmZlcik7XG4gKiAgICAgdGhpcy5zaGFkZXIgPSBwYy5UcmFuc2Zvcm1GZWVkYmFjay5jcmVhdGVTaGFkZXIoZGV2aWNlLCB0aGlzLnNoYWRlckNvZGUucmVzb3VyY2UsIFwidGZNb3ZlVXBcIik7XG4gKiB9O1xuICpcbiAqIFRyYW5zZm9ybUV4YW1wbGUucHJvdG90eXBlLnVwZGF0ZSA9IGZ1bmN0aW9uKGR0KSB7XG4gKiAgICAgaWYgKCF0aGlzLmFwcC5ncmFwaGljc0RldmljZS53ZWJnbDIpIHJldHVybjtcbiAqICAgICB0aGlzLnRmLnByb2Nlc3ModGhpcy5zaGFkZXIpO1xuICogfTtcbiAqIGBgYFxuICovXG5jbGFzcyBUcmFuc2Zvcm1GZWVkYmFjayB7XG4gICAgLyoqXG4gICAgICogQ3JlYXRlIGEgbmV3IFRyYW5zZm9ybUZlZWRiYWNrIGluc3RhbmNlLlxuICAgICAqXG4gICAgICogQHBhcmFtIHtWZXJ0ZXhCdWZmZXJ9IGlucHV0QnVmZmVyIC0gVGhlIGlucHV0IHZlcnRleCBidWZmZXIuXG4gICAgICogQHBhcmFtIHtudW1iZXJ9IFt1c2FnZV0gLSBUaGUgb3B0aW9uYWwgdXNhZ2UgdHlwZSBvZiB0aGUgb3V0cHV0IHZlcnRleCBidWZmZXIuIENhbiBiZTpcbiAgICAgKlxuICAgICAqIC0ge0BsaW5rIEJVRkZFUl9TVEFUSUN9XG4gICAgICogLSB7QGxpbmsgQlVGRkVSX0RZTkFNSUN9XG4gICAgICogLSB7QGxpbmsgQlVGRkVSX1NUUkVBTX1cbiAgICAgKiAtIHtAbGluayBCVUZGRVJfR1BVRFlOQU1JQ31cbiAgICAgKlxuICAgICAqIERlZmF1bHRzIHRvIHtAbGluayBCVUZGRVJfR1BVRFlOQU1JQ30gKHdoaWNoIGlzIHJlY29tbWVuZGVkIGZvciBjb250aW51b3VzIHVwZGF0ZSkuXG4gICAgICovXG4gICAgY29uc3RydWN0b3IoaW5wdXRCdWZmZXIsIHVzYWdlID0gQlVGRkVSX0dQVURZTkFNSUMpIHtcbiAgICAgICAgdGhpcy5kZXZpY2UgPSBpbnB1dEJ1ZmZlci5kZXZpY2U7XG4gICAgICAgIGNvbnN0IGdsID0gdGhpcy5kZXZpY2UuZ2w7XG5cbiAgICAgICAgRGVidWcuYXNzZXJ0KGlucHV0QnVmZmVyLmZvcm1hdC5pbnRlcmxlYXZlZCB8fCBpbnB1dEJ1ZmZlci5mb3JtYXQuZWxlbWVudHMubGVuZ3RoIDw9IDEsXG4gICAgICAgICAgICAgICAgICAgICBcIlZlcnRleCBidWZmZXIgdXNlZCBieSBUcmFuc2Zvcm1GZWVkYmFjayBuZWVkcyB0byBiZSBpbnRlcmxlYXZlZC5cIik7XG5cbiAgICAgICAgdGhpcy5faW5wdXRCdWZmZXIgPSBpbnB1dEJ1ZmZlcjtcbiAgICAgICAgaWYgKHVzYWdlID09PSBCVUZGRVJfR1BVRFlOQU1JQyAmJiBpbnB1dEJ1ZmZlci51c2FnZSAhPT0gdXNhZ2UpIHtcbiAgICAgICAgICAgIC8vIGhhdmUgdG8gcmVjcmVhdGUgaW5wdXQgYnVmZmVyIHdpdGggb3RoZXIgdXNhZ2VcbiAgICAgICAgICAgIGdsLmJpbmRCdWZmZXIoZ2wuQVJSQVlfQlVGRkVSLCBpbnB1dEJ1ZmZlci5pbXBsLmJ1ZmZlcklkKTtcbiAgICAgICAgICAgIGdsLmJ1ZmZlckRhdGEoZ2wuQVJSQVlfQlVGRkVSLCBpbnB1dEJ1ZmZlci5zdG9yYWdlLCBnbC5EWU5BTUlDX0NPUFkpO1xuICAgICAgICB9XG5cbiAgICAgICAgdGhpcy5fb3V0cHV0QnVmZmVyID0gbmV3IFZlcnRleEJ1ZmZlcihpbnB1dEJ1ZmZlci5kZXZpY2UsIGlucHV0QnVmZmVyLmZvcm1hdCwgaW5wdXRCdWZmZXIubnVtVmVydGljZXMsIHVzYWdlLCBpbnB1dEJ1ZmZlci5zdG9yYWdlKTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBDcmVhdGVzIGEgdHJhbnNmb3JtIGZlZWRiYWNrIHJlYWR5IHZlcnRleCBzaGFkZXIgZnJvbSBjb2RlLlxuICAgICAqXG4gICAgICogQHBhcmFtIHtHcmFwaGljc0RldmljZX0gZ3JhcGhpY3NEZXZpY2UgLSBUaGUgZ3JhcGhpY3MgZGV2aWNlIHVzZWQgYnkgdGhlIHJlbmRlcmVyLlxuICAgICAqIEBwYXJhbSB7c3RyaW5nfSB2ZXJ0ZXhDb2RlIC0gVmVydGV4IHNoYWRlciBjb2RlLiBTaG91bGQgY29udGFpbiBvdXRwdXQgdmFyaWFibGVzIHN0YXJ0aW5nIHdpdGggXCJvdXRfXCIuXG4gICAgICogQHBhcmFtIHtzdHJpbmd9IG5hbWUgLSBVbmlxdWUgbmFtZSBmb3IgY2FjaGluZyB0aGUgc2hhZGVyLlxuICAgICAqIEByZXR1cm5zIHtTaGFkZXJ9IEEgc2hhZGVyIHRvIHVzZSBpbiB0aGUgcHJvY2VzcygpIGZ1bmN0aW9uLlxuICAgICAqL1xuICAgIHN0YXRpYyBjcmVhdGVTaGFkZXIoZ3JhcGhpY3NEZXZpY2UsIHZlcnRleENvZGUsIG5hbWUpIHtcbiAgICAgICAgcmV0dXJuIG5ldyBTaGFkZXIoZ3JhcGhpY3NEZXZpY2UsIFNoYWRlclV0aWxzLmNyZWF0ZURlZmluaXRpb24oZ3JhcGhpY3NEZXZpY2UsIHtcbiAgICAgICAgICAgIG5hbWUsXG4gICAgICAgICAgICB2ZXJ0ZXhDb2RlLFxuICAgICAgICAgICAgdXNlVHJhbnNmb3JtRmVlZGJhY2s6IHRydWVcbiAgICAgICAgfSkpO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIERlc3Ryb3lzIHRoZSB0cmFuc2Zvcm0gZmVlZGJhY2sgaGVscGVyIG9iamVjdC5cbiAgICAgKi9cbiAgICBkZXN0cm95KCkge1xuICAgICAgICB0aGlzLl9vdXRwdXRCdWZmZXIuZGVzdHJveSgpO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIFJ1bnMgdGhlIHNwZWNpZmllZCBzaGFkZXIgb24gdGhlIGlucHV0IGJ1ZmZlciwgd3JpdGVzIHJlc3VsdHMgaW50byB0aGUgbmV3IGJ1ZmZlciwgdGhlblxuICAgICAqIG9wdGlvbmFsbHkgc3dhcHMgaW5wdXQvb3V0cHV0LlxuICAgICAqXG4gICAgICogQHBhcmFtIHtTaGFkZXJ9IHNoYWRlciAtIEEgdmVydGV4IHNoYWRlciB0byBydW4uIFNob3VsZCBiZSBjcmVhdGVkIHdpdGhcbiAgICAgKiB7QGxpbmsgVHJhbnNmb3JtRmVlZGJhY2suY3JlYXRlU2hhZGVyfS5cbiAgICAgKiBAcGFyYW0ge2Jvb2xlYW59IFtzd2FwXSAtIFN3YXAgaW5wdXQvb3V0cHV0IGJ1ZmZlciBkYXRhLiBVc2VmdWwgZm9yIGNvbnRpbnVvdXMgYnVmZmVyXG4gICAgICogcHJvY2Vzc2luZy4gRGVmYXVsdCBpcyB0cnVlLlxuICAgICAqL1xuICAgIHByb2Nlc3Moc2hhZGVyLCBzd2FwID0gdHJ1ZSkge1xuICAgICAgICBjb25zdCBkZXZpY2UgPSB0aGlzLmRldmljZTtcblxuICAgICAgICBEZWJ1Z0dyYXBoaWNzLnB1c2hHcHVNYXJrZXIoZGV2aWNlLCBcIlRyYW5zZm9ybUZlZWRiYWNrXCIpO1xuXG4gICAgICAgIGNvbnN0IG9sZFJ0ID0gZGV2aWNlLmdldFJlbmRlclRhcmdldCgpO1xuICAgICAgICBkZXZpY2Uuc2V0UmVuZGVyVGFyZ2V0KG51bGwpO1xuICAgICAgICBkZXZpY2UudXBkYXRlQmVnaW4oKTtcbiAgICAgICAgZGV2aWNlLnNldFZlcnRleEJ1ZmZlcih0aGlzLl9pbnB1dEJ1ZmZlciwgMCk7XG4gICAgICAgIGRldmljZS5zZXRSYXN0ZXIoZmFsc2UpO1xuICAgICAgICBkZXZpY2Uuc2V0VHJhbnNmb3JtRmVlZGJhY2tCdWZmZXIodGhpcy5fb3V0cHV0QnVmZmVyKTtcbiAgICAgICAgZGV2aWNlLnNldFNoYWRlcihzaGFkZXIpO1xuICAgICAgICBkZXZpY2UuZHJhdyh7XG4gICAgICAgICAgICB0eXBlOiBQUklNSVRJVkVfUE9JTlRTLFxuICAgICAgICAgICAgYmFzZTogMCxcbiAgICAgICAgICAgIGNvdW50OiB0aGlzLl9pbnB1dEJ1ZmZlci5udW1WZXJ0aWNlcyxcbiAgICAgICAgICAgIGluZGV4ZWQ6IGZhbHNlXG4gICAgICAgIH0pO1xuICAgICAgICBkZXZpY2Uuc2V0VHJhbnNmb3JtRmVlZGJhY2tCdWZmZXIobnVsbCk7XG4gICAgICAgIGRldmljZS5zZXRSYXN0ZXIodHJ1ZSk7XG4gICAgICAgIGRldmljZS51cGRhdGVFbmQoKTtcbiAgICAgICAgZGV2aWNlLnNldFJlbmRlclRhcmdldChvbGRSdCk7XG5cbiAgICAgICAgRGVidWdHcmFwaGljcy5wb3BHcHVNYXJrZXIoZGV2aWNlKTtcblxuICAgICAgICAvLyBzd2FwIGJ1ZmZlcnNcbiAgICAgICAgaWYgKHN3YXApIHtcbiAgICAgICAgICAgIGxldCB0bXAgPSB0aGlzLl9pbnB1dEJ1ZmZlci5pbXBsLmJ1ZmZlcklkO1xuICAgICAgICAgICAgdGhpcy5faW5wdXRCdWZmZXIuaW1wbC5idWZmZXJJZCA9IHRoaXMuX291dHB1dEJ1ZmZlci5pbXBsLmJ1ZmZlcklkO1xuICAgICAgICAgICAgdGhpcy5fb3V0cHV0QnVmZmVyLmltcGwuYnVmZmVySWQgPSB0bXA7XG5cbiAgICAgICAgICAgIC8vIHN3YXAgVkFPXG4gICAgICAgICAgICB0bXAgPSB0aGlzLl9pbnB1dEJ1ZmZlci5pbXBsLnZhbztcbiAgICAgICAgICAgIHRoaXMuX2lucHV0QnVmZmVyLmltcGwudmFvID0gdGhpcy5fb3V0cHV0QnVmZmVyLmltcGwudmFvO1xuICAgICAgICAgICAgdGhpcy5fb3V0cHV0QnVmZmVyLmltcGwudmFvID0gdG1wO1xuICAgICAgICB9XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogVGhlIGN1cnJlbnQgaW5wdXQgYnVmZmVyLlxuICAgICAqXG4gICAgICogQHR5cGUge1ZlcnRleEJ1ZmZlcn1cbiAgICAgKi9cbiAgICBnZXQgaW5wdXRCdWZmZXIoKSB7XG4gICAgICAgIHJldHVybiB0aGlzLl9pbnB1dEJ1ZmZlcjtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBUaGUgY3VycmVudCBvdXRwdXQgYnVmZmVyLlxuICAgICAqXG4gICAgICogQHR5cGUge1ZlcnRleEJ1ZmZlcn1cbiAgICAgKi9cbiAgICBnZXQgb3V0cHV0QnVmZmVyKCkge1xuICAgICAgICByZXR1cm4gdGhpcy5fb3V0cHV0QnVmZmVyO1xuICAgIH1cbn1cblxuZXhwb3J0IHsgVHJhbnNmb3JtRmVlZGJhY2sgfTtcbiJdLCJuYW1lcyI6WyJUcmFuc2Zvcm1GZWVkYmFjayIsImNvbnN0cnVjdG9yIiwiaW5wdXRCdWZmZXIiLCJ1c2FnZSIsIkJVRkZFUl9HUFVEWU5BTUlDIiwiZGV2aWNlIiwiZ2wiLCJEZWJ1ZyIsImFzc2VydCIsImZvcm1hdCIsImludGVybGVhdmVkIiwiZWxlbWVudHMiLCJsZW5ndGgiLCJfaW5wdXRCdWZmZXIiLCJiaW5kQnVmZmVyIiwiQVJSQVlfQlVGRkVSIiwiaW1wbCIsImJ1ZmZlcklkIiwiYnVmZmVyRGF0YSIsInN0b3JhZ2UiLCJEWU5BTUlDX0NPUFkiLCJfb3V0cHV0QnVmZmVyIiwiVmVydGV4QnVmZmVyIiwibnVtVmVydGljZXMiLCJjcmVhdGVTaGFkZXIiLCJncmFwaGljc0RldmljZSIsInZlcnRleENvZGUiLCJuYW1lIiwiU2hhZGVyIiwiU2hhZGVyVXRpbHMiLCJjcmVhdGVEZWZpbml0aW9uIiwidXNlVHJhbnNmb3JtRmVlZGJhY2siLCJkZXN0cm95IiwicHJvY2VzcyIsInNoYWRlciIsInN3YXAiLCJEZWJ1Z0dyYXBoaWNzIiwicHVzaEdwdU1hcmtlciIsIm9sZFJ0IiwiZ2V0UmVuZGVyVGFyZ2V0Iiwic2V0UmVuZGVyVGFyZ2V0IiwidXBkYXRlQmVnaW4iLCJzZXRWZXJ0ZXhCdWZmZXIiLCJzZXRSYXN0ZXIiLCJzZXRUcmFuc2Zvcm1GZWVkYmFja0J1ZmZlciIsInNldFNoYWRlciIsImRyYXciLCJ0eXBlIiwiUFJJTUlUSVZFX1BPSU5UUyIsImJhc2UiLCJjb3VudCIsImluZGV4ZWQiLCJ1cGRhdGVFbmQiLCJwb3BHcHVNYXJrZXIiLCJ0bXAiLCJ2YW8iLCJvdXRwdXRCdWZmZXIiXSwibWFwcGluZ3MiOiI7Ozs7Ozs7Ozs7OztBQTRFQSxNQUFNQSxpQkFBaUIsQ0FBQztBQWNwQkMsRUFBQUEsV0FBVyxDQUFDQyxXQUFXLEVBQUVDLEtBQUssR0FBR0MsaUJBQWlCLEVBQUU7QUFDaEQsSUFBQSxJQUFJLENBQUNDLE1BQU0sR0FBR0gsV0FBVyxDQUFDRyxNQUFNLENBQUE7QUFDaEMsSUFBQSxNQUFNQyxFQUFFLEdBQUcsSUFBSSxDQUFDRCxNQUFNLENBQUNDLEVBQUUsQ0FBQTtJQUV6QkMsS0FBSyxDQUFDQyxNQUFNLENBQUNOLFdBQVcsQ0FBQ08sTUFBTSxDQUFDQyxXQUFXLElBQUlSLFdBQVcsQ0FBQ08sTUFBTSxDQUFDRSxRQUFRLENBQUNDLE1BQU0sSUFBSSxDQUFDLEVBQ3pFLGtFQUFrRSxDQUFDLENBQUE7SUFFaEYsSUFBSSxDQUFDQyxZQUFZLEdBQUdYLFdBQVcsQ0FBQTtJQUMvQixJQUFJQyxLQUFLLEtBQUtDLGlCQUFpQixJQUFJRixXQUFXLENBQUNDLEtBQUssS0FBS0EsS0FBSyxFQUFFO0FBRTVERyxNQUFBQSxFQUFFLENBQUNRLFVBQVUsQ0FBQ1IsRUFBRSxDQUFDUyxZQUFZLEVBQUViLFdBQVcsQ0FBQ2MsSUFBSSxDQUFDQyxRQUFRLENBQUMsQ0FB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
